<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title></title>
    <url>/2021/10/06/db/mysql_base/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2021/10/06/db/mysql_base_sql/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2021/10/06/db/mysql_other/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2021/10/06/db/redis/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2021/10/06/db/mysql_principle/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2021/10/06/os/linuxCmd/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2021/10/06/os/linuxCmdPlus/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2021/10/06/distribute/hadoop/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2021/10/06/distribute/spark/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2021/10/06/db/mysql_details/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>数据库规范</title>
    <url>/2021/10/06/db/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%A7%84%E8%8C%83/</url>
    <content><![CDATA[<h3 id="外键"><a href="#外键" class="headerlink" title="外键"></a>外键</h3><ol>
<li>每次delete update都需要考虑外键。</li>
<li>阿里巴巴开发规范禁用外键。</li>
<li>每次考虑外键都要检查主外键表，造成了效率低下。</li>
<li>级联删除造成数据不可控（不可追溯）</li>
<li></li>
</ol>
]]></content>
      <categories>
        <category>数据库</category>
        <category>mysql</category>
      </categories>
  </entry>
  <entry>
    <title>数据库事务</title>
    <url>/2021/10/06/db/%E4%BA%8B%E5%8A%A1/</url>
    <content><![CDATA[<p>ACID</p>
<p><a href="https://www.cnblogs.com/takumicx/p/9998844.html">数据库事务cnblog</a></p>
<ol>
<li><p>Atomicity 原子性</p>
<ol>
<li>begin</li>
<li>sql1</li>
<li>sql2</li>
<li>commit</li>
<li>构成逻辑整体的这些数据库操作,要么全部执行成功,要么全部不执行。基于以事务为单位执行</li>
</ol>
</li>
</ol>
<span id="more"></span>

<ol start="2">
<li><p>Consistency一致性：正确性，一个一致性转移到另一个一致性，并且拥有完整性约束。</p>
</li>
<li><p>Isolation隔离性：可串行化，即并发执行和串行执行结果一样。</p>
</li>
<li><p>Durability持久性：事务一旦提交，其对数据库的更新是永久的。</p>
<p><img src="https://job-wyg.oss-cn-beijing.aliyuncs.com/image-20210924130355472.png" alt="image-20210924130355472"></p>
</li>
</ol>
<h3 id="—"><a href="#—" class="headerlink" title="—"></a>—</h3><ol>
<li>在事务的ACID特性中,C即一致性是事务的根本追求,而对数据一致性的破坏主要来自两个方面<ol>
<li>事务的并发执行</li>
<li>事务故障或系统故障</li>
</ol>
</li>
<li>数据库系统是通过并发控制技术和日志恢复技术来避免这种情况发生的。</li>
</ol>
<h3 id="各种错误"><a href="#各种错误" class="headerlink" title="各种错误"></a>各种错误</h3><ol>
<li><p>脏读:事务读取了其他事务还没提交的事务</p>
</li>
<li><p>丢失更新:两个事务对相同的值进行更改，造成了一个更改失败。：a=10   q:a=a-10</p>
<p>p:a=a+10  结果a=10</p>
</li>
<li><p>不可重复度读：读了一次A=1，另一个事务对A改变，第二次在读是A=2.</p>
</li>
<li><p>幻读:事务前后数量发生变化。a删除了，另一个事务有插入了一个a，这样数量变了，造成了幻觉。</p>
</li>
</ol>
<h3 id="隔离级别"><a href="#隔离级别" class="headerlink" title="隔离级别"></a>隔离级别</h3><ol>
<li><p>四种隔离级别从高到低依次是：</p>
<ol>
<li><p>读未提交</p>
</li>
<li><p>读已提交</p>
</li>
<li><p>可重复读 mysql 默认rr</p>
</li>
<li><p>创行化</p>
<p><img src="E:\data-ana\ana-notes\experience\db\隔离级别" alt="image-20210924131844559"></p>
</li>
</ol>
</li>
<li><p>事务隔离实现：并发控制</p>
<ol>
<li>基于封锁</li>
<li>基于时间戳</li>
<li>基于有效检查</li>
<li>基于快照</li>
<li></li>
</ol>
</li>
</ol>
]]></content>
      <categories>
        <category>数据库</category>
        <category>mysql</category>
      </categories>
  </entry>
  <entry>
    <title>hadoop的启动</title>
    <url>/2021/10/06/distribute/hadoop%E5%90%AF%E5%8A%A8/</url>
    <content><![CDATA[<h2 id="一、-基本环境"><a href="#一、-基本环境" class="headerlink" title="一、 基本环境"></a>一、 基本环境</h2><ol>
<li><p>获取主机名字 master、s1、s2</p>
</li>
<li><p>时钟同步</p>
<pre class="line-numbers language-none"><code class="language-none">&#x2F;usr&#x2F;sbin&#x2F;ntpdate cn.pool.ntp.org<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
<li><p>关闭防火墙</p>
<pre class="line-numbers language-none"><code class="language-none">systemctl stop firewalld.service<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
<li><p>编辑host 以对应ping 如：</p>
<pre class="line-numbers language-none"><code class="language-none">10.42.0.93 master
10.42.0.94 slave01
10.42.0.95 slave02<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li>
<li><p>测试ping是否成功</p>
<pre class="line-numbers language-none"><code class="language-none">ping master -c 3<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
</ol>
<h2 id="二、联机"><a href="#二、联机" class="headerlink" title="二、联机"></a>二、联机</h2><ol>
<li><p>生成公钥</p>
<pre class="line-numbers language-none"><code class="language-none">ssh-keygen -t rsa<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
<li><p>公钥备份文件</p>
<pre class="line-numbers language-none"><code class="language-none">cat ~&#x2F;.ssh&#x2F;id_rsa.pub &gt;&gt; ~&#x2F;.ssh&#x2F;authorized_keys<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
<li><p>修改文件权限</p>
<pre class="line-numbers language-none"><code class="language-none">chmod 600 ~&#x2F;.ssh&#x2F;authorized_keys<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
<li><p>将专用密钥添加到 ssh-agent 的高速缓存中</p>
<pre class="line-numbers language-none"><code class="language-none">ssh-add ~&#x2F;.ssh&#x2F;id_rsa<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
<li><p>公钥转移到其他机器</p>
<pre class="line-numbers language-none"><code class="language-none">scp ~&#x2F;.ssh&#x2F;authorized_keys zkpk@slave01:~&#x2F;.ssh&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
<li><p>其他机器也生成密钥</p>
</li>
<li><p>测试远程   ssh s1</p>
</li>
</ol>
<h2 id="三、安装java"><a href="#三、安装java" class="headerlink" title="三、安装java"></a>三、安装java</h2><ol>
<li><p>root下解压</p>
<pre class="line-numbers language-none"><code class="language-none">tar -xzvf &#x2F;home&#x2F;zkpk&#x2F;tgz&#x2F;jdk-8u131-linux-x64.tar.gz -C &#x2F;usr&#x2F;java<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
<li><p>修改环境变量</p>
<pre class="line-numbers language-none"><code class="language-none">gedit &#x2F;home&#x2F;zkpk&#x2F;.bash_profile
	export JAVA_HOME&#x3D;&#x2F;usr&#x2F;java&#x2F;jdk1.8.0_131&#x2F;
	export PATH&#x3D;$JAVA_HOME&#x2F;bin:$PATH
source &#x2F;home&#x2F;zkpk&#x2F;.bash_profile<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li>
<li><p>其他机器同样安装</p>
</li>
<li><p>测试java：java -version</p>
</li>
</ol>
<h2 id="四、安装hadoop"><a href="#四、安装hadoop" class="headerlink" title="四、安装hadoop"></a>四、安装hadoop</h2><ol>
<li><p>解压</p>
<pre class="line-numbers language-none"><code class="language-none">tar -xzvf &#x2F;home&#x2F;zkpk&#x2F;tgz&#x2F;hadoop-2.7.3.tar.gz –C &#x2F;home&#x2F;zkpk<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
<li><p>修改java环境变量</p>
<pre class="line-numbers language-none"><code class="language-none">gedit &#x2F;home&#x2F;zkpk&#x2F;hadoop-2.7.3&#x2F;etc&#x2F;hadoop&#x2F;hadoop-env.sh
 	export JAVA_HOME&#x3D;&#x2F;usr&#x2F;java&#x2F;jdk1.8.0_131&#x2F;
gedit ~&#x2F;hadoop-2.7.3&#x2F;etc&#x2F;hadoop&#x2F;yarn-env.sh
	export JAVA_HOME&#x3D;&#x2F;usr&#x2F;java&#x2F;jdk1.8.0_131&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li>
<li><p>其他配置</p>
<pre class="line-numbers language-none"><code class="language-none">1.配置core-site.xml 文件
gedit  ~&#x2F;hadoop-2.7.3&#x2F;etc&#x2F;hadoop&#x2F;core-site.xml
	&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;
    &lt;?xml-stylesheet type&#x3D;&quot;text&#x2F;xsl&quot; href&#x3D;&quot;configuration.xsl&quot;?&gt;
    &lt;!-- Put site-specific property overrides in this file. --&gt;
    &lt;configuration&gt;
            &lt;property&gt;
                    &lt;name&gt;fs.defaultFS&lt;&#x2F;name&gt;
                    &lt;value&gt;hdfs:&#x2F;&#x2F;master:9000&lt;&#x2F;value&gt;
            &lt;&#x2F;property&gt;
            &lt;property&gt;
                    &lt;name&gt;hadoop.tmp.dir&lt;&#x2F;name&gt;
                    &lt;value&gt;&#x2F;home&#x2F;zkpk&#x2F;hadoopdata&lt;&#x2F;value&gt;
            &lt;&#x2F;property&gt;
    &lt;&#x2F;configuration&gt;
2.配置hdfs-site.xml文件
gedit  ~&#x2F;hadoop-2.7.3&#x2F;etc&#x2F;hadoop&#x2F;hdfs-site.xml
    &lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;
    &lt;?xml-stylesheet type&#x3D;&quot;text&#x2F;xsl&quot; href&#x3D;&quot;configuration.xsl&quot;?&gt;
    &lt;!-- Put site-specific property overrides in this file. --&gt;
    &lt;configuration&gt;
        &lt;property&gt;
            &lt;name&gt;dfs.replication&lt;&#x2F;name&gt;
            &lt;value&gt;2&lt;&#x2F;value&gt;
        &lt;&#x2F;property&gt;
    &lt;&#x2F;configuration&gt;
3.配置yarn-site.xml文件
gedit  ~&#x2F;hadoop-2.7.3&#x2F;etc&#x2F;hadoop&#x2F;yarn-site.xml
    &lt;?xml version&#x3D;&quot;1.0&quot;?&gt;
    &lt;configuration&gt;
        &lt;property&gt;
            &lt;name&gt;yarn.nodemanager.aux-services&lt;&#x2F;name&gt;
            &lt;value&gt;mapreduce_shuffle&lt;&#x2F;value&gt;
        &lt;&#x2F;property&gt;
        &lt;property&gt;
            &lt;name&gt;yarn.resourcemanager.address&lt;&#x2F;name&gt;
            &lt;value&gt;master:18040&lt;&#x2F;value&gt;
        &lt;&#x2F;property&gt;
        &lt;property&gt;
            &lt;name&gt;yarn.resourcemanager.scheduler.address&lt;&#x2F;name&gt;
            &lt;value&gt;master:18030&lt;&#x2F;value&gt;
        &lt;&#x2F;property&gt;
        &lt;property&gt;
            &lt;name&gt;yarn.resourcemanager.resource-tracker.address&lt;&#x2F;name&gt;
            &lt;value&gt;master:18025&lt;&#x2F;value&gt;
        &lt;&#x2F;property&gt;
        &lt;property&gt;
            &lt;name&gt;yarn.resourcemanager.admin.address&lt;&#x2F;name&gt;
            &lt;value&gt;master:18141&lt;&#x2F;value&gt;
        &lt;&#x2F;property&gt;
        &lt;property&gt;
            &lt;name&gt;yarn.resourcemanager.webapp.address&lt;&#x2F;name&gt;
            &lt;value&gt;master:18088&lt;&#x2F;value&gt;
        &lt;&#x2F;property&gt;
    &lt;&#x2F;configuration&gt;
4.配置mapred-site.xml文件
cp ~&#x2F;hadoop-2.7.3&#x2F;etc&#x2F;hadoop&#x2F;mapred-site.xml.template  ~&#x2F;hadoop-2.7.3&#x2F;etc&#x2F;hadoop&#x2F;mapred-site.xml
gedit ~&#x2F;hadoop-2.7.3&#x2F;etc&#x2F;hadoop&#x2F;mapred-site.xml
    &lt;?xml version&#x3D;&quot;1.0&quot;?&gt;
    &lt;?xml-stylesheet type&#x3D;&quot;text&#x2F;xsl&quot; href&#x3D;&quot;configuration.xsl&quot;?&gt;
    &lt;configuration&gt;
        &lt;property&gt;
            &lt;name&gt;mapreduce.framework.name&lt;&#x2F;name&gt;
            &lt;value&gt;yarn&lt;&#x2F;value&gt;
        &lt;&#x2F;property&gt;
    &lt;&#x2F;configuration&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li><p>配置slaves文件</p>
<pre class="line-numbers language-none"><code class="language-none">gedit ~&#x2F;hadoop-2.7.3&#x2F;etc&#x2F;hadoop&#x2F;slaves
    slave01
    slave02<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li>
<li><p>创建Hadoop数据目录</p>
<pre class="line-numbers language-none"><code class="language-none">mkdir hadoopdata<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
<li><p>将配置好的hadoop文件夹复制到从节点</p>
<pre class="line-numbers language-none"><code class="language-none">scp -r hadoop-2.7.3 zkpk@slave01:~&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
<li><p>配置环境变量</p>
<pre class="line-numbers language-none"><code class="language-none">gedit ~&#x2F;.bash_profile
    #HADOOP
    export HADOOP_HOME&#x3D;&#x2F;home&#x2F;zkpk&#x2F;hadoop-2.7.3
    export PATH&#x3D;$HADOOP_HOME&#x2F;bin:$HADOOP_HOME&#x2F;sbin:$PATH
source ~&#x2F;.bash_profile<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li><p>其他机器同样配置环境变量</p>
</li>
<li><p>在master格式化磁盘</p>
<pre class="line-numbers language-none"><code class="language-none">hdfs namenode -format<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
</ol>
<h2 id="五、启动检测"><a href="#五、启动检测" class="headerlink" title="五、启动检测"></a>五、启动检测</h2><ol>
<li>start-all.sh</li>
<li>jps查看</li>
<li><a href="http://master:50070/%E6%9F%A5%E7%9C%8B">http://master:50070/查看</a></li>
<li><img src="https://job-wyg.oss-cn-beijing.aliyuncs.com/image-20210911183155100.png" alt="image-20210911183155100"></li>
</ol>
]]></content>
      <categories>
        <category>大数据开发</category>
        <category>hadoop</category>
      </categories>
  </entry>
  <entry>
    <title>java2</title>
    <url>/2021/10/06/java/java2/</url>
    <content><![CDATA[<h3 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h3><ol>
<li>接口基础<ol>
<li>接口继承接口，方法重复只需要重写一个就ok</li>
<li>接口可以有default方法</li>
<li>接口可以有static方法</li>
</ol>
</li>
</ol>
<!-- more --

2. 接口继承
   1. 两个接口Animal<--Cat
   2. 可以Cat ani= new Animal
   3. 但是如果调用Cat的新增放回就会报错。



### static

1. 类的所有方法都能访问static方法

2. 类的所有方法都能访问static变量

3. static方法不能访问非static方法

4. static方法不能访问非static变量

   <pre class="line-numbers language-none"><code class="language-none">这就好像static的东西都无私奉献出来了，但他却置身事外，不过问q<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h3><ol>
<li></li>
</ol>
]]></content>
      <categories>
        <category>java</category>
      </categories>
  </entry>
  <entry>
    <title>java8新特性</title>
    <url>/2021/10/06/java/java8%E6%96%B0%E7%89%B9%E6%80%A7/</url>
    <content><![CDATA[<h1 id="java8新特性"><a href="#java8新特性" class="headerlink" title="java8新特性"></a>java8新特性</h1><h3 id="一、lambda-参数式函数-代码更少"><a href="#一、lambda-参数式函数-代码更少" class="headerlink" title="一、lambda(参数式函数) 代码更少"></a>一、lambda(参数式函数) 代码更少</h3><p>fun1(fun2())</p>
<ol>
<li><p>参数式函数，参数式lambda。</p>
</li>
<li><p>java中 lambda是实现了函数的对象，而不像其他语言一样是一个函数。一般用于接口，这个接口只有一个函数需要重写。这个接口的实例就是lambda。</p>
</li>
<li><p>但是用到的lambda还是写的那个重写的函数，也就是说我们需要某个功能的时候，我们可以根据四大函数式接口写出自己的函数，将这个接口传入，就完成了一个功能器。</p>
<span id="more"></span></li>
<li><p>为了完成多功能，所以lambda对象应该是以参数的身份传入到指定函数，以为创建Lambda很简单，代码很少，这样在不改变原函数的情况下就能根据传入的lambda不同而拥有不同的功能，目的就是多态。</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"> <span class="token keyword">public</span> <span class="token class-name">List</span> <span class="token function">filter</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>nums<span class="token punctuation">,</span><span class="token class-name">Predicate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span>predicate<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
<span class="token function">filter</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span>o<span class="token operator">-></span>o<span class="token operator">></span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">filter</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span>o<span class="token operator">-></span><span class="token number">2</span><span class="token operator">*</span>o<span class="token operator">></span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">filter</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span>o<span class="token operator">-></span>o<span class="token operator">*</span>o<span class="token operator">></span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">filter</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span>o<span class="token operator">-></span><span class="token number">1</span><span class="token operator">></span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li><p>创建比较器</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//lambda</span>
        <span class="token class-name">Comparator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span>comparator2<span class="token operator">=</span><span class="token punctuation">(</span>o1<span class="token punctuation">,</span>o2<span class="token punctuation">)</span><span class="token operator">-></span>o1<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>o2<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//方法引用  lambda 传fun</span>
        <span class="token class-name">Comparator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span>comparator3<span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token operator">::</span><span class="token function">compareTo</span><span class="token punctuation">;</span>
<span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span>comparator3<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li><p>创建进程</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Runnable</span> runnable2<span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"rrrr2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
<li><p>lambda优化</p>
<ol>
<li><p>去掉形参类型(类型推断)</p>
<ol>
<li><p>直接传入o1,而不用在前面加integer</p>
</li>
<li><p>int[]nums=new int[]{1,2,3}–&gt;</p>
<p>int[]nums={1,2,3}</p>
</li>
</ol>
</li>
<li><p>去掉return和{} 只有一句的情况</p>
</li>
<li><p>只有一个参数，可以去掉小括号</p>
</li>
</ol>
</li>
<li><p>格式</p>
<ol>
<li>一个参数没返回:obj=x-&gt;fun(x)</li>
<li>无参无返回: obj=()-&gt;fun()</li>
<li>两个参数: obj=(x,y)-&gt;fun(x,y)</li>
<li>有返回: obj=(x,y)-&gt;{fun(x,y) return}</li>
</ol>
</li>
</ol>
<h3 id="二、函数式接口"><a href="#二、函数式接口" class="headerlink" title="二、函数式接口"></a>二、函数式接口</h3><ol>
<li><p>@FuntionalInterface</p>
</li>
<li><p>面向函数范式编程(FOP)(SQL)</p>
</li>
<li><p>面向接口编程</p>
</li>
<li><p><strong>面向过程编程（<code>Procedure Oriented</code>、简称<code>PO</code>）</strong> 和 <strong>面向对象编程（<code>Object Oriented</code>、简称<code>OO</code>）</strong> 我们一定听过，然而实际企业级开发里受用更多的一种编程思想那就是：<strong>面向接口编程（<code>Interface-Oriented</code>）</strong>！</p>
</li>
<li><p>四大函数式接口</p>
<ol>
<li><p>Consumer<T> </p>
<p>​    消费型：有参无返回 </p>
<p>​    void accept(T t)</p>
</li>
<li><p>Suppiier<T></p>
<p>​    供给型：无参有返回</p>
<p>​    T get()</p>
</li>
<li><p>Functional&lt;T,R&gt;</p>
<p>​    函数型：处理参数</p>
<p>​    R apply(T t)</p>
</li>
<li><p>Prediate<T></p>
<p>​    断定型：有参判定返回bool</p>
<p>​    boolean test(T t)</p>
</li>
</ol>
</li>
</ol>
<h3 id="三、方法引用-构造器引用"><a href="#三、方法引用-构造器引用" class="headerlink" title="三、方法引用 构造器引用"></a>三、方法引用 构造器引用</h3><ol>
<li><p>当要传递给lambda操作，已经有实现方法，就可以使用方法引用。</p>
</li>
<li><p>基于lambda</p>
</li>
<li><p>关键：传入的方法的返回类型和参数相同</p>
</li>
<li><p>就好像现在不用自己写函数传入Lambda体了，而是有现成的函数，那么直接传入</p>
<p>类::方法名就ok了。</p>
</li>
<li><p>三种情况+一种构造器</p>
<ol>
<li>类::非静态方法</li>
<li>对象::静态方法</li>
<li>类::非静态方法</li>
<li>构造器引用<ol>
<li>类::new</li>
</ol>
</li>
</ol>
</li>
<li><p>要求：两个函数除了名字不一样，其他都一样</p>
</li>
<li><p>细节</p>
<ol>
<li>不用写入形参，因为类型与参数推断，且要求两函数是一样的，所以没必要写形参。</li>
</ol>
</li>
</ol>
<h3 id="四、stream-api-并行计算"><a href="#四、stream-api-并行计算" class="headerlink" title="四、stream api 并行计算"></a>四、stream api 并行计算</h3><ol>
<li><p>stream:运算 cpu打交道</p>
<p>Collection:集合  内存打交道</p>
</li>
<li><p>类似于SQL语句</p>
</li>
<li><p>作用：</p>
<ol>
<li>查询数据不能用sql的情况,如nosql需要把查询到的数据在java里面进行处理</li>
</ol>
</li>
<li><p>特点：</p>
<ol>
<li>自己不储存(视图)</li>
<li>不会改变原对象，也就是inplace=False</li>
<li>操作延迟，直到终止操作才会执行</li>
</ol>
</li>
<li><p>步骤</p>
<ol>
<li><p>创建</p>
<ol>
<li><p>可迭代对象(即实现迭代接口).stream()</p>
</li>
<li><p>并行：parallelstream()</p>
</li>
<li><p>Arrays.stream(T[]arr)</p>
</li>
<li><p>Stream.of(T..)</p>
</li>
<li><p>生成器</p>
<ol>
<li><p>```java<br>public static<T> iterate(T t,计算器)<br>//例如 生成偶数流<br>Stream.iterate(0,t-&gt;t+2)</p>
<pre class="line-numbers language-none"><code class="language-none">
   

2. &#96;&#96;&#96;
   &#x2F;&#x2F;生成随机数流
   Stream.generate(Math::random)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li></li>
</ol>
</li>
</ol>
</li>
<li><p>中间操作{数据处理：}</p>
<ol>
<li><p>筛选与切片</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//筛选</span>
stream<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>a<span class="token operator">-></span>a<span class="token operator">></span><span class="token number">2</span><span class="token punctuation">)</span>
<span class="token comment">//跳过 跳过前三个</span>
stream<span class="token punctuation">.</span><span class="token function">skip</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>
<span class="token comment">//截断 前三个</span>
stream<span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>
<span class="token comment">//去重</span>
stream<span class="token punctuation">.</span><span class="token function">distinct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li><p>映射map  (数据转换)</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//转换成大写</span>
stream<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>s<span class="token operator">></span>s<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment">//选出名字长度大于三的数据</span>
stream<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">User</span><span class="token operator">::</span><span class="token function">getname</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>name<span class="token operator">-></span>name<span class="token punctuation">.</span>leangth<span class="token operator">></span><span class="token number">3</span><span class="token punctuation">)</span>
<span class="token comment">//摊平</span>
stream<span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span>mapToStream<span class="token punctuation">)</span>
<span class="token comment">//其中mapToStream能够把stream里面的单个对象转换成stream的函数</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li><p>排序</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java">stream<span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span><span class="token punctuation">(</span>o1<span class="token punctuation">,</span>o2<span class="token punctuation">)</span><span class="token operator">-></span>o1<span class="token punctuation">.</span>value<span class="token operator">-</span>o2<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
</ol>
</li>
<li><p>终止操作</p>
<ol>
<li><p>匹配查找</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//所有匹配->bool</span>
stream<span class="token punctuation">.</span><span class="token function">addMatch</span><span class="token punctuation">(</span>o<span class="token operator">-></span>o<span class="token punctuation">.</span>age<span class="token operator">></span><span class="token number">18</span><span class="token punctuation">)</span>    
<span class="token comment">//任意匹配->bool</span>
stream<span class="token punctuation">.</span><span class="token function">anyMatch</span><span class="token punctuation">(</span>o<span class="token operator">-></span>o<span class="token punctuation">.</span>age<span class="token operator">></span><span class="token number">18</span><span class="token punctuation">)</span>
<span class="token comment">//第一个元素->Optional&lt;T></span>
stream<span class="token punctuation">.</span><span class="token function">fidFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li><p>其他</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//数量->long</span>
stream<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment">//最大值->Optional&lt;T></span>
stream<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token punctuation">(</span>o1<span class="token punctuation">,</span>o2<span class="token punctuation">)</span><span class="token operator">-></span>o1<span class="token punctuation">.</span>value<span class="token operator">-</span>o2<span class="token punctuation">.</span>value<span class="token punctuation">)</span>
<span class="token comment">//内部迭代</span>
stream<span class="token punctuation">.</span><span class="token function">foreach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">:</span>println<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li><p>规约 reduce</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//</span>
stream<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token punctuation">(</span>o1<span class="token punctuation">,</span>o2<span class="token punctuation">)</span><span class="token operator">-></span>o1<span class="token operator">+</span>o2<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li>
<li><p>收集collect(Collector c)</p>
<pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;list
stream.collect(Collectors.toList())
&#x2F;&#x2F;set
stream.collect(Collectors.toSet())
&#x2F;&#x2F;不确定性collection
stream.collect(Collectors.toCollection())<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ol>
</li>
</ol>
</li>
</ol>
<h3 id="optional类-最大减少空指针异常"><a href="#optional类-最大减少空指针异常" class="headerlink" title="optional类 最大减少空指针异常"></a>optional类 最大减少空指针异常</h3><ol>
<li><p>of</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//of 不能空    Optional&lt;Student>optionalStudent=Optional.of(student);//of必须非空</span>
<span class="token comment">//ofNullable 可空，为empty    Optional&lt;Student>optionalStudent2=Optional.ofNullable(student);</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li>
<li><p>orElse</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java">value <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">?</span> value <span class="token operator">:</span> other<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
<li></li>
</ol>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><ol>
<li><p>接口默认方法</p>
</li>
<li><p>DateTime api</p>
</li>
<li><p>nashorn javascript引擎</p>
</li>
</ol>
]]></content>
      <categories>
        <category>java</category>
        <category>java高阶</category>
      </categories>
  </entry>
  <entry>
    <title>java常用工具类源码</title>
    <url>/2021/10/06/java/java%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB/</url>
    <content><![CDATA[<h3 id="比较器Comparator"><a href="#比较器Comparator" class="headerlink" title="比较器Comparator"></a>比较器Comparator</h3><ol>
<li><p>Arrays.sort(users,new Comparator)</p>
<p>-&gt;TimSort.sort(user,0,length,comparator)</p>
<p>-&gt;if(len&lt;32)</p>
<p>​    –&gt;i++找到合适开始index</p>
<p>​    –&gt;2进制插入排序binarySort(a,index,length,c)</p>
<p>​    –&gt;这是对少量元素进行排序的最佳方法，它需</p>
</li>
</ol>
<span id="more"></span>

<ol start="2">
<li><p>要O（n logn）比较，但需要O（n^2）数据移动（最坏情况</p>
<p>-&gt;else -&gt;Timsort</p>
</li>
<li><p>Arrays.sort(int[])–&gt;优化的快排</p>
</li>
</ol>
<h3 id="org-apache-logging-log4j-util-Strings-final"><a href="#org-apache-logging-log4j-util-Strings-final" class="headerlink" title="org.apache.logging.log4j.util.Strings(final)"></a>org.apache.logging.log4j.util.Strings(final)</h3><ol>
<li><p>isEmpty</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">return</span> cs <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> cs<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
<li><p>isBlank 是否是空白</p>
</li>
</ol>
<h3 id="java-lang"><a href="#java-lang" class="headerlink" title="java.lang"></a>java.lang</h3><ol>
<li><p>final class</p>
<ol>
<li><p>String</p>
<ol>
<li><p>charAt,indexOf,compareTo,concat(str),contain,equals,endsWith,ifEmpty</p>
<p>replace,split</p>
</li>
<li><p>copyValueOf(),valueOf(char[],begin,length),valueOf(基本类型)</p>
</li>
<li><p>subString(begin,end),toLowerCase,trim</p>
</li>
</ol>
</li>
<li><p>Character</p>
<ol>
<li>equals,isLetter是否是一个字母,isLowLetter是否小写字母，toLowCase,compareTo</li>
<li>digit</li>
</ol>
</li>
<li><p>Object</p>
<ol>
<li><p>final native getClass 获得运行时Class而非String/类 com.wyg.entity.user,也可能是他的子类。</p>
</li>
<li><p>native clone</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java">x<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">!=</span>x
x<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span>x
x<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equal</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li>
<li><p>native hashcode</p>
</li>
<li><p>可重写：toString,equals</p>
</li>
</ol>
</li>
<li><p>System</p>
<ol>
<li><p>获取系统信息，修改系统信息，标准输入输出流，加载文件、库。</p>
</li>
<li><p>native void arraycopy(src[],begin1,dest[],begin2,length)</p>
</li>
<li><p>exit退出</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">exit</span><span class="token punctuation">(</span><span class="token keyword">int</span> status<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token class-name">Runtime</span><span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span>status<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li>
<li><p>getProperties获取当前系统信息</p>
<pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token attr-name">os.version</span><span class="token punctuation">=</span><span class="token attr-value">10.0, </span>
<span class="token attr-name">os.arch</span><span class="token punctuation">=</span><span class="token attr-value">amd64,</span>
<span class="token attr-name">os.name</span><span class="token punctuation">=</span><span class="token attr-value">Windows 10, sun.jnu.encoding=GBK, </span>
<span class="token attr-name">file.encoding</span><span class="token punctuation">=</span><span class="token attr-value">UTF-8, </span>
<span class="token attr-name">user.language</span><span class="token punctuation">=</span><span class="token attr-value">zh,</span>
<span class="token attr-name">user.dir</span><span class="token punctuation">=</span><span class="token attr-value">D:\java\新特性, </span>
<span class="token attr-name">user.country</span><span class="token punctuation">=</span><span class="token attr-value">CN,</span>
<span class="token attr-name">user.name</span><span class="token punctuation">=</span><span class="token attr-value">22453, </span>
<span class="token attr-name">user.home</span><span class="token punctuation">=</span><span class="token attr-value">C:\Users\22453, </span>
<span class="token attr-name">user.timezone</span><span class="token punctuation">=</span><span class="token attr-value">Asia/Shanghai, </span>
<span class="token attr-name">java.runtime.name</span><span class="token punctuation">=</span><span class="token attr-value">OpenJDK Runtime Environment, </span>
<span class="token attr-name">java.vm.name</span><span class="token punctuation">=</span><span class="token attr-value">OpenJDK 64-Bit Server VM, </span>
<span class="token attr-name">java.vm.specification.name</span><span class="token punctuation">=</span><span class="token attr-value">Java Virtual Machine Specification,</span>
<span class="token attr-name">java.runtime.version</span><span class="token punctuation">=</span><span class="token attr-value">1.8.0_302-b08, java.awt.graphicsenv=sun.awt.Win32GraphicsEnvironment, java.endorsed.dirs=D:\java\jdk8u302-b08\jre\lib\endorsed,</span>
<span class="token attr-name">java.io.tmpdir</span><span class="token punctuation">=</span><span class="token attr-value">C:\Users\22453\AppData\Local\Temp\,</span>
<span class="token attr-name">java.library.path</span><span class="token punctuation">=</span><span class="token attr-value">cmd.path</span>
<span class="token attr-name">java.specification.name</span><span class="token punctuation">=</span><span class="token attr-value">Java Platform API Specification, </span>
<span class="token attr-name">java.class.version</span><span class="token punctuation">=</span><span class="token attr-value">52.0,</span>
<span class="token attr-name">java.vm.specification.version</span><span class="token punctuation">=</span><span class="token attr-value">1.8, </span>
<span class="token attr-name">java.home</span><span class="token punctuation">=</span><span class="token attr-value">D:\java\jdk8u302-b08\jre,</span>
<span class="token attr-name">java.version</span><span class="token punctuation">=</span><span class="token attr-value">1.8.0_302, </span>
<span class="token attr-name">java.vendor</span><span class="token punctuation">=</span><span class="token attr-value">Temurin,</span>
<span class="token attr-name">sun.cpu.endian</span><span class="token punctuation">=</span><span class="token attr-value">little, </span>
<span class="token attr-name">sun.java.launcher</span><span class="token punctuation">=</span><span class="token attr-value">SUN_STANDARD, </span>
<span class="token attr-name">sun.desktop</span><span class="token punctuation">=</span><span class="token attr-value">windows,</span>
<span class="token attr-name">sun.boot.library.path</span><span class="token punctuation">=</span><span class="token attr-value">D:\java\jdk8u302-b08\jre\bin, </span>
<span class="token attr-name">sun.cpu.isalist</span><span class="token punctuation">=</span><span class="token attr-value">amd64&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ol>
</li>
<li><p>Math</p>
</li>
<li></li>
</ol>
</li>
<li><p>class</p>
<ol>
<li>interface Runable</li>
<li>Thread implements Runnable<ol>
<li>static sleep 当前线程休息</li>
<li>start,调用run</li>
<li>getId,getName</li>
<li>static currentThread,返回当前线程</li>
<li></li>
</ol>
</li>
<li>class Package implements java.lang.reflect.AnnotatedElemen–单例</li>
</ol>
</li>
<li><p>特殊类：</p>
<ol>
<li><p>异常类class Throwable implements Serializable</p>
<ol>
<li>getMassage</li>
<li>printStackTrace</li>
</ol>
</li>
<li><p>final Void</p>
<ol>
<li><p>结合native方法构成关键字</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">static</span> <span class="token keyword">native</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> <span class="token function">getPrimitiveClass</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
</ol>
</li>
<li><p>final Class&lt;T&gt;</p>
<ol>
<li><p>结合native方法构成关键字</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">static</span> <span class="token keyword">native</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> <span class="token function">getPrimitiveClass</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
<li><p>T newInstance 创造实例</p>
</li>
<li></li>
</ol>
</li>
</ol>
</li>
</ol>
<h3 id="sun-reflect"><a href="#sun-reflect" class="headerlink" title="sun.reflect"></a>sun.reflect</h3>]]></content>
      <categories>
        <category>java</category>
      </categories>
  </entry>
  <entry>
    <title>java知识</title>
    <url>/2021/10/06/java/java%E7%9F%A5%E8%AF%86/</url>
    <content><![CDATA[<h2 id="类"><a href="#类" class="headerlink" title="类"></a>类</h2><h4 id="私有构造"><a href="#私有构造" class="headerlink" title="私有构造"></a>私有构造</h4><ol>
<li><p>特点：不能实例化，不能被继承，常用于被实例化一次的类(单例模式)</p>
</li>
<li><p>两种方式拿到单例</p>
<ol>
<li><p>puvlic static成员变量</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Elvis</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Elvis</span> INSTANCE <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Elvis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">Elvis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li>
<li><p>private static成员变量，使用static方法返回</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Elvis</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Elvis</span> INSTANCE <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Elvis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">Elvis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Elvis</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> INSTANCE<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li><p>作用：防止实例化和子类化，常用在util类,常量类，我们一般用这些类static方法而非他的实例，</p>
</li>
</ol>
</li>
</ol>
<h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><ol>
<li><p>强制转换本着宁多勿少的原则，java.lang.ClassCastException运行时异常</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Users</span> obj<span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Users</span><span class="token punctuation">)</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
</ol>
<span id="more"></span>



<h3 id="java四大域对象"><a href="#java四大域对象" class="headerlink" title="java四大域对象"></a><a href="https://blog.csdn.net/u014253011/article/details/85718649">java四大域对象</a></h3><ol>
<li><p>request HttpServletContext </p>
<ol>
<li><p>生命周期：</p>
<p>在Service方法调用前由服务器创建，传入service方法。整个请求结束，request生命结束。<br>用户发送一个请求，开始，服务器返回响应，请求结束，生命周期结束；</p>
</li>
<li><p>作用范围：整个请求链（请求转发也存在）/一次请求转发的范围</p>
</li>
<li><p>作用：获取请求数据，共享数据，请求转发。</p>
</li>
</ol>
</li>
<li><p>session HttpSession</p>
<ol>
<li><p>生命周期</p>
<p>在第一次调用request.getSession()方法时，服务器会检查是否已经有对应的session，如果没有就在内存中创建一个session并返回。<br>（1）当一段时间内session没有被使用（默认为30分钟），则服务器会销毁该session。<br>（2）如果服务器非正常关闭，没有到期的session也会跟着销毁。<br>（3）如果调用session提供的invalidate()，可以立即销毁session。</p>
</li>
<li></li>
</ol>
</li>
<li><p>application ServletContext</p>
<ol>
<li>生命周期：整个web服务</li>
<li>作用范围：整个web应用</li>
<li>作用：<ol>
<li>读取配置文件</li>
<li>在不同Servlet 之间转发</li>
</ol>
</li>
</ol>
</li>
<li><p>page(jsp)   pageContext</p>
<ol>
<li>可以作为入口对象获取其他三大域对象的引用，获取其所有域中的数据</li>
<li>作用于整个JSP页面，是四大作用域中最小的一个</li>
</ol>
</li>
<li><p>特点</p>
<ol>
<li>之所以他们是域对象，原因是他们都内置了map集合，都有setAttribute和getAttribute方法。</li>
<li>都有生命周期，servlet{init,service,destory}也有生命周期。</li>
</ol>
</li>
<li><p>如果一个数据只在当前jsp页面使用，可以使用pageContext域</p>
<p>如果一个数据，除了在当前Servlet中使用，还要在请求转发中使用，使用request域</p>
<p>如果一个数据，除了现在我自己要用，过一会我自己还要用，存在session域</p>
<p>如果一个数据，除了我自己用其他人也要用，存在ServleContext域中</p>
</li>
<li><p>域对象：能够在自己的作用范围共享数据。</p>
</li>
</ol>
<h3 id="java9大隐式对象"><a href="#java9大隐式对象" class="headerlink" title="java9大隐式对象"></a>java9大隐式对象</h3><ol>
<li><p>Session: 主要用于来分别保存每个用户信息，与请求关联的对话;</p>
</li>
<li><p>Request: 代表请求对象，主要用于接受客户端通过HTTP协议连接传输到服务器端的数据;</p>
</li>
<li><p>Response: 代表响应对象，主要用于向客户端发送数据;</p>
</li>
<li><p>out: 主要用于向客户端输出数据；</p>
</li>
<li><p>application: 主要用于保存用户信息，代码片段的运行环境;</p>
</li>
<li><p>pageContext: 管理网页属性;</p>
<ol>
<li>可以作为入口对象获取其他八大隐式对象的引用</li>
</ol>
</li>
<li><p>config: 代码片段配置对象，表示Servlet的配置;</p>
</li>
<li><p>page:处理jsp网页;</p>
</li>
<li><p>Exception:处理jsp文件执行时发生的错误和异常</p>
</li>
</ol>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><h4 id="native关键字"><a href="#native关键字" class="headerlink" title="native关键字"></a>native关键字</h4><ol>
<li><a href="https://www.cnblogs.com/szlbm/p/5504603.html**">手写一个native</a></li>
<li>native方法主要用于加载文件和动态链接库，由于Java语言无法访问操作系统底层信息（比如：底层硬件设备等），这时候就需要借助C语言来完成了。被native修饰的方法可以被C语言重写。</li>
<li>被native关键字修饰的方法叫做本地方法，本地方法和其它方法不一样，本地方法意味着和平台有关</li>
<li>Java程序中声明native修饰的方法，类似于abstract修饰的方法，只有方法签名，没有方法实现。编译该java文件，会产生一个.class文件。</li>
</ol>
]]></content>
      <categories>
        <category>java</category>
      </categories>
  </entry>
  <entry>
    <title>jvm</title>
    <url>/2021/10/06/java/jvm/</url>
    <content><![CDATA[<h3 id=""><a href="#" class="headerlink" title=""></a></h3><ol>
<li>OOM，栈溢出</li>
<li>jvm常用调优</li>
<li>内存快照</li>
<li>怎么分析dump文件</li>
<li>类加载器</li>
<li>jar包</li>
<li></li>
</ol>
<span id="more"></span>

<h3 id="-1"><a href="#-1" class="headerlink" title=""></a></h3><ol>
<li>对jvm理解<ol>
<li>javac a.java –&gt;java.class–&gt;类加载器—-&gt;运行区–<ol>
<li>方法区 垃圾回收</li>
<li>java栈</li>
<li>本地方法栈&lt;—本地方法接口&lt;–本地方法库</li>
<li>native method</li>
<li>堆heap 垃圾回收</li>
<li>程序技术器pc</li>
<li></li>
</ol>
</li>
<li>jvm位置<ol>
<li>硬件体系(intel)–&gt;操作系统(win)–&gt;jre（jvm）–&gt;java</li>
</ol>
</li>
<li>jvm结构</li>
</ol>
</li>
<li>类加载器<ol>
<li>class是模板，抽象的，object是实体，具象的</li>
<li>作用:加载class文件</li>
<li>a.class–&gt;jvm–&gt;new-&gt;实例</li>
</ol>
</li>
<li>双亲委派模式</li>
<li>沙箱安全模式</li>
<li>native</li>
<li>方法去</li>
<li>pc寄存器</li>
<li>栈</li>
<li>方法区</li>
<li>三种jvm</li>
<li>堆</li>
<li>新生区，老年区，用就去</li>
<li>GC算法</li>
<li></li>
</ol>
]]></content>
      <categories>
        <category>java</category>
        <category>java高阶</category>
      </categories>
  </entry>
  <entry>
    <title>spring解析</title>
    <url>/2021/10/06/java/spring/</url>
    <content><![CDATA[<h3 id="1、-基本概念"><a href="#1、-基本概念" class="headerlink" title="1、 基本概念"></a>1、 基本概念</h3><ol>
<li></li>
</ol>
<h2 id="3、IOC-控制反转"><a href="#3、IOC-控制反转" class="headerlink" title="3、IOC(控制反转)"></a>3、IOC(控制反转)</h2><ol>
<li><p>平常</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Person</span> s<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//耦合度太高</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
<li><p>现在：引入Ioc，将创建对象的控制权交给spring的ioc，如果需要使用，就用DI(依赖注入)@Autowired.</p>
</li>
</ol>
<span id="more"></span>

<ol>
<li><p>优点：集中管理对象，方便维护，降低了耦合度。</p>
</li>
<li><p>IOC和DI区别</p>
<ol>
<li>ioc控制了对象创建的权力。</li>
<li>di是ioc的实现的一步骤。</li>
</ol>
</li>
<li><p>配置bean的方法，bean是ioc创建的对象</p>
<ol>
<li>xml.&lt;bean class:path&gt;</li>
<li>注解@Component(@Controller,@Service,@Repostory)</li>
<li>javaConfig:@Configtursion+@Bean，这像是自己实现的ioc，更灵活。</li>
<li>@import</li>
</ol>
</li>
<li><p>ioc实现机制</p>
<ol>
<li>简单工厂+反射</li>
<li>code:beanfactory.getBean+(强制类型转换+Class.forName) </li>
<li>xml配置：&lt;bean class:path&gt;</li>
</ol>
</li>
<li><p>ioc实现原理DI技术–&gt;map.put(name,new)</p>
</li>
<li><p>ioc扩展点</p>
<ol>
<li>ioc</li>
</ol>
</li>
<li><p>ioc创建Bean</p>
<pre class="line-numbers language-none"><code class="language-none">&lt;bean id&#x3D;&quot;aa&quot; class&#x3D;&quot;com.example.spring_tech.entity.user&quot;&gt;
&lt;property name&#x3D;&quot;age&quot;value&#x3D;&quot;11222&quot;&gt;&lt;&#x2F;property&gt;
    &lt;&#x2F;bean&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li>
<li><p>哪些类放入ioc</p>
<ol>
<li>放入：工具类，dao,service,controller</li>
<li>不放人：实体类，servlet,listener,filter</li>
</ol>
</li>
<li><p>放入ioc方法</p>
<ol>
<li>xml &lt;bean&gt;</li>
<li>注解</li>
</ol>
</li>
<li><p>ioc的对象是创建ioc的时候一起同时创建的，不是启动时创建的，也不是使用的时候创建的。</p>
</li>
<li><p>属性</p>
<ol>
<li>set +&lt;properity name value&gt;</li>
<li>set+&lt;properity name ref&gt;</li>
<li>构造注入：&lt;constructor-arg&gt;+inde</li>
</ol>
</li>
</ol>
<h3 id="4、紧耦合-松耦合-DIP"><a href="#4、紧耦合-松耦合-DIP" class="headerlink" title="4、紧耦合 松耦合(DIP)"></a>4、紧耦合 松耦合(DIP)</h3><ol>
<li>紧耦合：类之间的高度依赖</li>
<li>松耦合：单一职责原则–&gt;接口分离原则–&gt;依赖倒置原则。</li>
</ol>
<h3 id="Bean"><a href="#Bean" class="headerlink" title="Bean"></a>Bean</h3><ol>
<li>java bean 和spring bean的区别<ol>
<li>由spring ioc实例化，管理的对象叫做bean.</li>
<li>s</li>
<li>java bean 是new出来的</li>
</ol>
</li>
</ol>
<h3 id="spring使用步骤"><a href="#spring使用步骤" class="headerlink" title="spring使用步骤"></a>spring使用步骤</h3><ol>
<li>依赖denpendcy</li>
<li>创建类，dao,service,controller</li>
<li>创建配置文件<bean></li>
<li>创建容器对象ClassPathXmlAppicationContext.getBean()</li>
</ol>
<h3 id="AOP（基于jdk动态代理）"><a href="#AOP（基于jdk动态代理）" class="headerlink" title="AOP（基于jdk动态代理）"></a>AOP（基于jdk动态代理）</h3><h4 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h4><ol>
<li><p>作用：创建对象，不改变类的情况下实现功能增强。</p>
</li>
<li><p>两种实现方式：</p>
<ol>
<li>JDK<ol>
<li>要求目标类有接口</li>
<li>若没有接口。可用CGlib，</li>
</ol>
</li>
<li>Proxy</li>
</ol>
<h4 id="AOP"><a href="#AOP" class="headerlink" title="AOP"></a>AOP</h4><p>aop就是将动态代理规范化，约定大于配置。</p>
<ol>
<li><p> 四要素</p>
</li>
<li><p>aspect:切面，增强的功能的代码。</p>
<p>三要素：</p>
<ol>
<li>功能代码函数def doLog()</li>
<li>代码位置(切入点)，一般就是业务代码函数。execution(path.def)</li>
<li>执行时间（before/after）</li>
</ol>
</li>
<li><p>joinpoint:连接点，业务代码。</p>
</li>
<li><p>pointCut切入点,连接点的结合</p>
</li>
<li><p>advice 通知，表示切面功能执行的时间</p>
</li>
<li><p>aop实现</p>
<ol>
<li>spring,事务处理常用aop（代码多，不常用）</li>
<li>aspectJ:专业aop框架。spring集成了这个框架。<ol>
<li>xml实现：用于事务</li>
<li>注解实现：常见环境下都用注解。<ol>
<li>@Before</li>
<li>@AfterReturn</li>
<li>@Around</li>
<li>@AfterThrowing</li>
<li>@After</li>
</ol>
</li>
<li>切入点表达式execution(public pString]* [com.wyg.user.]getName(..)* exception)</li>
<li>步骤:<ol>
<li>加入依赖spring,aspect</li>
<li>创建目标类(接口，实现)</li>
<li>创建切面类<ol>
<li>加如@aspect</li>
<li>定义增强功能方法，并在方法上加入注解</li>
</ol>
</li>
<li>创建spring配置文件：声明对象，交予ioc管理  加入aop标志生成代理类<a href="aop:aspectj-autoproxy/">aop:aspectj-autoproxy/</a>。</li>
<li>xml配最后的<strong>自动代理生成器</strong>标志还是牵线人进行切面类和目标类.业务函数的联系。</li>
</ol>
</li>
<li>execution简化<ol>
<li>去掉public</li>
<li>用*..</li>
<li>..代替arg</li>
<li>do*代替业务函数</li>
</ol>
</li>
</ol>
</li>
</ol>
</li>
</ol>
</li>
</ol>
<h4 id="集成mybatis"><a href="#集成mybatis" class="headerlink" title="集成mybatis"></a>集成mybatis</h4><ol>
<li><p>mybatis步骤</p>
<ol>
<li><p>创建对象dao</p>
</li>
<li><p>mapper.xml</p>
</li>
<li><p>创建代理</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//创建工厂</span>
<span class="token comment">//xml实现</span>
<span class="token class-name">String</span> resource <span class="token operator">=</span> <span class="token string">"org/mybatis/example/mybatis-config.xml"</span><span class="token punctuation">;</span>
<span class="token class-name">InputStream</span> inputStream <span class="token operator">=</span> <span class="token class-name">Resources</span><span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span>resource<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">SqlSessionFactory</span> sqlSessionFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SqlSessionFactoryBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span>inputStream<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//java实现</span>
<span class="token class-name">DataSource</span> dataSource <span class="token operator">=</span> <span class="token class-name">BlogDataSourceFactory</span><span class="token punctuation">.</span><span class="token function">getBlogDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">TransactionFactory</span> transactionFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JdbcTransactionFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Environment</span> environment <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Environment</span><span class="token punctuation">(</span><span class="token string">"development"</span><span class="token punctuation">,</span> transactionFactory<span class="token punctuation">,</span> dataSource<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Configuration</span> configuration <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Configuration</span><span class="token punctuation">(</span>environment<span class="token punctuation">)</span><span class="token punctuation">;</span>
configuration<span class="token punctuation">.</span><span class="token function">addMapper</span><span class="token punctuation">(</span><span class="token class-name">BlogMapper</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">SqlSessionFactory</span> sqlSessionFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SqlSessionFactoryBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span>configuration<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//获取sqlsession</span>
<span class="token class-name">SqlSession</span> session <span class="token operator">=</span> sqlSessionFactory<span class="token punctuation">.</span><span class="token function">openSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment">//创建mapper实例</span>
<span class="token class-name">UserMapper</span> mapper <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span><span class="token class-name">UserMapper</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li><p>mybatis步骤</p>
<ol>
<li><p>依赖mysql-connector-java mybatis</p>
</li>
<li><p>mybatis.config.xml </p>
<ol>
<li>&lt;dataSource&gt;&lt;driver,url,username,password&gt;</li>
<li>&lt;mappers&gt;&lt;mapper resource=”com.wyg.mapper.*.xml”&gt;</li>
</ol>
</li>
<li><p>mapper.xml—-&gt;&lt;select,insert&gt;</p>
</li>
<li><p>javaTest</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token number">1.</span>创建文件流
in<span class="token operator">=</span><span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span>Resources</span><span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span><span class="token string">".xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">2.</span>创建工厂
<span class="token class-name">SqlSessionFactory</span> factory<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">SqlSessionFactoryBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">3.</span>创建session
<span class="token class-name">SqlSession</span> sqlsession<span class="token operator">=</span>factory<span class="token punctuation">.</span><span class="token function">openSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">4.</span>创建mapper
<span class="token class-name">UserMapper</span> userMapper<span class="token operator">=</span>sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span><span class="token class-name">UserMapper</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">5.</span>调用mapper<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ol>
</li>
</ol>
</li>
</ol>
<h3 id="Bean-1"><a href="#Bean-1" class="headerlink" title="Bean"></a>Bean</h3><ol>
<li><p>bean概念</p>
<ol>
<li><p>一类是使用Bean，即是把已经在xml文件中配置好的Bean,或者手动注册的Bean拿来用，完成属性、方法的组装；比如@Autowired , @Resource，可以通过byTYPE（@Autowired）、byNAME（@Resource）的方式获取Bean；</p>
</li>
<li><p>一类是注册Bean,@Component , @Repository , @ Controller , @Service , @Configration这些注解都是把你要实例化的对象转化成一个Bean，放在IoC容器中，等你要用的时候，它会和上面的@Autowired , @Resource配合到一起，把对象、属性、方法完美组装。</p>
</li>
</ol>
</li>
<li><p>bean加载过程</p>
</li>
<li><p>bean生命周期</p>
</li>
</ol>
<h3 id="常用注解"><a href="#常用注解" class="headerlink" title="常用注解"></a>常用注解</h3><ol>
<li><p>@Componet —-&gt;一个bean</p>
</li>
<li><p>@Configration —&gt;一本beans，一堆bean</p>
</li>
<li><p>@Bean—&gt;一个生成bean的方法，若干个@Bean常放在@Configration/@Component中，可以加载Conponent不能加载的自定义类。</p>
</li>
<li><p>bean的各个注解</p>
</li>
<li><p>MapperScan:执行类上加入@MapperScan(“com.example.springsecruity.mapper”)</p>
<p>需要加入依赖</p>
<pre class="line-numbers language-none"><code class="language-none">mybatis-spring-boot-starter<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
</ol>
<h3 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h3><ol>
<li><p>mysql</p>
<pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li>
<li><p>mybatis</p>
<pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--mybatis-plus--></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.baomidou<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis-plus-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
<span class="token comment">&lt;!-- velocity 模板引擎, Mybatis Plus 代码生成器需要 --></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.velocity<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>velocity-engine-core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li><p>spring</p>
</li>
<li><p>springBoot</p>
<pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li>
<li><p>springCloud</p>
<pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--服务注册nacos--></span>
       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-alibaba-nacos-discovery<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-netflix-ribbon<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
        <span class="token comment">&lt;!--服务调用--></span>
       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-openfeign<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
                <span class="token comment">&lt;!--hystrix依赖，主要是用  @HystrixCommand --></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-netflix-hystrix<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
       <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li><p>swagger</p>
<pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--swagger--></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>io.springfox<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>springfox-swagger2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>io.springfox<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>springfox-swagger-ui<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li><p>单元测试</p>
<pre class="line-numbers language-none"><code class="language-none">&lt;dependency&gt;
            &lt;groupId&gt;junit&lt;&#x2F;groupId&gt;
            &lt;artifactId&gt;junit&lt;&#x2F;artifactId&gt;
            &lt;version&gt;4.12&lt;&#x2F;version&gt;
        &lt;&#x2F;dependency&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li><p>json数据转换</p>
<pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.google.code.gson<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>gson<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="alibaba依赖"><a href="#alibaba依赖" class="headerlink" title="alibaba依赖"></a>alibaba依赖</h4><ol>
<li><p>oss</p>
<pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.aliyun.oss<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>aliyun-sdk-oss<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li>
<li><p>视频点播</p>
<pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.aliyun<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>aliyun-java-sdk-core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li>
<li><p>easyExcel</p>
<pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>easyexcel<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.1.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li><p>json</p>
<pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>fastjson<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.aliyun<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>aliyun-java-sdk-core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
        &lt;/dependency<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ol>
</li>
</ol>
]]></content>
      <categories>
        <category>java</category>
        <category>javaWeb</category>
        <category>spring</category>
      </categories>
  </entry>
  <entry>
    <title>SpringCloud</title>
    <url>/2021/10/06/java/springCloud/</url>
    <content><![CDATA[<h3 id="1"><a href="#1" class="headerlink" title="1"></a>1</h3><ol>
<li><p>springCloud是一系列框架的集合</p>
</li>
<li><p>自动挡的房车</p>
</li>
<li><p>依赖.pom+配置.properties+@注解</p>
</li>
<li><p>微服务架构技术落地实现的集合体，是微服务架构下的一站式解决方案</p>
<p>服务发现——Netflix Eureka /  nacos<br>客服端负载均衡——Netflix Ribbon</p>
<p>服务调用—— netflix fergn</p>
<p>断路器——Netflix Hystrix<br>服务网关——Netflix Zuul /Sprin Cloud CateWay<br>分布式配置——Spring Cloud Config /nacos</p>
<p>消息总线 —— Spring Cloud Bus/ nacos</p>
</li>
<li><h1 id="微服务实现"><a href="#微服务实现" class="headerlink" title="微服务实现"></a>微服务实现</h1><ol>
<li>微服务架构：SpringCloud、Dubbo、SpringCloudAlibaba</li>
<li>网关–&gt;负载均衡–&gt;微服务集群–&gt;数据库</li>
</ol>
<h2 id="ribbon负载均衡"><a href="#ribbon负载均衡" class="headerlink" title="ribbon负载均衡"></a>ribbon负载均衡</h2><h2 id="nacos注册中心"><a href="#nacos注册中心" class="headerlink" title="nacos注册中心"></a>nacos注册中心</h2></li>
</ol>
<h2 id="SpringCloud"><a href="#SpringCloud" class="headerlink" title="SpringCloud"></a>SpringCloud</h2><ol>
<li>版本对应</li>
</ol>
<table>
<thead>
<tr>
<th>springCloud</th>
<th>springBoot</th>
</tr>
</thead>
<tbody><tr>
<td><a href="https://github.com/spring-cloud/spring-cloud-release/wiki/Spring-Cloud-2020.0-Release-Notes">2020.0.x</a> aka Ilford</td>
<td>2.4.x, 2.5.x (Starting with 2020.0.3)</td>
</tr>
<tr>
<td><a href="https://github.com/spring-cloud/spring-cloud-release/wiki/Spring-Cloud-Hoxton-Release-Notes">Hoxton</a><a href="https://github.com/spring-cloud/spring-cloud-release/wiki/Spring-Cloud-Hoxton-Release-Notes">Hoxton</a></td>
<td>2.2.x, 2.3.x (Starting with SR5)</td>
</tr>
<tr>
<td><a href="https://github.com/spring-projects/spring-cloud/wiki/Spring-Cloud-Greenwich-Release-Notes">Greenwich</a><a href="https://github.com/spring-projects/spring-cloud/wiki/Spring-Cloud-Greenwich-Release-Notes">Greenwich</a></td>
<td>2.1.x2.1.x</td>
</tr>
<tr>
<td><a href="https://github.com/spring-projects/spring-cloud/wiki/Spring-Cloud-Finchley-Release-Notes">Finchley</a><a href="https://github.com/spring-projects/spring-cloud/wiki/Spring-Cloud-Finchley-Release-Notes">Finchley</a></td>
<td>2.0.x2.0.x</td>
</tr>
<tr>
<td><a href="https://github.com/spring-projects/spring-cloud/wiki/Spring-Cloud-Edgware-Release-Notes">Edgware</a></td>
<td>1.5.x</td>
</tr>
<tr>
<td><a href="https://github.com/spring-projects/spring-cloud/wiki/Spring-Cloud-Dalston-Release-Notes">Dalston</a></td>
<td>1.5.x</td>
</tr>
</tbody></table>
<h2 id="1、服务拆分、"><a href="#1、服务拆分、" class="headerlink" title="1、服务拆分、"></a>1、服务拆分、</h2><ol>
<li><p>数据独立、每个模块一个数据库</p>
</li>
<li><p><strong>提供者</strong>接口暴露</p>
</li>
<li><p>业务独立</p>
</li>
<li><p><strong>消费者</strong>远程调用<strong>提供者</strong>：8080–java代码发起请求http请求—&gt;8081</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//application中注入RestTemplate</span>
<span class="token annotation punctuation">@Bean</span>
<span class="token keyword">public</span> <span class="token class-name">RestTemplate</span> <span class="token function">restTemplate</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token class-name">RestTemplate</span><span class="token punctuation">(</span>param<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">//service调用restTemplate</span>
<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span>order<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
	<span class="token class-name">String</span> url<span class="token operator">=</span><span class="token string">"http://localhost:8081/user/"</span><span class="token operator">+</span>order<span class="token punctuation">.</span>getId'<span class="token punctuation">;</span>
    <span class="token keyword">return</span> restTemplate<span class="token punctuation">.</span><span class="token function">getForObject</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span><span class="token class-name">User</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ol>
<h2 id="eureka注册中心"><a href="#eureka注册中心" class="headerlink" title="eureka注册中心"></a>eureka注册中心</h2><ol>
<li><p>8081可能会改变，所以需要用注册中心</p>
</li>
<li><p>消费者—注册中心—提供者</p>
</li>
<li><p>每一个模块启动，都会向eureka注册的报道登记（每30秒也会）（因为每一个模块都可能成为提供者），比如user模块：我来了，我是user。如果30s内没有报道，就会除去这个接口。</p>
</li>
<li><p>然后来了一个消费者：帮我找找user，看有没有，eureka一看有3个User，eureka就会根据负载均衡挑选一个接口。</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//application中注入RestTemplate</span>
<span class="token annotation punctuation">@Bean</span>
<span class="token annotation punctuation">@LoadBalance</span> <span class="token comment">//负载均衡</span>
<span class="token keyword">public</span> <span class="token class-name">RestTemplate</span> <span class="token function">restTemplate</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token class-name">RestTemplate</span><span class="token punctuation">(</span>param<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">//service调用restTemplate</span>
<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span>order<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
	<span class="token class-name">String</span> url<span class="token operator">=</span><span class="token string">"http://userservice/user/"</span><span class="token operator">+</span>order<span class="token punctuation">.</span>getId'<span class="token punctuation">;</span>
    <span class="token keyword">return</span> restTemplate<span class="token punctuation">.</span><span class="token function">getForObject</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span><span class="token class-name">User</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ol>
<h3 id="Riboon负载均衡"><a href="#Riboon负载均衡" class="headerlink" title="Riboon负载均衡"></a>Riboon负载均衡</h3><ol>
<li><p>步骤</p>
<img src="https://job-wyg.oss-cn-beijing.aliyuncs.com/image-20210913002823604.png" alt="image-20210913002823604" style="zoom:80%;" /></li>
<li><p>负载均衡原理：Riboon负载均衡的原则是IRule接口实现的ZoneAvoiddanceRule&lt;—-RoundRobinRule，是轮循类。</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java">其中zone可以指定地方
会优先原则离这个地方最近的服务接口
其他调整方法：
	<span class="token annotation punctuation">@Bean</span>
   	<span class="token keyword">public</span> <span class="token class-name">IRule</span> <span class="token function">testRule</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    	<span class="token keyword">return</span> <span class="token class-name">RandomRule</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 随机
<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ol>
<h3 id="Nacos注册中心—-gt-eureka"><a href="#Nacos注册中心—-gt-eureka" class="headerlink" title="Nacos注册中心—&gt;eureka"></a>Nacos注册中心—&gt;eureka</h3><ol>
<li><p>特点：</p>
<ol>
<li>房产中介，桥梁，注册中心</li>
</ol>
</li>
<li><p>启动</p>
<pre class="line-numbers language-none"><code class="language-none">startup.cmd -m standalone 
其中nacos中
	standlone是单机启动
	clusters<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li>
<li></li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>springBoot秒杀系统</title>
    <url>/2021/10/06/project/springboot_%E7%A7%92%E6%9D%80%E7%B3%BB%E7%BB%9F/</url>
    <content><![CDATA[<h3 id="技术介绍"><a href="#技术介绍" class="headerlink" title="技术介绍"></a>技术介绍</h3><ol>
<li>秒杀 两个问题：并发读，并发写。防止最坏的情况发生。<ol>
<li>稳  高可用 最坏情况planb</li>
<li>准  一致性</li>
<li>快  高性能， 效率</li>
</ol>
</li>
<li> <img src="https://job-wyg.oss-cn-beijing.aliyuncs.com/image-20210930003833352.png" alt="image-20210930003833352"></li>
<li><img src="https://job-wyg.oss-cn-beijing.aliyuncs.com/image-20210930003801073.png" alt="image-20210930003800497"></li>
<li><img src="https://job-wyg.oss-cn-beijing.aliyuncs.com/image-20210930003852477.png" alt="image-20210930003852477"></li>
</ol>
<h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><ol>
<li><p>创建项目加入依赖</p>
<p>mybatisplus,mysql,thymeleaf,springwebm,lomok</p>
</li>
<li><p>配置resources</p>
<ol>
<li><p>application</p>
<ol>
<li>datasource<ol>
<li>driver-url-username-password</li>
<li>连接池</li>
</ol>
</li>
<li>logging debug</li>
<li>mybatis-plus</li>
</ol>
</li>
<li><p>mapper</p>
</li>
<li><p>templates</p>
<ol>
<li><p>html—&gt;thymeleaf命名空间</p>
<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>th</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.thymeleaf.org<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
</ol>
</li>
<li><p>logging</p>
<pre class="line-numbers language-yml" data-language="yml"><code class="language-yml">logging:
  level:  com.examapl.springkill.mapper: debug<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li>
</ol>
</li>
<li><p>登录功能</p>
<ol>
<li><p>MD5加密(实质是一种消息摘要算法)</p>
</li>
<li><p>步骤</p>
<ol>
<li><p>依赖</p>
<pre class="line-numbers language-xml" data-language="xml"><code class="language-xml">commons-codec
commons-lang3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li>
<li><p>二次加密步骤</p>
<ol>
<li><p>```<br>根据公有盐第一次转化为md5密码—m1</p>
<pre class="line-numbers language-none"><code class="language-none">
2. &#96;&#96;&#96;
   根据m1和数据库的私有盐进行二次加密-<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li>
<li><pre><code>封装函数方便直接得到m2
</code></pre>
</li>
</ol>
</li>
<li><p>二次加密优点</p>
</li>
</ol>
</li>
<li></li>
</ol>
</li>
</ol>
]]></content>
      <categories>
        <category>项目</category>
      </categories>
  </entry>
  <entry>
    <title>反射</title>
    <url>/2021/10/06/java/%E5%8F%8D%E5%B0%84%E5%92%8C%E6%B3%A8%E8%A7%A3/</url>
    <content><![CDATA[<h3 id=""><a href="#" class="headerlink" title=""></a></h3><h3 id="-1"><a href="#-1" class="headerlink" title=""></a></h3><p>test</p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
  </entry>
  <entry>
    <title>设计模式</title>
    <url>/2021/10/06/java/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h3 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h3><ul>
<li>单例类只能有一个实例。</li>
<li>单例类必须自己创建自己的唯一实例。</li>
<li>单例类必须给所有其他对象提供这一实例。</li>
</ul>
<span id="more"></span>

<p>实例：</p>
<p>​    Windows 是多进程多线程的，在操作一个文件的时候，就不可避免地出现多个进程或线程同时操作一个文件的现象，所以所有文件的处理必须通过唯一的实例来进行。</p>
<p>特点：</p>
<ol>
<li>私有构造器。</li>
<li>占用内存低（懒汉式）（饿汉式直接创建可能浪费内存）懒汉式线程不安全，但是加锁后可以避免（双重检测锁，voliate）。</li>
<li>但是强大，霸道的反射依然会造成线程不安全。三重检测。（）</li>
</ol>
]]></content>
      <categories>
        <category>java</category>
        <category>java高阶</category>
      </categories>
  </entry>
  <entry>
    <title>springBoot</title>
    <url>/2021/10/06/java/springBoot/</url>
    <content><![CDATA[<h3 id="spring-boot-starter"><a href="#spring-boot-starter" class="headerlink" title="spring-boot-starter"></a>spring-boot-starter</h3><ol>
<li>可以认为starter是一种服务（和JS的插件类似）——使得使用某个功能的开发者不需要关注各种依赖库的处理，不需要具体的配置信息，由Spring Boot自动通过classpath路径下的类发现需要的Bean，并织入bean</li>
</ol>
<span id="more"></span>]]></content>
      <categories>
        <category>java</category>
        <category>javaWeb</category>
        <category>spring</category>
      </categories>
  </entry>
  <entry>
    <title>Git的使用</title>
    <url>/2021/10/06/utils/git/</url>
    <content><![CDATA[<h3 id="Git概念"><a href="#Git概念" class="headerlink" title="Git概念"></a>Git概念</h3><ol>
<li><p>手工式版本控制</p>
<ol>
<li>特点<ol>
<li>每改一次备份一次</li>
<li>协同更改需要同时U盘copy</li>
</ol>
</li>
<li>问题<ol>
<li>备份</li>
<li>代码还原</li>
<li>协同开发</li>
<li>代码追溯(追责)</li>
</ol>
</li>
</ol>
<span id="more"></span></li>
<li><p>解决：<font color='red'>版本控制</font>结束了手动管理多个“版本”的史前时代，进入到版本控制的20世纪。</p>
</li>
<li><p>集中式版本控制SVN/CVS</p>
<ol>
<li>版本库都放在集中式服务器</li>
<li>使用前先从集中式服务器copy过来</li>
<li>修改完后在上传到集中服务器</li>
</ol>
</li>
<li><p>分布式版本控制（共享版本库）</p>
<ol>
<li>每个人都有所有的版本，gitee/github也算个人</li>
<li>一个人修改了A那么直接上传就会记录这个修改内容</li>
<li>本地有所有的版本</li>
</ol>
</li>
</ol>
<h3 id="Git操作"><a href="#Git操作" class="headerlink" title="Git操作"></a>Git操作</h3><h5 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h5><ol>
<li><p>安装完成先自报家门</p>
<pre class="line-numbers language-none"><code class="language-none">git config --global user.name &quot;Your Name&quot;
git config --global user.email &quot;email@example.com&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>git config 命令的 –global 表示整个电脑的git都设置为这个身份</p>
</li>
<li><p>创建版本库</p>
<pre class="line-numbers language-none"><code class="language-none">mkdir blog
cd blog
git init<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li>
<li><p>写文件</p>
<pre class="line-numbers language-none"><code class="language-none">touch readme.txt
git add .
git commit -m &quot;wrote a file&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>. 表示当前目录</p>
</li>
</ol>
<h5 id="版本撤回"><a href="#版本撤回" class="headerlink" title="版本撤回"></a>版本撤回</h5><ol>
<li><p>查看当前文件状态(工作区同暂存区、HEAD相比，并显示未add和已add未commit的信息)</p>
<pre class="line-numbers language-none"><code class="language-none">git status<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p><img src="https://job-wyg.oss-cn-beijing.aliyuncs.com/image-20211004192710237.png" alt="image-20211004192710237"></p>
</li>
<li><p>查看文件修改内容(工作区同上一次暂存区相比)</p>
<pre class="line-numbers language-none"><code class="language-none">git diff readme.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
<li><p>查看每次修改和对应的修改提示</p>
<pre class="line-numbers language-none"><code class="language-none">git log<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
<li><p>版本撤回</p>
<ol>
<li><p>回到上上个版本</p>
<pre class="line-numbers language-none"><code class="language-none">git reset --hard HEAD^^<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
<li><p>–hard表示</p>
</li>
<li><p>git reset –head 版本id/head都可以回退</p>
</li>
<li><p>如果撤多了那么别叉掉窗口，几下最近几次commit-id的前机会还可以回撤</p>
<pre class="line-numbers language-none"><code class="language-none">git reset --hard cd0c<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
<li><p>如果不小心叉掉了，git reflog还可以查看各个commit-id</p>
<p><img src="https://job-wyg.oss-cn-beijing.aliyuncs.com/image-20211004183507316.png" alt="image-20211004183507316"></p>
<p>最下面是第一次commit</p>
<p>然后根据git reset commit-id 回退版本</p>
</li>
<li><p>但是，如果你的工作区没有add就进行了版本撤回，那么就会找不到你这此更改的内容。</p>
</li>
<li><p>如果你的工作区已经add到了缓存区，</p>
</li>
</ol>
</li>
<li><p>撤销修改</p>
<ol>
<li><p>丢弃工作区，工作区&lt;—暂存区</p>
<pre class="line-numbers language-none"><code class="language-none">git checkout -- readme.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
<li><p>丢掉暂存区，暂存区&lt;—版本库</p>
<pre class="line-numbers language-none"><code class="language-none">git reset head readme.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
</ol>
</li>
<li><p>删除文件</p>
<p>rm readme.txt</p>
<ol>
<li><p>整体删除</p>
<pre class="line-numbers language-none"><code class="language-none">git rm&#x2F;add readme.txt
git commit -m &quot;&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li>
<li><p>撤回删除(从暂存区拿回)</p>
<pre class="line-numbers language-none"><code class="language-none">git checkout -- test.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
</ol>
</li>
</ol>
<h5 id="远程仓库"><a href="#远程仓库" class="headerlink" title="远程仓库"></a>远程仓库</h5><ol>
<li><p>添加远程仓库</p>
<pre class="line-numbers language-none"><code class="language-none">git remote add origin git@github.com:Wang-yonggan&#x2F;test.git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
<li><p>远程库的名字就是<code>origin</code>，这是Git默认的叫法把本地库的内容推送到远程，用<code>git push</code>命令，实际上是把当前分支<code>master</code>推送到远程。</p>
</li>
<li><p>由于远程库是空的，我们第一次推送<code>master</code>分支时，加上了<code>-u</code>参数，Git不但会把本地的<code>master</code>分支内容推送的远程新的<code>master</code>分支，还会把本地的<code>master</code>分支和远程的<code>master</code>分支关联起来，在以后的推送或者拉取时就可以简化命令。</p>
<p>以后只需要</p>
<pre class="line-numbers language-none"><code class="language-none">git push origin master<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
<li><p>查看远程仓库状态</p>
<pre class="line-numbers language-none"><code class="language-none">git remote -v<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
<li><p>解除远程仓库关系</p>
<pre class="line-numbers language-none"><code class="language-none">git remote rm origin<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
<li><p>克隆(支持两种协议)</p>
<ol>
<li>https 默认</li>
<li>git 更快，有的公司不支持</li>
</ol>
</li>
<li><p>远程删除一个文件夹</p>
<ol>
<li>git rm -r –cached dir  –&gt;撤回 git reset dir</li>
<li>git rm –cached file</li>
<li>git  commit</li>
<li>git push</li>
</ol>
</li>
</ol>
<h5 id="分支管理"><a href="#分支管理" class="headerlink" title="分支管理"></a>分支管理</h5><ol>
<li><p>创建分支</p>
<pre class="line-numbers language-none"><code class="language-none">git branch dev<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
<li><p>切换分支</p>
<p>checkout==switch</p>
<pre class="line-numbers language-none"><code class="language-none">git checkout dev<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
<li><p>查看有哪些分支</p>
<pre class="line-numbers language-none"><code class="language-none">git branch<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
<li><p>合并分支(只有撤回到master下面这句才有效)</p>
<pre class="line-numbers language-none"><code class="language-none">git merge dev<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
<li><p>删除分支</p>
<pre class="line-numbers language-none"><code class="language-none">git branch -d dev<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
<li><p>远程分支master&lt;—–&gt;本地分支master</p>
</li>
<li><p>本地的分支会共享暂存区，但版本库独立，即分支master创建并add到暂存区的a文件如果被分支dev commit了，那么再切换到master就没有这个文件。</p>
</li>
<li><p>分支冲突</p>
<p><img src="https://job-wyg.oss-cn-beijing.aliyuncs.com/image-20211004221917099.png" alt="image-20211004221917099"></p>
<p>修改+add+commit手动合并</p>
</li>
</ol>
<h5 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h5><ol>
<li><p>tag标签</p>
<p>​    标签与commit-id对应关系</p>
<ol>
<li><p>创建tag</p>
<pre class="line-numbers language-none"><code class="language-none">git tag v1.0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
<li><p>根据commit-id创建tag</p>
<pre class="line-numbers language-none"><code class="language-none">git tag v0.8 abcde<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
<li><p>上传tags</p>
<pre class="line-numbers language-none"><code class="language-none">git push orgin v1.0
git push orgin --tags<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li>
<li><p>删除tags</p>
<pre class="line-numbers language-none"><code class="language-none">git push origin :refs&#x2F;tags&#x2F;v0.9<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
</ol>
</li>
<li><p>忽略文件</p>
<ol>
<li><p>文件内容(!表示非)</p>
<pre class="line-numbers language-none"><code class="language-none">*.txt*
!.gitignore<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li>
<li><p>强制添加</p>
<pre class="line-numbers language-none"><code class="language-none">git add -f App.class<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
<li><p>例子</p>
<ol>
<li>忽略.o和.a文件 : *.[oa]</li>
<li>忽略目录d: d/</li>
<li>* ？：代表任意的一个字符<br>  * ＊：代表任意数目的字符<br>  * {!ab}：必须不是此类型<br>  * {ab,bb,cx}：代表ab,bb,cx中任一类型即可<br>  * [abc]：代表a,b,c中任一字符即可<br>  * [ ^abc]：代表必须不是a,b,c中任一字符</li>
<li></li>
</ol>
</li>
</ol>
</li>
<li><p>别名</p>
<ol>
<li><p>st=status</p>
<pre class="line-numbers language-none"><code class="language-none">git config --global alias.st status<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
</ol>
</li>
</ol>
<h3 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h3><ol>
<li>分支</li>
<li>版本<ol>
<li>HEAD表示当前版本</li>
<li>HEAD^^表示上上一个版本</li>
<li>HEAD~100表示上100个版本</li>
<li></li>
</ol>
</li>
</ol>
<h3 id="做过的配置"><a href="#做过的配置" class="headerlink" title="做过的配置"></a>做过的配置</h3><ol>
<li><p>git config –global http.sslVerify true   </p>
<p>push 失败 SSL</p>
</li>
<li><p>push 到github失败，网速问题</p>
<p>使用@git协议</p>
<ol>
<li>github加入自己的本机的ssh</li>
<li>将本机的.git的里面的comfig.remote修改为项目的ssh链接</li>
</ol>
</li>
</ol>
]]></content>
      <categories>
        <category>utils</category>
      </categories>
  </entry>
  <entry>
    <title>hexo使用</title>
    <url>/2021/10/06/utils/blog/</url>
    <content><![CDATA[<p>搭建个人博客</p>
<ol>
<li><p>下载node.js</p>
</li>
<li><p>npm下载cnpm</p>
<pre class="line-numbers language-none"><code class="language-none">npm install -g cnpm  --registry&#x3D;https:&#x2F;&#x2F;registry.npm.taobao.org<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<span id="more"></span></li>
<li><p>下载hexo </p>
<pre class="line-numbers language-none"><code class="language-none">cnpm install -g hexo-cli<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
<li><p>创建目录</p>
</li>
<li><p>hexo初始化blog 和deployer</p>
<pre class="line-numbers language-none"><code class="language-none">cd blog
hexo init
npm install hexo-deployer-git --save
npm i hexo-renderer-swig<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>或者</p>
<pre class="line-numbers language-none"><code class="language-none">git clone https:&#x2F;&#x2F;gitee.com&#x2F;weilining&#x2F;hexo-starter.git blog
cd blog
git submodule init
git submodule update
npm config set registry http:&#x2F;&#x2F;registry.npm.taobao.org
npm i
npm install hexo-deployer-git --save<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li><p>hexo g 生成静态文件</p>
</li>
<li><p>启动(localhost:4000)</p>
<pre class="line-numbers language-none"><code class="language-none">hexo s -p 400 <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
</ol>
<h3 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h3><ol>
<li><p>创建文章</p>
<pre class="line-numbers language-none"><code class="language-none">&quot;文章&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
<li><p>生成静态文件</p>
<pre class="line-numbers language-none"><code class="language-none">hexo g<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
</ol>
<h3 id="通过github搭建"><a href="#通过github搭建" class="headerlink" title="通过github搭建"></a>通过github搭建</h3><ol>
<li><p>创建public仓库 name/name.github.io    </p>
</li>
<li><p>下载插件</p>
<pre class="line-numbers language-none"><code class="language-none">cnpm install --save hexo-deployer-git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
<li><p>修改config.yml</p>
<pre class="line-numbers language-none"><code class="language-none">deploy:
  type: git
  repo: https:&#x2F;&#x2F;github.com&#x2F;Wang-yonggan&#x2F;Wang-yonggan.github.io.git
  branch: master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li>
<li><p>分类：</p>
<ol>
<li>```<br>hexo new page categories<pre class="line-numbers language-none"><code class="language-none">
   2.  index.md加入type: categories

5. hexo clean &amp;&amp; hexo g &amp;&amp; hexo s


### 主题

1. git clone ..  themes&#x2F;name
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
git clone <a href="https://github.com/litten/hexo-theme-yilia.git">https://github.com/litten/hexo-theme-yilia.git</a> themes/yilia</li>
</ol>
<p>git clone <a href="https://github.com/theme-next/hexo-theme-next">https://github.com/theme-next/hexo-theme-next</a> themes/next</p>
<pre class="line-numbers language-none"><code class="language-none">
   

2. vim config.yml

   theme:name

3. hexo clean

### config.yml

1. webset
   1. title 标题
   2. subtitle 副标题
   3. description 网站描述 seo
   4. author 作者
   5. language 语言
   6. timezone 时区

2. URL

   url：网站的网址
   root：网站的根目录
   permalink：文章的永久链接格式，可以在permalink这里配置，如默认中的配置，在hello world文章中就会是这样的url

3. directory
   1. source_dir：存放hexo文章的文件夹，我们写的md文件都放在这个配置对应的文件夹下，默认值是source
   2. public_dir：存放hexo g生成的文件，执行hexo g后根目录就会出现这个文件夹，默认值是public
   3. tag_dir：按标签存放文章的目录，默认值是tags，如果我们给文章添加标签，使用hexo g时public文件夹下就会多出一个tags文件夹（根据我们的配置文件夹名不同），这里给hello-world.md添加一个tags
   4. archive_dir：归档文件夹，存放归档文件，默认值为archives
   5. category_dir：分类文件夹，按分类存放的文件，和上面的tags一样，只要在文章中的Font-matter添加了categories就会在使用hexo g构造时出现相应的文件夹
   6. code_dir：Include code 文件夹，source_dir 下的子目录，默认值为downloads&#x2F;code
   7. i18n_dir：国际化（i18n）文件夹，默认值:lang
   8. skip_render：跳过指定文件的渲染，匹配到的文件将会被不做改动复制到public文件夹下，如果路径对应的是我们的文章，那会直接忽略掉该文章，我们这样设置来忽略掉hello-world.md文件





### issue

1. 下载主题没有显示：
   1. 文件夹名问题
   2. config未该
   3. 没有clean+g+d
   4. gitee没有更行部署
   
2. 部署其他文件夹

   1. 每次hexo d之前copy 文件到posts，但是我发现文件的创建时间被改变了

   2. 将hexo的source文件路径改为ana-notes，但是这样没办法生成目录

   3. 最终选择copy+python修改文件创建时间的方式 

      具体bat代码

      &#96;&#96;&#96;&#96;
      echo 清空posts文件夹
      rd &#x2F;s &#x2F;q %post_path%
      md %post_path%
      echo 递归copy文件
      xcopy &#x2F;y &#x2F;e %src_path% %post_path%
      echo 还原时间
      python E:\data-ana\ana-notes\工具\tools\get_blog_create_time.py
      echo 提交
      hexo clean &amp;&amp; hexo g &amp;&amp; hexo d
      &#96;&#96;&#96;&#96;

      

3. 修改config.yml后报错：yml格式是:后面有空格

4. 实现gitee page自动提交：

   nodejs+puppeteer(xpath)
   
5. 注意，特殊字符尽量不用

   1. 小括号
   2. 大括号
   3. 中括号
   
6. git config --global core.autocrlf false换行转义

7. github

   1. git config --global http.sslVerify &quot;false&quot;

### config

1. 切换中文language

   zh-CN

### next&lt;-landscape

0. http:&#x2F;&#x2F;theme-next.iissnan.com&#x2F;

1. 更换主题

   config--&gt;schemes

2. 设置头像avater

3. 社交图标

   social_icons

   https:&#x2F;&#x2F;fontawesome.com&#x2F;v5.15&#x2F;icons?d&#x3D;gallery&amp;p&#x3D;2

4. 首页全文

   auto_excerpt

   &lt;!--more--&gt;

5. 网站图标

   &#96;&#96;&#96;python
   favicon:aaaa.avg
   source&#x2F;image&#x2F;aaaa.avg<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li><p>背景</p>
<p>canvas</p>
</li>
<li><p>加载进度条 pace</p>
</li>
<li><p>读进度条：scrollpercent</p>
</li>
<li><p>评论</p>
<p>changyan</p>
</li>
<li><p>搜索</p>
</li>
</ol>
   <pre class="line-numbers language-none"><code class="language-none">npm install hexo-generator-searchdb --save

hexo-config
search:
  path: search.xml
  field: post
  format: html
  limit: 10000
config
local_search:<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="11">
<li><p>不算子（访问次数）：busuanzi_count</p>
</li>
<li><p>隐藏底盘:footer.powered</p>
</li>
<li><p>修改字体大小</p>
<p>打开<code>\themes\next\source\css\ _variables\base.styl</code>文件，将<code>$font-size-base</code>改成<code>16px</code>，如下所示：</p>
<pre class="line-numbers language-none"><code class="language-none">$font-size-base            &#x3D;16px<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
<li><p>夜间模式darkmode</p>
</li>
<li><p>网站丝滑motion true</p>
</li>
<li><p>three</p>
</li>
<li><p>移动端回顶onmobile</p>
<p>pc端：back2top</p>
</li>
<li><p>阅读进度：reading_progress</p>
</li>
<li><p>阅读进度保存：bookmark</p>
</li>
<li><p>github图标：github_banner</p>
</li>
<li><p>font：字体设置</p>
</li>
<li><p>代码高亮hexo.config</p>
<ol>
<li>highlight</li>
<li>prismjs二选1</li>
</ol>
</li>
</ol>
<h3 id="plugin"><a href="#plugin" class="headerlink" title="plugin"></a>plugin</h3><ol>
<li><p>代码高亮</p>
<pre class="line-numbers language-none"><code class="language-none">npm install hexo-prism-plugin --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
<li><p>字数统计</p>
<pre class="line-numbers language-none"><code class="language-none">npm i –save hexo-wordcount<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>theme.config</p>
<pre class="line-numbers language-none"><code class="language-none">post_wordcount:
  item_text: true
  wordcount: true #单篇文章字数
  min2read: true #单篇阅读时长
  totalcount: true #站点总字数
  separated_meta: true<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li><p>搜索</p>
<ol>
<li>下载依赖</li>
</ol>
<pre class="line-numbers language-none"><code class="language-none">npm install hexo-generator-searchdb --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ol start="2">
<li>修改hexo.config</li>
</ol>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">search:
  path: search.xml
  field: post
  format: html
  limit: <span class="token number">10000</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="3">
<li>修改theme.config</li>
</ol>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">local_search:<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
<li><p>几何背景</p>
<pre class="line-numbers language-none"><code class="language-none">cd next
git clone https:&#x2F;&#x2F;github.com&#x2F;theme-next&#x2F;theme-next-canvas-ribbon source&#x2F;lib&#x2F;canvas-ribbon<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>theme.config</p>
<p>canvas_ribbon</p>
</li>
<li><p>字数统计</p>
<p>npm install hexo-word-counter</p>
<p>clean g s</p>
</li>
<li></li>
</ol>
]]></content>
      <categories>
        <category>utils</category>
      </categories>
  </entry>
  <entry>
    <title>puppeteer使用</title>
    <url>/2021/10/06/utils/puppeteer/</url>
    <content><![CDATA[<h1 id="Puppeteer的使用"><a href="#Puppeteer的使用" class="headerlink" title="Puppeteer的使用"></a>Puppeteer的使用</h1><h3 id="爬虫"><a href="#爬虫" class="headerlink" title="爬虫"></a>爬虫</h3><h5 id="python"><a href="#python" class="headerlink" title="python"></a>python</h5><ol>
<li><p>urllib+requests——Beautifulsoup+lxml—&gt;数据</p>
</li>
<li><p>scrapy  :抓取+解析</p>
<span id="more"></span></li>
</ol>
<h5 id="puppeteer"><a href="#puppeteer" class="headerlink" title="puppeteer"></a>puppeteer</h5><ol>
<li><p>s</p>
<pre class="line-numbers language-none"><code class="language-none">npm init
npm i puppeteer<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li>
<li><p>seletor</p>
</li>
</ol>
<h3 id="xpath"><a href="#xpath" class="headerlink" title="xpath"></a>xpath</h3><ol>
<li><p>层级 /直接子集() // 跳跃层级(递归)</p>
</li>
<li><p>属性 @</p>
<ol>
<li><p>class</p>
</li>
<li><p>id</p>
</li>
<li><p>property</p>
</li>
<li><p>//article//a/@href</p>
<!--more--></li>
</ol>
</li>
<li><p>函数</p>
<ol>
<li><p>contain</p>
<pre class="line-numbers language-none"><code class="language-none">\\div[contain(@class, &quot;classnameContain&quot;)]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
<li><p>text</p>
<pre class="line-numbers language-none"><code class="language-none">http:&#x2F;&#x2F;books.toscrape.com&#x2F;catalogue&#x2F;category&#x2F;books_1&#x2F;index.html
&#x2F;&#x2F;ul[@class&#x3D;&quot;nav nav-list&quot;]&#x2F;&#x2F;ul&#x2F;&#x2F;a&#x2F;text()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li>
</ol>
</li>
</ol>
]]></content>
      <categories>
        <category>utils</category>
        <category>爬虫</category>
      </categories>
  </entry>
  <entry>
    <title>单点登录</title>
    <url>/2021/10/06/%E7%BB%84%E4%BB%B6/%E5%8D%95%E7%82%B9%E7%99%BB%E5%BD%95/</url>
    <content><![CDATA[<h2 id="授权登录"><a href="#授权登录" class="headerlink" title="授权登录"></a>授权登录</h2><ol>
<li>单点登录，自系统登录，SSO， Singal Sign on</li>
<li>只需要登陆一次就能无需登录访问其他模块</li>
</ol>
<h3 id="三种方法"><a href="#三种方法" class="headerlink" title="三种方法"></a>三种方法</h3><ol>
<li>在百度浏览器登录后，打开百度贴吧就自动登录了，不需要二次登录。这就是单点登录</li>
<li>三种常见方式<ol>
<li>session广播<ol>
<li>把session复制到其他模块</li>
<li>缺点：复制太浪费资源（时间+内存）</li>
</ol>
</li>
<li>cookie+redis<ol>
<li>redis  放置  k:生成随即唯一值（用户ip,id）,v:用户信息</li>
<li>cookie  将k放入cookie中</li>
<li>访问其他模块时，带着cookie，取出k,查询redis,如果查到并正确</li>
<li>也就是只需要验证签名，就能放心的取出的信息安全有效</li>
</ol>
</li>
<li>token(令牌)<ol>
<li>token是按照一定规则生成的并加密的字符串</li>
<li>用户登录–&gt;生成随机字符串–&gt;拼接用户信息</li>
<li>每次访问其他模块，带着这个字符串，其他模块会解码取出用户信息并验证</li>
<li>也就是没到一个模块都要通过User数据库验证token才能确保信息安全有效</li>
</ol>
</li>
</ol>
</li>
</ol>
<h3 id="CAS-中央认证服务"><a href="#CAS-中央认证服务" class="headerlink" title="CAS 中央认证服务"></a>CAS 中央认证服务</h3><p><img src="https://img-blog.csdnimg.cn/20181215232036639.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mzg0NDE4OQ==,size_16,color_FFFFFF,t_70" alt="fff"></p>
<h3 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h3><ol>
<li></li>
</ol>
<h2 id="微服务登录"><a href="#微服务登录" class="headerlink" title="微服务登录"></a>微服务登录</h2><h3 id="OAuth协议"><a href="#OAuth协议" class="headerlink" title="OAuth协议"></a>OAuth协议</h3><ol>
<li>为用户资源授权的协议，第三方不需要知道用户的账号和密码就能知道这个用户是谁</li>
</ol>
<h3 id="JWT-json-web-token"><a href="#JWT-json-web-token" class="headerlink" title="JWT(json web token)"></a>JWT(json web token)</h3><ol>
<li><p>把信息进行安全的json封装，在不同服务器之间传输。</p>
</li>
<li><p>组成(.分割)</p>
<ol>
<li><p>Header</p>
<pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>'typ'<span class="token operator">:</span>'jwt'<span class="token punctuation">,</span> token类型
'alg'<span class="token operator">:</span>'hs256'<span class="token punctuation">&#125;</span> 算法名称<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li>
<li><p>payload载荷(主要信息)</p>
<pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span><span class="token property">"name"</span><span class="token operator">:</span><span class="token string">"wang"</span><span class="token punctuation">,</span><span class="token property">"admin"</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
<li><p>signature签名哈希(防伪标志)</p>
<ol>
<li>header的Base64编码</li>
<li>payload的Base64编码</li>
<li>使用header的加密算法加密1.2部分得到的结果</li>
</ol>
</li>
<li><p>即jwt=base64(header)+base64(payload)+</p>
<p>HMACSHA256( base64UrlEncode(header) + “.” + base64UrlEncode(payload)+”.”+base65(secretKey)) </p>
</li>
<li><p><a href="https://jwt.io/">jwt生成</a></p>
</li>
<li><p><a href="https://1024tools.com/hmac">HMAC sha256加密</a></p>
</li>
<li><p><a href="https://base64.supfree.net/">base64解码</a></p>
</li>
</ol>
</li>
<li><p>基本使用</p>
<ol>
<li><p>依赖</p>
<pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>io.jsonwebtoken<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jjwt<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li>
<li><p>工具类.getJWT   </p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JwtUtils</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> EXPIRE <span class="token operator">=</span> <span class="token number">1000</span> <span class="token operator">*</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">24</span><span class="token punctuation">;</span> <span class="token comment">//token过期时间</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> APP_SECRET <span class="token operator">=</span> <span class="token string">"ukc8BDbRigUDaY6pZFfWus2jZWLPHO"</span><span class="token punctuation">;</span> <span class="token comment">//秘钥</span>
    <span class="token comment">//生成token字符串的方法</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">getJwtToken</span><span class="token punctuation">(</span><span class="token class-name">String</span> id<span class="token punctuation">,</span> <span class="token class-name">String</span> nickname<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token class-name">String</span> <span class="token class-name">JwtToken</span> <span class="token operator">=</span> <span class="token class-name">Jwts</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">setHeaderParam</span><span class="token punctuation">(</span><span class="token string">"typ"</span><span class="token punctuation">,</span> <span class="token string">"JWT"</span><span class="token punctuation">)</span><span class="token comment">//1header  </span>
                <span class="token punctuation">.</span><span class="token function">setHeaderParam</span><span class="token punctuation">(</span><span class="token string">"alg"</span><span class="token punctuation">,</span> <span class="token string">"HS256"</span><span class="token punctuation">)</span><span class="token comment">//header 加密算法</span>
                <span class="token punctuation">.</span><span class="token function">setSubject</span><span class="token punctuation">(</span><span class="token string">"wangyonggan"</span><span class="token punctuation">)</span><span class="token comment">//分类，随便写</span>
                <span class="token punctuation">.</span><span class="token function">setIssuedAt</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  
                <span class="token punctuation">.</span><span class="token function">setExpiration</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> EXPIRE<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//过期时间</span>
                <span class="token punctuation">.</span><span class="token function">claim</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">,</span> id<span class="token punctuation">)</span>  <span class="token comment">//2token主体部分 ，存储用户信息</span>
                <span class="token punctuation">.</span><span class="token function">claim</span><span class="token punctuation">(</span><span class="token string">"nickname"</span><span class="token punctuation">,</span> nickname<span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">signWith</span><span class="token punctuation">(</span><span class="token class-name">SignatureAlgorithm</span><span class="token punctuation">.</span>HS256<span class="token punctuation">,</span> APP_SECRET<span class="token punctuation">)</span><span class="token comment">//3签名</span>
                <span class="token punctuation">.</span><span class="token function">compact</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//拼接生成</span>
        <span class="token keyword">return</span> <span class="token class-name">JwtToken</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li><p>工具类.parseJWT  解析JWT</p>
<ol>
<li>request.header的token</li>
<li>密钥</li>
</ol>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">getMemberIdByJwtToken</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
       <span class="token class-name">String</span> jwtToken <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span><span class="token string">"token"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>jwtToken<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token string">""</span><span class="token punctuation">;</span>
<span class="token comment">//加入签名-密钥获得主体claims     </span>
       <span class="token class-name">Jws</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Claims</span><span class="token punctuation">></span></span> claimsJws <span class="token operator">=</span> <span class="token class-name">Jwts</span><span class="token punctuation">.</span><span class="token function">parser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setSigningKey</span><span class="token punctuation">(</span>APP_SECRET<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">parseClaimsJws</span><span class="token punctuation">(</span>jwtToken<span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token class-name">Claims</span> claims <span class="token operator">=</span> claimsJws<span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span>claims<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ol>
</li>
<li><p>JWT的单点登录</p>
<ol>
<li>登录–&gt;user<ol>
<li>数据库查询(md5,slat等等等)验证user</li>
<li>返回token=JWT(userInfo)</li>
</ol>
</li>
<li></li>
</ol>
</li>
</ol>
]]></content>
      <categories>
        <category>java</category>
        <category>javaWeb</category>
        <category>组件</category>
      </categories>
  </entry>
  <entry>
    <title></title>
    <url>/2021/10/06/%E7%BB%84%E4%BB%B6/%E7%BB%84%E4%BB%B62/</url>
    <content><![CDATA[<h3 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h3><ol>
<li><p>依赖</p>
<pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-data-redis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
<span class="token comment">&lt;!-- spring2.X集成redis所需common-pool2--></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.commons<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>commons-pool2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.6.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li><p>配置类(config)</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@EnableCaching</span> <span class="token comment">//开启缓存</span>
<span class="token annotation punctuation">@Configuration</span>  <span class="token comment">//配置类</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedisConfig</span> <span class="token keyword">extends</span> <span class="token class-name">CachingConfigurerSupport</span> <span class="token punctuation">&#123;</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">RedisTemplate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> <span class="token function">redisTemplate</span><span class="token punctuation">(</span><span class="token class-name">RedisConnectionFactory</span> factory<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">RedisTemplate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> template <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RedisTemplate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">RedisSerializer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> redisSerializer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringRedisSerializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Jackson2JsonRedisSerializer</span> jackson2JsonRedisSerializer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Jackson2JsonRedisSerializer</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">ObjectMapper</span> om <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        om<span class="token punctuation">.</span><span class="token function">setVisibility</span><span class="token punctuation">(</span><span class="token class-name">PropertyAccessor</span><span class="token punctuation">.</span>ALL<span class="token punctuation">,</span> <span class="token class-name">JsonAutoDetect<span class="token punctuation">.</span>Visibility</span><span class="token punctuation">.</span>ANY<span class="token punctuation">)</span><span class="token punctuation">;</span>
        om<span class="token punctuation">.</span><span class="token function">enableDefaultTyping</span><span class="token punctuation">(</span><span class="token class-name">ObjectMapper<span class="token punctuation">.</span>DefaultTyping</span><span class="token punctuation">.</span>NON_FINAL<span class="token punctuation">)</span><span class="token punctuation">;</span>
        jackson2JsonRedisSerializer<span class="token punctuation">.</span><span class="token function">setObjectMapper</span><span class="token punctuation">(</span>om<span class="token punctuation">)</span><span class="token punctuation">;</span>
        template<span class="token punctuation">.</span><span class="token function">setConnectionFactory</span><span class="token punctuation">(</span>factory<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//key序列化方式</span>
        template<span class="token punctuation">.</span><span class="token function">setKeySerializer</span><span class="token punctuation">(</span>redisSerializer<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//value序列化</span>
        template<span class="token punctuation">.</span><span class="token function">setValueSerializer</span><span class="token punctuation">(</span>jackson2JsonRedisSerializer<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//value hashmap序列化</span>
        template<span class="token punctuation">.</span><span class="token function">setHashValueSerializer</span><span class="token punctuation">(</span>jackson2JsonRedisSerializer<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> template<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">CacheManager</span> <span class="token function">cacheManager</span><span class="token punctuation">(</span><span class="token class-name">RedisConnectionFactory</span> factory<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">RedisSerializer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> redisSerializer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringRedisSerializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Jackson2JsonRedisSerializer</span> jackson2JsonRedisSerializer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Jackson2JsonRedisSerializer</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//解决查询缓存转换异常的问题</span>
        <span class="token class-name">ObjectMapper</span> om <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        om<span class="token punctuation">.</span><span class="token function">setVisibility</span><span class="token punctuation">(</span><span class="token class-name">PropertyAccessor</span><span class="token punctuation">.</span>ALL<span class="token punctuation">,</span> <span class="token class-name">JsonAutoDetect<span class="token punctuation">.</span>Visibility</span><span class="token punctuation">.</span>ANY<span class="token punctuation">)</span><span class="token punctuation">;</span>
        om<span class="token punctuation">.</span><span class="token function">enableDefaultTyping</span><span class="token punctuation">(</span><span class="token class-name">ObjectMapper<span class="token punctuation">.</span>DefaultTyping</span><span class="token punctuation">.</span>NON_FINAL<span class="token punctuation">)</span><span class="token punctuation">;</span>
        jackson2JsonRedisSerializer<span class="token punctuation">.</span><span class="token function">setObjectMapper</span><span class="token punctuation">(</span>om<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 配置序列化（解决乱码的问题）,过期时间600秒</span>
        <span class="token class-name">RedisCacheConfiguration</span> config <span class="token operator">=</span> <span class="token class-name">RedisCacheConfiguration</span><span class="token punctuation">.</span><span class="token function">defaultCacheConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">entryTtl</span><span class="token punctuation">(</span><span class="token class-name">Duration</span><span class="token punctuation">.</span><span class="token function">ofSeconds</span><span class="token punctuation">(</span><span class="token number">600</span><span class="token punctuation">)</span><span class="token punctuation">)</span>         <span class="token punctuation">.</span><span class="token function">serializeKeysWith</span><span class="token punctuation">(</span><span class="token class-name">RedisSerializationContext<span class="token punctuation">.</span>SerializationPair</span><span class="token punctuation">.</span><span class="token function">fromSerializer</span><span class="token punctuation">(</span>redisSerializer<span class="token punctuation">)</span><span class="token punctuation">)</span>
               <span class="token punctuation">.</span><span class="token function">serializeValuesWith</span><span class="token punctuation">(</span><span class="token class-name">RedisSerializationContext<span class="token punctuation">.</span>SerializationPair</span><span class="token punctuation">.</span><span class="token function">fromSerializer</span><span class="token punctuation">(</span>jackson2JsonRedisSerializer<span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">disableCachingNullValues</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">RedisCacheManager</span> cacheManager <span class="token operator">=</span> <span class="token class-name">RedisCacheManager</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span>factory<span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">cacheDefaults</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> cacheManager<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li></li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>web组件</title>
    <url>/2021/10/06/%E7%BB%84%E4%BB%B6/web%E7%BB%84%E4%BB%B6/</url>
    <content><![CDATA[<h3 id="thymeleaf"><a href="#thymeleaf" class="headerlink" title="thymeleaf"></a>thymeleaf</h3><ol>
<li><p>步骤</p>
<ol>
<li><p>controller传入Model model</p>
</li>
<li><p>```java<br>model.addAttribute(“name”, “xxxxx”);</p>
<pre class="line-numbers language-none"><code class="language-none">
3. html加入命名空间

   &#96;&#96;&#96;html
   &lt;html lang&#x3D;&quot;en&quot;   xmlns:th&#x3D;&quot;http:&#x2F;&#x2F;www.thymeleaf.org&quot;&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li><p>html调用</p>
<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">'</span>hello<span class="token punctuation">'</span> +$&#123;name&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
</ol>
</li>
</ol>
<span id="more"></span>

<h3 id="mybaitsplus"><a href="#mybaitsplus" class="headerlink" title="mybaitsplus"></a>mybaitsplus</h3><ol>
<li><p>步骤</p>
<ol>
<li><p>依赖</p>
<pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.baomidou<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis-plus<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>mybatis-plus-latest-version<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ol>
</li>
</ol>
<h3 id="Spring-Security"><a href="#Spring-Security" class="headerlink" title="Spring Security"></a>Spring Security</h3><ol>
<li><p> 核心功能</p>
</li>
<li><p>登录认证</p>
</li>
<li><p>用户授权</p>
</li>
<li><p>防止伪造身份</p>
</li>
<li><p>特点</p>
<ol>
<li>和spring无缝连接</li>
<li>功能强大，使用简单</li>
<li>重量级，依赖多</li>
</ol>
</li>
<li><p>使用步骤</p>
<ol>
<li><p>依赖</p>
<pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-security<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li>
<li><p>启动</p>
<p><img src="https://job-wyg.oss-cn-beijing.aliyuncs.com/image-20211005014215091.png" alt="image-20211005014215091"></p>
</li>
<li><p>原理：本质是一个过滤器—过滤器—过滤器的链</p>
<ol>
<li><p>```java<br>FilterSecurityInterceptor.doFilter<br>UsernamePasswordAuthenticationFilter.doFilter //拦截post的login</p>
<pre class="line-numbers language-none"><code class="language-none">
2. 过滤器加载：

   1. 加入依赖后springBoot自动加入security配置

      1. 初始化: intiDelegate(WebConfigContext&#x2F;WebApplicationContext)

         wac.getBean(filterName&quot;FilterChainProxy&quot;)

      2. FilterChainProxy.doFilter-&gt;doFilterInternal把所有的过滤器加载到List

3. 两个接口：用于自定义数据库认证

   1. @UserDetailsService 用户，基于UsernamaPassword过滤器
   2. @PasswordEncoder 加密密码

4. 认证

   1. 设置用户名和密码

      1. 通过配置文件---pro

         &#96;&#96;&#96;properties
         spring.security.user.name&#x3D;wang
         spring.security.user.password&#x3D;123456<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="2">
<li><p>通过继承配置类—WebSecurityConfigerAdapter</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Adapter</span> <span class="token keyword">extends</span> <span class="token class-name">WebSecurityConfigurerAdapter</span> <span class="token punctuation">&#123;</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span><span class="token class-name">AuthenticationManagerBuilder</span> auth<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">BCryptPasswordEncoder</span> passwordEncoder<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">BCryptPasswordEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> password <span class="token operator">=</span> passwordEncoder<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span><span class="token string">"123456"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//设置密码</span>
      auth<span class="token punctuation">.</span><span class="token function">inMemoryAuthentication</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withUser</span><span class="token punctuation">(</span><span class="token string">"wang"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">password</span><span class="token punctuation">(</span>password<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">roles</span><span class="token punctuation">(</span><span class="token string">"admin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//配置</span>
    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>报错</p>
<pre class="line-numbers language-none"><code class="language-none">There is no PasswordEncoder mapped for the id &quot;null&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>原因：没有加载到PasswordEncoder这个类</p>
<p>解决：手动在@Component里面加入@Bean</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Bean</span>
    <span class="token class-name">PasswordEncoder</span> <span class="token function">passwordEncoderxxx</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">BCryptPasswordEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li>
<li><p>自定义实现类查询数据库(实际开发)</p>
<ol>
<li><p>没有配置文件的配置，没有WebSecurityConfigerAdapter，那么security就会找UserDetailService接口的是实现类</p>
</li>
<li><p>步骤</p>
<ol>
<li><p>创建UserDetailService手工辅助Bean,并返回一个完整的用于认证和权限鉴定的User{username,password,authorities}</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Autowired</span>
<span class="token class-name">UserMapper</span> userMapper<span class="token punctuation">;</span>
<span class="token annotation punctuation">@Service</span><span class="token punctuation">(</span><span class="token string">"userDetailsService"</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserService</span> <span class="token keyword">implements</span> <span class="token class-name">UserDetailsService</span> <span class="token punctuation">&#123;</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">UserDetails</span> <span class="token function">loadUserByUsername</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">UsernameNotFoundException</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">GrantedAuthority</span><span class="token punctuation">></span></span> authorities <span class="token operator">=</span> <span class="token class-name">AuthorityUtils</span><span class="token punctuation">.</span><span class="token function">commaSeparatedStringToAuthorityList</span><span class="token punctuation">(</span><span class="token string">"role"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//加入权限</span>
        <span class="token comment">//通过数据库获取用户名和密码，这里会自动比较密码是否真确，因为之前已经拦截过user.name和user.password了</span>
        <span class="token class-name">String</span> name <span class="token operator">=</span> <span class="token string">"wang"</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> password <span class="token operator">=</span> <span class="token string">"123"</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>
                <span class="token keyword">new</span> <span class="token class-name">BCryptPasswordEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>password<span class="token punctuation">)</span><span class="token punctuation">,</span> authorities<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li><p>创建WebSecurityConfigerAdapter的子类进行</p>
<ol>
<li><p>认证:configure(AuthenticationManagerBuilder auth)</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MySecurityConfig</span> <span class="token keyword">extends</span> <span class="token class-name">WebSecurityConfigurerAdapter</span> <span class="token punctuation">&#123;</span>
    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">UserDetailsService</span> userDetailsService<span class="token punctuation">;</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span><span class="token class-name">AuthenticationManagerBuilder</span> auth<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"认证"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        auth<span class="token punctuation">.</span><span class="token function">userDetailsService</span><span class="token punctuation">(</span>userDetailsService<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">passwordEncoder</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BCryptPasswordEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li><p>权限鉴定:  void configure(HttpSecurity http)  </p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span><span class="token class-name">HttpSecurity</span> http<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>
        http<span class="token punctuation">.</span><span class="token function">formLogin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//自定义登录</span>
                <span class="token punctuation">.</span><span class="token function">loginPage</span><span class="token punctuation">(</span><span class="token string">"/login.html"</span><span class="token punctuation">)</span><span class="token comment">//登录页面--->去另一个configure认证--->认证完--->原路径</span>
                <span class="token punctuation">.</span><span class="token function">loginProcessingUrl</span><span class="token punctuation">(</span><span class="token string">"/user/login"</span><span class="token punctuation">)</span><span class="token comment">//登录访问路径-->postController</span>
                <span class="token punctuation">.</span><span class="token function">defaultSuccessUrl</span><span class="token punctuation">(</span><span class="token string">"/test/index"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">permitAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//登录成功页面</span>
                <span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">authorizeRequests</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">antMatchers</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">,</span><span class="token string">"/test/hi"</span><span class="token punctuation">,</span><span class="token string">"/user/login"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">permitAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//不需要认证的界面</span>
                <span class="token punctuation">.</span><span class="token function">anyRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">authenticated</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">csrf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">disable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//关闭csrf防护。</span>
    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li><p>权限鉴定步骤:</p>
<ol>
<li>用户登录访问任意需要认证的路径，比如/test/hello,”/test/hi”不行。</li>
<li>会跳转到/login.html，用户输入用户名和密码，访问login.html的post表单地址,这个地址对应loginProcessingUrl(“/user/login”)。</li>
<li>认证成功后跳转回/test/hello</li>
<li>失败</li>
<li>暂时没发现defaultSuccessUrl作用</li>
<li>注意login.html必须是username,password</li>
<li>bug—-&gt;我的测试页面一直不需要认证，原因是浏览器没关闭，cookie自带的信息帮我认证了。</li>
</ol>
</li>
</ol>
</li>
</ol>
</li>
</ol>
</li>
</ol>
</li>
<li><p>角色权限</p>
<ol>
<li><p>基于角色/权限访问</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//只有admin才能访问index---->userService从数据库拿到设置权限</span>
<span class="token comment">//                .antMatchers("/test/index").hasAnyAuthority("admin")//全部权限</span>
                <span class="token punctuation">.</span><span class="token function">antMatchers</span><span class="token punctuation">(</span><span class="token string">"test/index"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hasAnyAuthority</span><span class="token punctuation">(</span><span class="token string">"admin,user"</span><span class="token punctuation">)</span><span class="token comment">//任意权限</span>
<span class="token comment">//                .antMatchers("/test/index").hasRole("")</span>
                <span class="token punctuation">.</span><span class="token function">anyRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">authenticated</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">csrf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">disable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//关闭csrf防护。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol>
<li>hasAuthority 全部权限</li>
<li>hasAnyAutority 任意权限</li>
<li>hasRole 全部角色</li>
<li>hasAnyRole 任意角色</li>
</ol>
</li>
<li><p>设置权限、角色</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">GrantedAuthority</span><span class="token punctuation">></span></span> authorities <span class="token operator">=</span> <span class="token class-name">AuthorityUtils</span><span class="token punctuation">.</span><span class="token function">commaSeparatedStringToAuthorityList</span><span class="token punctuation">(</span><span class="token string">"ROLE_admin,admin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
<li><p>加入无权限页面</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java">http<span class="token punctuation">.</span><span class="token function">exceptionHandling</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">accessDeniedPage</span><span class="token punctuation">(</span><span class="token string">"/unauth.html"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
</ol>
</li>
<li><p>基于注解而非配置链.antMatchers(“test/index”).hasAnyAuthority(“admin,user”)的方式</p>
<ol>
<li>@EnableGlobalMethodSecurity(securedEnabled = true) AppRun开启鉴权注解模式</li>
<li>@Secured 用户是否拥有运行这个Controller方法的角色</li>
<li>@PreAuthorize 进入方法前</li>
<li>@PostAuthorize 方法执行后进行鉴权</li>
</ol>
</li>
</ol>
</li>
</ol>
</li>
</ol>
<h5 id="一些理解"><a href="#一些理解" class="headerlink" title="一些理解"></a>一些理解</h5><ol>
<li>感觉SpringSecurity就是一个拿着cookie和客户端请求乱跑的组件。哪里请求鉴权哪里。</li>
<li></li>
</ol>
<h3 id="MybatisPlus"><a href="#MybatisPlus" class="headerlink" title="MybatisPlus"></a>MybatisPlus</h3><ol>
<li><p>使用步骤</p>
<ol>
<li><p>依赖</p>
<pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.baomidou<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis-plus<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.4.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mybatis.spring.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.1.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li><p>创建mapper继承Base,这里的@Mapper可不加，plus已封装</p>
<pre class="line-numbers language-none"><code class="language-none">public interface UserMapper extends BaseMapper&lt;User&gt; &#123; &#125;
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
<li><p>注入mapper</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">UserMapper</span> userMapper<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
<li><p>调用QueryWrapper</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//通过数据库获取用户名和密码</span>
<span class="token class-name">QueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Users</span><span class="token punctuation">></span></span>wrapper<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">QueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
wrapper<span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Users</span> users <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">selectOne</span><span class="token punctuation">(</span>wrapper<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li>
<li></li>
</ol>
</li>
</ol>
<h3 id="SpringBoot配置文件pro"><a href="#SpringBoot配置文件pro" class="headerlink" title="SpringBoot配置文件pro"></a>SpringBoot配置文件pro</h3><ol>
<li>server.port=9090 端口</li>
<li>spring.security.user.name=”wang” s</li>
<li>spring.security.user.password=”123456”</li>
</ol>
<h3 id="issue"><a href="#issue" class="headerlink" title="issue"></a>issue</h3><ol>
<li></li>
</ol>
]]></content>
      <categories>
        <category>项目</category>
      </categories>
  </entry>
  <entry>
    <title>java-web</title>
    <url>/2021/10/06/java/java_web/</url>
    <content><![CDATA[<h3 id="web-网页"><a href="#web-网页" class="headerlink" title="web(网页)"></a>web(网页)</h3><ol>
<li>静态web <ol>
<li>html css</li>
<li>静态文件</li>
<li>模板引擎</li>
<li>即所有的数据都不变化</li>
</ol>
</li>
<li>动态web 这个叫javaWeb<ol>
<li>提供给人的数据会根据用户的请求而会变化</li>
</ol>
</li>
<li>web的组成<ol>
<li>html css js</li>
<li>jsp servlet</li>
<li>java</li>
<li>jar</li>
<li>配置文件</li>
<li>服务器</li>
</ol>
</li>
</ol>
<h3 id="tomacat"><a href="#tomacat" class="headerlink" title="tomacat"></a>tomacat</h3><ol>
<li><p>下载</p>
</li>
<li><p>日志换成中文乱码解决</p>
<p>conf/logging.properties:</p>
<p>encoding = UTF-8–&gt;GBK</p>
</li>
<li><p>文件结构</p>
<ol>
<li>bin 可执行文件</li>
<li>conf 配置文件</li>
<li>lib jar依赖</li>
<li>log日志</li>
<li>webapps web项目</li>
<li>运行时数据</li>
</ol>
</li>
<li><p>配置java_home </p>
</li>
<li><p>启动: start-up.bat</p>
</li>
<li><p>关闭: shut-down.bat || ctrl+c || 叉掉</p>
</li>
<li><p>路径：webapps=localhost:8080</p>
</li>
<li><p>tomcat部署web项目的几种方法</p>
<ol>
<li><p>直接将web项目放在webapps下</p>
</li>
<li><p>简化：将web项目压缩成zip并改后缀为war包，这个war包会自动解压缩</p>
<p>缺点：每次都要移动文件，无法配置虚拟目录</p>
</li>
<li><p>servlet.xml–&gt; &lt;host&gt;&lt;Context docBase:”实际目录” path”虚拟地址”/&gt;&lt;/host&gt;</p>
<p>缺点：配置servlet.xml不安全。</p>
</li>
<li><p>热部署：conf\Catalina\localhost下创建bbb.xml，并添加</p>
<p>&lt;Context docBase:”path” path”url”/&gt;</p>
<p>访问bbb就ok</p>
</li>
</ol>
</li>
<li><p>两个jar</p>
<ol>
<li>jsp-api.jar</li>
<li>servlet-api.jar</li>
</ol>
</li>
</ol>
<h3 id="javaWeb项目结构"><a href="#javaWeb项目结构" class="headerlink" title="javaWeb项目结构"></a>javaWeb项目结构</h3><ol>
<li><p>文件结构</p>
<ol>
<li>根目录(parent)<ol>
<li>WEN-INF目录<ol>
<li>web.xml:web核心配置</li>
<li>Classes:字节码文件（java编译后）</li>
<li>lib:依赖jar包</li>
</ol>
</li>
</ol>
</li>
</ol>
</li>
<li><p>web+idea</p>
<ol>
<li><p>启动idea,配置启 添加本地tomcat</p>
<p>配置</p>
<ol>
<li>虚拟目录</li>
<li>端口</li>
</ol>
</li>
<li><p>添加facet的Web</p>
<ol>
<li>配置文件path:web.xml</li>
<li>资源目录 path:webapp</li>
</ol>
</li>
<li><p>在启动配置的tomcat的部署下方配置上下文以配置路径</p>
</li>
<li><p>热部署–&gt;debug方式启动</p>
</li>
<li><p>右键new servlet</p>
<p>javaProject.iml/pom.xml</p>
<pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sourceRoots</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>root</span> <span class="token attr-name">url</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>file://$MODULE_DIR$/src<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>root</span> <span class="token attr-name">url</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>file://$MODULE_DIR$/src/main/java<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>sourceRoots</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li>
</ol>
</li>
</ol>
<h3 id="tomcat-其他"><a href="#tomcat-其他" class="headerlink" title="tomcat 其他"></a>tomcat 其他</h3><ol>
<li>index.html优先级高于jsp</li>
</ol>
<h3 id="Servlet"><a href="#Servlet" class="headerlink" title="Servlet"></a>Servlet</h3><ol>
<li><p>server applet——&gt;运行在服务器的小程序</p>
</li>
<li><p>动态资源：java类若要一直运行在tomcat，那么它就得实现servlet规范(接口)，这样才能被tomcat识别。</p>
</li>
<li><p>servlet接口方法</p>
<ol>
<li><p>init: serlvet创建的时候运行，只运行一次,不是启动的时候，而是第一次访问的时候。</p>
</li>
<li><p>service:提供服务的方法，运行多次</p>
<pre class="line-numbers language-none"><code class="language-none">访问mapping的
8080+虚拟目录+url-pattern
就会运行该函数<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li>
<li><p>getServletInfo：获取serlvet版本信息</p>
</li>
<li><p>getServletConfig</p>
</li>
<li><p>destroy:正常关闭时运行一次</p>
</li>
</ol>
</li>
<li><p>配置</p>
<ol>
<li><p>servlet.class</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">service</span><span class="token punctuation">(</span><span class="token class-name">ServletRequest</span> <span class="token punctuation">,</span><span class="token class-name">ServletResponse</span> <span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"servlet启动"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li>
<li><p>web.xml</p>
<pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>serveletName<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--名字--></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">></span></span>com.wyg.web.servlet.ServletDemo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--servlet类--></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--映射--></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>serveletName<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/demox1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--路径--></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ol>
</li>
<li><p>原理步骤</p>
<ol>
<li>访问url</li>
<li>扫描mapping找到对应servlet.name进而找到servlet.class的全限定类名</li>
<li>反射class.forname(servlet.class).newInstance创建出对象servlet</li>
<li>调用servlet.service</li>
</ol>
</li>
<li><p>servlet生命周期</p>
<ol>
<li><p>被创建加载：init 加载资源</p>
<p>默认第一次访问url</p>
<pre class="line-numbers language-none"><code class="language-none">web.xml-&gt;指定启动时加载并赋予优先级，值为2表示可能是依赖其他servlet启动才能启动。
&lt;load-on-startup&gt;2&lt;&#x2F;load-on-startup&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li>
<li><p>被调用–&gt;service</p>
</li>
<li><p>被销毁–&gt;destory 释放资源</p>
</li>
</ol>
</li>
<li><p>注意:</p>
<ol>
<li>servlet是容易并发的对象(单例)，所以尽量不要定义成员变量，确保线程安全。</li>
<li>url-pattern必须前缀”/“</li>
</ol>
</li>
<li><p>servlet配置项地址：CATALINA_BASE(tomcat启动的时候输出)</p>
</li>
<li><p>servlet(&gt;=3.0) 注解型配置</p>
<ol>
<li><p>servlet类上加@WebServlet(urlPatterns=”/demo”)</p>
</li>
<li><p>urlPatterns可省略</p>
</li>
<li><p>可以加入映射数组</p>
<pre class="line-numbers language-none"><code class="language-none">&quot;user&#x2F;demo&quot;
&quot;user&#x2F;*&quot; 通配符任意
&quot;&#x2F;*&quot; 任意，优先级最低
&quot;*.do&quot;任意.do结尾 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li>
</ol>
</li>
</ol>
<h3 id="servlet体系结构"><a href="#servlet体系结构" class="headerlink" title="servlet体系结构"></a>servlet体系结构</h3><ol>
<li><p>父子关系：接口Servlet–&gt;抽象GenericServlet–&gt;抽象HttpServlet</p>
</li>
<li><p>genericServlet</p>
<ol>
<li>其他方法默认空实现</li>
<li>只需实现service方法</li>
</ol>
</li>
<li><p>httpServlet:</p>
<ol>
<li><p>url请求</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> method<span class="token operator">=</span>req<span class="token punctuation">.</span>getMethod
<span class="token keyword">if</span><span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token string">"get"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token keyword">else</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li>
<li><p>这样每次都判断很麻烦，所以httpServlet对它进行了一个封装，这个封装就是重写service方法判断是get还是post,然后调用对应方法，只需重写doGet/doPost方法</p>
</li>
<li><p>默认deGet方法</p>
</li>
</ol>
</li>
</ol>
<h3 id="Http"><a href="#Http" class="headerlink" title="Http"></a>Http</h3><ol>
<li><p>Hyper Text Transfer Protocol 超文本传输协议，客户端&lt;—&gt;服务端 数据交换格式</p>
<ol>
<li> 基于TCP/IP的高级协议</li>
<li>默认端口80</li>
<li>一次请求对应一次响应</li>
<li>无状态，每个请求独立，不能数据交换</li>
<li>各个版本<ol>
<li>1.0 每个请求都要一次建立连接，断开连接</li>
<li>1.1 请求复用，请求完等一会，等其他的请求复用这个连接</li>
</ol>
</li>
</ol>
</li>
<li><p>请求消息格式</p>
<ol>
<li><p>请求行</p>
<ol>
<li><p>组成请求方式 请求url 请求协议</p>
</li>
<li><p>GET /login.html HTTP/1.1</p>
</li>
<li><p>请求方式</p>
<ol>
<li>Get：请求参数在请求行中,url有限制，不安全（参数可见）</li>
<li>Post: 请求参数在请求体中，url可无限大，安全。</li>
</ol>
</li>
</ol>
</li>
<li><p>请求头</p>
<p>k:v</p>
<p>请求名称：请求头值</p>
<p>get:</p>
<p><img src="https://job-wyg.oss-cn-beijing.aliyuncs.com/image-20211003214231021.png" alt="image-20211003214231021"></p>
<p>post:</p>
<p><img src="https://job-wyg.oss-cn-beijing.aliyuncs.com/image-20211003214506976.png" alt="image-20211003214506976"></p>
<p>user-agent：浏览器版本信息（解决浏览器兼容）。</p>
<p>accept:可接受的文件格式</p>
<p>referer: 告诉服务器我从哪里来，</p>
<ol>
<li>防盗链，防止别人盗取链接。</li>
<li>访问统计。</li>
<li>如果直接访问而不是通过连接访问，那么这个值就是null</li>
</ol>
<p>connection: keep-live 1.1版本的请求复用</p>
</li>
<li><p>请求空行，分割请求体和请求头的</p>
</li>
<li><p>请求体(正文,post才有)，封装post请求参数的</p>
</li>
</ol>
</li>
<li><p>响应消息格式</p>
<ol>
<li><p>响应行</p>
<p>HTTP /2.0 200 OK</p>
<p>协议:版本 状态码</p>
<p>状态码</p>
<ol>
<li>1xx: 服务端未接受全部请求消息</li>
<li>2xx: 成功</li>
<li>3xx: 不在我这。<ol>
<li>302 重定向，在别人哪</li>
<li>304 访问缓存(成功了)，在浏览器的缓存中</li>
</ol>
</li>
<li>4xx: 客户端错误<ol>
<li>401 需要身份认证</li>
<li>403 服务器收到了请求，但拒绝执行，可能是没权限</li>
<li>404 url写错了</li>
<li>405 没有这个get/post方法</li>
<li>414 url过长</li>
</ol>
</li>
<li>5xx: 服务端错误<ol>
<li>500:java报错(1/0)</li>
<li></li>
</ol>
</li>
</ol>
</li>
<li><p>响应头</p>
<p><img src="https://job-wyg.oss-cn-beijing.aliyuncs.com/image-20211004025720770.png" alt="image-20211004025720770"></p>
<ol>
<li>content-type 响应编码格式(text/html;charset=utf-8)</li>
<li>content-disposition 响应数据格式<ol>
<li>in-line: 当前页面直接显示</li>
<li>attachment:附件(超链接下载)</li>
</ol>
</li>
</ol>
</li>
<li><p>响应空行</p>
</li>
<li><p>响应体</p>
<p>data: html  string json 图片二进制数据</p>
</li>
</ol>
</li>
<li><p>url:统一资源定位符:<a href="http://localhost:8080/d2%E4%B8%AD%E5%8D%8E%E4%BA%BA%E6%B0%91%E5%85%B1%E5%92%8C%E5%9B%BD">http://localhost:8080/d2中华人民共和国</a></p>
<p>uri:统一资源标识符:/d2 共和国</p>
</li>
</ol>
<h3 id="Request-Response原理："><a href="#Request-Response原理：" class="headerlink" title="Request,Response原理："></a>Request,Response原理：</h3><ol>
<li><p>一次请求响应步骤</p>
<ol>
<li>tomcat会根据请求url的路径创建servlet对象</li>
<li>tomcat创建Request和Response对象，并且request封装请求消息数据</li>
<li>tomcat将request和response两个对象传给service，并调用service方法</li>
<li>service根据request获取请求消息，使用response设置响应消息</li>
<li>服务器再给浏览器响应之前，会从response获取响应消息</li>
<li>其中resp.getWriter.write(“html”)会返回一个页面，但</li>
</ol>
</li>
<li><p>Request功能</p>
<ol>
<li><p>获取请求消息</p>
<ol>
<li><p>获取请求行</p>
<p>GET /login.html HTTP/1.1</p>
<ol>
<li><p>获取虚拟目录</p>
<p>String getContextPath</p>
</li>
<li><p>获取请求URL</p>
<p>getRequestURL </p>
<p><a href="http://localhost:8080/d2">http://localhost:8080/d2</a></p>
</li>
<li><p>获取请求URI</p>
<p>getRequestURI</p>
<p>d2</p>
</li>
<li><p>获取请求方式：</p>
<p>String getMethod</p>
<p>GET</p>
</li>
<li><p>获取请求参数</p>
<p>String getQueryString</p>
<p>username=aaa</p>
</li>
<li><p>获取Servlet路径</p>
<p>getServletPath</p>
<p>/d2</p>
</li>
<li><p>获取Ip地址</p>
<p>getRemoteAddr</p>
<p>0:0:0:0:0:0:0:1</p>
</li>
</ol>
</li>
<li><p>获取请求头数据</p>
<ol>
<li><p>通过请求头获取请求头值</p>
<p>getHeader(string name)</p>
</li>
<li><p>获取所有请求头名称</p>
<p>Enumeration getHeaderNames</p>
<p><img src="https://job-wyg.oss-cn-beijing.aliyuncs.com/image-20211003223205963.png" alt="image-20211003223205963"></p>
</li>
</ol>
</li>
<li><p>获取请求体信息(只有Post才有)</p>
<ol>
<li><p>获取字符流/字节流</p>
<p>getReader/getInputStream</p>
</li>
<li><p>从流中解析得数据</p>
</li>
</ol>
</li>
</ol>
</li>
<li><p>其他功能</p>
<ol>
<li><p>获取请求参数通用方式(无论get/post，优点：方法统一)</p>
<ol>
<li><p>根据参数名称获取参数值</p>
<p>getParameter(string name)</p>
</li>
<li><p>根据参数名称获取数组getParameterValues(string name)</p>
</li>
<li><p>获取所有参数名称</p>
<p>getParamaterNames</p>
</li>
<li><p>获取参数map集合</p>
<p>getParameterMap</p>
</li>
</ol>
</li>
<li><p>请求转发</p>
<p>服务器资源跳转方式</p>
<ol>
<li>获取转发对象RequestDispatcher getRequestDispatcher(string path)</li>
<li>调用对象方法<ol>
<li>forword(req,resp): 请求抓发,第一个servlet只Writer了resp的头,</li>
<li>include( req , resp): 请求包含—两个请求都Writer了resp体</li>
</ol>
</li>
<li>特点<ol>
<li>浏览器只有一次请求，其他请求在服务器进行</li>
<li>浏览器地址不变</li>
<li>只能转发得到当前服务器内部资源</li>
</ol>
</li>
</ol>
</li>
<li><p>共享数据</p>
<ol>
<li>域对象：一个有作用范围的对象，在这个范围能够共享数据</li>
<li>request对象：代表一次请求的范围，一般用于请求转发多个资源中共享数据。</li>
<li>共享方法：<ol>
<li>setAttribute(“age”,obj)</li>
<li></li>
</ol>
</li>
</ol>
</li>
<li><p>获取ServletContext getServletContext</p>
</li>
</ol>
</li>
<li><p>Response</p>
<ol>
<li><p>设置响应消息</p>
<ol>
<li><p>响应行</p>
<ol>
<li>setStatus(200)</li>
</ol>
</li>
<li><p>响应头</p>
<pre class="line-numbers language-none"><code class="language-none">setHeader(string name,string value)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
<li><p>响应体(stream)</p>
<ol>
<li>获取输出流 PrintWriter</li>
<li>调用outStream输出到浏览器</li>
</ol>
</li>
</ol>
</li>
<li><p>重定向步骤</p>
<ol>
<li><p>A没干–&gt;302+url of B–&gt;但是告诉浏览器B能干</p>
</li>
<li><p>```java<br>resp.sendRedirect(“/d6”);</p>
<pre class="line-numbers language-none"><code class="language-none">
   3. 异步编程：get1--&gt;post1--&gt;重定向--&gt;post1--&gt;get1;post2....

   4. 重定向是两次请求，所以重定向地址不是request域，也因为没传入req,resp.

   5. d5-&gt;d6-&gt;d5不会让服务器崩溃，会让他一直工作

3. 响应数据到浏览器

   1. String&#x2F;txt&#x2F;html
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>PrintWriter printWriter=resp.getWriter();<br>printWriter.write(“<h>hello-write</h>“);</p>
<pre class="line-numbers language-none"><code class="language-none">
2. 乱码：编码和解码的标准不一样。

   1. 设置resp的编码格式

   2. 告诉浏览器解码方式(建议)

      &#96;&#96;&#96;java
      resp.setHeader(&quot;content-type&quot;,&quot;text&#x2F;html;charaset&#x3D;utf-8&quot;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li><p>字节流</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">ServletOutputStream</span> outputStream<span class="token operator">=</span>resp<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
outputStream<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"你不好"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token class-name">StandardCharsets</span><span class="token punctuation">.</span>UTF_8<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li>
<li><p>制作验证码</p>
<ol>
<li><p>简单图片</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">BufferedImage</span> image<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">BufferedImage</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span>h<span class="token punctuation">,</span><span class="token class-name">BufferedImage</span><span class="token punctuation">.</span>TYPE_INT_RGB<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//创建图片对象</span>
<span class="token keyword">int</span> n<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">;</span><span class="token comment">//画布加入4个字母</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
	<span class="token class-name">Random</span> ran<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> index<span class="token operator">=</span>ran<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">26</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">char</span> c<span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>index<span class="token operator">+</span><span class="token string">'A'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	g<span class="token punctuation">.</span><span class="token function">drawString</span><span class="token punctuation">(</span>c<span class="token operator">+</span><span class="token string">""</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token operator">+</span>w<span class="token operator">/</span><span class="token number">5</span><span class="token operator">*</span>i<span class="token punctuation">,</span>h<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token class-name">ImageIO</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>image<span class="token punctuation">,</span><span class="token string">"jpg"</span><span class="token punctuation">,</span>resp<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//传入到流</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li><p>点击图片刷新–&gt;前端调用刷新函数</p>
</li>
</ol>
</li>
<li><p>下载资源步骤(content-disposition: 附件-attachment;)</p>
<ol>
<li>href—&gt;servlet, 超链接指向servlet</li>
<li>设置响应头：文件类型+打开方式</li>
<li>servlet.context.getRealName，通过context获取真实路径</li>
<li>OutStream(InputStream(RealName)) 传到response的输出流</li>
<li>资源需要放在web下，而不是WEB-INF下</li>
</ol>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> filename <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"filename"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> mimeType <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getMimeType</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token punctuation">;</span>
        resp<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">"content-type"</span><span class="token punctuation">,</span>mimeType<span class="token punctuation">)</span><span class="token punctuation">;</span>
        resp<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">"content-disposition"</span><span class="token punctuation">,</span><span class="token string">"attachment;filename="</span><span class="token operator">+</span>filename<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> realPath1 <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getRealPath</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">FileInputStream</span> inputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>realPath1<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">ServletOutputStream</span> outputStream <span class="token operator">=</span> resp<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buffers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>len <span class="token operator">=</span> inputStream<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buffers<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>outputStream<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>buffers<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span><span class="token comment">//访问/d8?filename=a.jpg</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ol>
</li>
</ol>
</li>
</ol>
<h3 id="ServletContext"><a href="#ServletContext" class="headerlink" title="ServletContext"></a>ServletContext</h3><ol>
<li><p>存活于整个web应用，程序–容器间通信</p>
</li>
<li><p>作用</p>
<ol>
<li><p>获取mime类型</p>
<ol>
<li>大类型/小类型 text/html  image/jpg</li>
<li>context.getMimeType(String src)</li>
</ol>
</li>
<li><p>域共享数据</p>
<ol>
<li>setAttribute</li>
<li>getAtrribute</li>
<li>removeAtrribute</li>
<li>范围：所有用户，所有请求的数据，王存李取。(很少用)</li>
</ol>
</li>
<li><p>获取文件真实路径</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java">context<span class="token punctuation">.</span><span class="token function">getRealPath</span><span class="token punctuation">(</span><span class="token string">"a.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//web资源路径直接写</span>
context<span class="token punctuation">.</span><span class="token function">getRealPath</span><span class="token punctuation">(</span><span class="token string">"/WEB-INF/classes/a.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//src下的需要指定WEB-INFO/classes</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>jpath</p>
<pre><code>├── index.html
├── index.jsp
├── login.html
└── WEB-INF
    ├── classes
    │   └── com
    │       └── wyg
    └── web.xml
</code></pre>
</li>
</ol>
</li>
<li><p>获取ServletContext</p>
<ol>
<li><p>两种方式，两个相等</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">ServletContext</span> context<span class="token operator">=</span>req<span class="token punctuation">.</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">ServletContext</span> context2<span class="token operator">=</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li>
<li></li>
</ol>
</li>
</ol>
</li>
</ol>
<h3 id="Request体系结构"><a href="#Request体系结构" class="headerlink" title="Request体系结构"></a>Request体系结构</h3><ol>
<li><p>接口ServletRequest—&gt;接口HttpServletRequest</p>
</li>
<li><p>实现类</p>
<pre class="line-numbers language-none"><code class="language-none">request:
org.apache.catalina.connector.RequestFacade
response:
org.apache.catalina.connector.ResponseFacade<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li>
</ol>
<h3 id="一些理解"><a href="#一些理解" class="headerlink" title="一些理解"></a>一些理解</h3><ol>
<li>tomcat，</li>
<li>servlet 一种规范，实现这个规范的Class能够随时接受Requeset,Response，就好象一直运行在tomcat上一样。</li>
<li>request 一种规范，将浏览器的请求数据进行封装，其中httoRequest将http协议的请求进行封装，这个封装体可以把这些数据到处共享。</li>
<li>response</li>
<li>其他<ol>
<li>@WebServlet(“”)请求模式路径</li>
<li></li>
</ol>
</li>
</ol>
<h3 id="issue"><a href="#issue" class="headerlink" title="issue"></a>issue</h3><ol>
<li><p>Request请求参数乱码</p>
<ol>
<li><p>tomcat&gt;8 get方式不会乱码(url)</p>
</li>
<li><p>post(stream)-&gt;设置流的编码–&gt;</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java">req<span class="token punctuation">.</span><span class="token function">setCharacterEncoding</span><span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
</ol>
</li>
<li><p>Response设置编码</p>
</li>
</ol>
<h3 id="数据交互类型"><a href="#数据交互类型" class="headerlink" title="数据交互类型"></a>数据交互类型</h3><ol>
<li><p>BeanUtils</p>
<p>map–&gt;obj</p>
<ol>
<li>解析map–&gt;封装javaBean</li>
</ol>
<pre class="line-numbers language-none"><code class="language-none">BeanUtils.populate(obj,map)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ol>
<li>getProperty</li>
<li>setProperty</li>
</ol>
</li>
<li><p>javaBean</p>
<ol>
<li><p>public修饰class setter getter</p>
</li>
<li><p>空参构造器</p>
</li>
<li><p>成员变量Private</p>
<ol>
<li><p>属性 有同名setter(setName) getter</p>
<p>哪怕类没有这个成员变量，可以理解为属性是一对setter/getter的驼峰方法</p>
</li>
<li><p>成员变量 可以是属性，也可以不是，可以理解为类的变量。</p>
</li>
<li><p>一般情况下属性==成员变量</p>
</li>
</ol>
</li>
</ol>
</li>
</ol>
<h2 id="会话"><a href="#会话" class="headerlink" title="会话"></a>会话</h2><ol>
<li>会话功能：在会话范围内共享数据</li>
<li>一次会话就是从浏览器打开到关闭期间客户端与服务端的请求和响应</li>
<li>http无状态，无法进行数据交换，无法识别身份，</li>
</ol>
<h3 id="cookie-客户端会话技术"><a href="#cookie-客户端会话技术" class="headerlink" title="cookie 客户端会话技术"></a>cookie 客户端会话技术</h3><ol>
<li><p>cookie特点</p>
<ol>
<li>保存在浏览器内存中</li>
<li>key-value,Respones.Header，</li>
<li>可设置存活时间</li>
<li>安全性低</li>
<li>大小有限(每个域名一个大小)</li>
<li>不可跨域性</li>
</ol>
</li>
<li><p>作用</p>
<ol>
<li>登陆记录(欢迎回来，你上一次访问的时间是。。。cookie.set(cookie.getOrDefault(“lastTime”,0)))</li>
<li>页面间数据传递</li>
<li>保存用户信息</li>
</ol>
</li>
<li><p>使用步骤</p>
<ol>
<li><p>创建cookie</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Cookie</span> c<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Cookie</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
<li><p>发送cookie–&gt;想听头 set-cookie:””</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java">response<span class="token punctuation">.</span><span class="token function">addCookie</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
<li><p>获取cookie</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Cookie</span><span class="token punctuation">[</span><span class="token punctuation">]</span>cookies<span class="token operator">=</span>request<span class="token punctuation">.</span><span class="token function">getCookies</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
</ol>
</li>
<li><p>发送多个cookie</p>
<p><img src="https://job-wyg.oss-cn-beijing.aliyuncs.com/image-20211006110443252.png![image-20211006110900739](https://job-wyg.oss-cn-beijing.aliyuncs.com/image-20211006110900739.png" alt="image-20211006110443252"></p>
<p>–&gt;下一次request的时候重复的会被统一(默认用最后一个)</p>
<p><img src="https://job-wyg.oss-cn-beijing.aliyuncs.com/image-20211006110648442.png" alt="image-20211006110648442"></p>
</li>
<li><p>cookie保存时间</p>
<ol>
<li>默认浏览器关闭</li>
<li>持久化存储 cookie.setMaxAge(60<em>60</em>24*30) <ol>
<li>整数：关闭浏览器n秒后才消失，上面是一个月</li>
<li>负数：默认</li>
<li>零：删除此cookie</li>
</ol>
</li>
</ol>
</li>
<li><p>cookie中文问题(tomcat&gt;8)</p>
<p>在浏览器中显示有问题，但是再次发送到java还是可以看到中文</p>
</li>
<li><p>cookie共享问题</p>
<ol>
<li>多个tomcat(服务器)默认情况下是不共享的</li>
<li>可以使用setPath设置范围(“/“)范围最大</li>
</ol>
</li>
</ol>
<h3 id="session-服务端会话技术"><a href="#session-服务端会话技术" class="headerlink" title="session 服务端会话技术"></a>session 服务端会话技术</h3><ol>
<li>特点<ol>
<li>存储一次会话所有的数据</li>
<li>很大，任意类型</li>
<li>基于cookie</li>
<li>服务器关闭前tomcat会自动持久化到本地</li>
</ol>
</li>
<li>原理<ol>
<li>第一次访问 创建session,setId,setAttr</li>
<li>响应到浏览器set-cookie:JSESSIONID</li>
<li>再次访问根据cookie的sessionId获取session</li>
</ol>
</li>
<li>存活时间<ol>
<li>关闭浏览器消失—&gt;可以通过延长cookie存活时期而持久化存储</li>
<li>session钝化—&gt;服务器关闭时持久化(序列化)   tomcat会自动进行—&gt;tomcat/work…./localhost/…/Session.ser</li>
<li>session活化—&gt;服务器读取持久化session到内存</li>
<li>session失效时间<ol>
<li>服务器关闭</li>
<li>自杀:session.invalidate();</li>
<li>默认30分钟web.xml-&gt;&lt;session-config-timeout&gt;</li>
</ol>
</li>
</ol>
</li>
</ol>
<h3 id="token"><a href="#token" class="headerlink" title="token"></a>token</h3>]]></content>
      <categories>
        <category>java</category>
        <category>javaWeb</category>
      </categories>
  </entry>
</search>
