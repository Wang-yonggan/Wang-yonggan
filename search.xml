<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title></title>
    <url>/2021/11/02/javaWeb/%E7%BD%91%E5%85%B3/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2021/09/17/os/linuxCmd/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2021/09/17/os/linuxCmdPlus/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2021/11/04/%E4%B8%AD%E9%97%B4%E4%BB%B6--%E5%87%A0%E6%97%B6%E5%BC%80%E5%A7%8B/nginx/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2021/10/23/%E7%BB%84%E4%BB%B6/%E5%BA%95%E5%B1%82/handler/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2021/10/13/algorithm/%E6%8B%AC%E5%8F%B7%E9%80%BB%E8%BE%91/</url>
    <content><![CDATA[<h3 id="括号逻辑"><a href="#括号逻辑" class="headerlink" title="括号逻辑"></a>括号逻辑</h3><p>1. </p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2021/11/09/db/mysql_other/</url>
    <content><![CDATA[<p>1. </p>
]]></content>
  </entry>
  <entry>
    <title>hadoop的启动</title>
    <url>/2021/09/10/distribute/hadoop%E5%90%AF%E5%8A%A8/</url>
    <content><![CDATA[<h2 id="一、-基本环境"><a href="#一、-基本环境" class="headerlink" title="一、 基本环境"></a>一、 基本环境</h2><ol>
<li><p>获取主机名字 master、s1、s2</p>
</li>
<li><p>时钟同步</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="regexp">/usr/</span>sbin/ntpdate cn.pool.ntp.org</span><br></pre></td></tr></table></figure></li>
<li><p>关闭防火墙</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line">systemctl stop firewalld.service</span><br></pre></td></tr></table></figure>

<span id="more"></span></li>
<li><p>编辑host 以对应ping 如：</p>
<figure class="highlight accesslog"><table><tr><td class="code"><pre><span class="line"><span class="number">10.42.0.93</span> master</span><br><span class="line"><span class="number">10.42.0.94</span> slave01</span><br><span class="line"><span class="number">10.42.0.95</span> slave02</span><br></pre></td></tr></table></figure></li>
<li><p>测试ping是否成功</p>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line">ping <span class="keyword">master</span> <span class="title">-c</span> <span class="number">3</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="二、联机"><a href="#二、联机" class="headerlink" title="二、联机"></a>二、联机</h2><ol>
<li><p>生成公钥</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">ssh-keygen -t rsa</span></span><br></pre></td></tr></table></figure></li>
<li><p>公钥备份文件</p>
<figure class="highlight arcade"><table><tr><td class="code"><pre><span class="line">cat ~<span class="regexp">/.ssh/i</span>d_rsa.pub &gt;&gt; ~<span class="regexp">/.ssh/</span>authorized_keys</span><br></pre></td></tr></table></figure></li>
<li><p>修改文件权限</p>
<figure class="highlight arcade"><table><tr><td class="code"><pre><span class="line">chmod <span class="number">600</span> ~<span class="regexp">/.ssh/</span>authorized_keys</span><br></pre></td></tr></table></figure></li>
<li><p>将专用密钥添加到 ssh-agent 的高速缓存中</p>
<figure class="highlight arcade"><table><tr><td class="code"><pre><span class="line">ssh-add ~<span class="regexp">/.ssh/i</span>d_rsa</span><br></pre></td></tr></table></figure></li>
<li><p>公钥转移到其他机器</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">scp ~<span class="regexp">/.ssh/</span>authorized_keys zkpk<span class="meta">@slave01</span>:~<span class="regexp">/.ssh/</span></span><br></pre></td></tr></table></figure></li>
<li><p>其他机器也生成密钥</p>
</li>
<li><p>测试远程   ssh s1</p>
</li>
</ol>
<h2 id="三、安装java"><a href="#三、安装java" class="headerlink" title="三、安装java"></a>三、安装java</h2><ol>
<li><p>root下解压</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">tar -xzvf <span class="regexp">/home/</span>zkpk<span class="regexp">/tgz/</span>jdk-<span class="number">8</span>u131-linux-x64.tar.gz -C <span class="regexp">/usr/</span>java</span><br></pre></td></tr></table></figure></li>
<li><p>修改环境变量</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">gedit <span class="regexp">/home/</span>zkpk/.bash_profile</span><br><span class="line">	export JAVA_HOME=<span class="regexp">/usr/</span>java<span class="regexp">/jdk1.8.0_131/</span></span><br><span class="line">	export PATH=<span class="variable">$JAVA_HOME</span>/bin:<span class="variable">$PATH</span></span><br><span class="line">source <span class="regexp">/home/</span>zkpk/.bash_profile</span><br></pre></td></tr></table></figure></li>
<li><p>其他机器同样安装</p>
</li>
<li><p>测试java：java -version</p>
</li>
</ol>
<h2 id="四、安装hadoop"><a href="#四、安装hadoop" class="headerlink" title="四、安装hadoop"></a>四、安装hadoop</h2><ol>
<li><p>解压</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">tar -xzvf <span class="regexp">/home/</span>zkpk<span class="regexp">/tgz/</span>hadoop-<span class="number">2.7</span>.<span class="number">3</span>.tar.gz –C <span class="regexp">/home/</span>zkpk</span><br></pre></td></tr></table></figure></li>
<li><p>修改java环境变量</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">gedit <span class="regexp">/home/</span>zkpk<span class="regexp">/hadoop-2.7.3/</span>etc<span class="regexp">/hadoop/</span>hadoop-env.sh</span><br><span class="line"> 	export JAVA_HOME=<span class="regexp">/usr/</span>java<span class="regexp">/jdk1.8.0_131/</span></span><br><span class="line">gedit ~<span class="regexp">/hadoop-2.7.3/</span>etc<span class="regexp">/hadoop/y</span>arn-env.sh</span><br><span class="line">	export JAVA_HOME=<span class="regexp">/usr/</span>java<span class="regexp">/jdk1.8.0_131/</span></span><br></pre></td></tr></table></figure></li>
<li><p>其他配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">1.配置core-site.xml 文件</span><br><span class="line">gedit  ~/hadoop-2.7.3/etc/hadoop/core-site.xml</span><br><span class="line">	<span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line">    <span class="meta">&lt;?xml-stylesheet type=&quot;text/xsl&quot; href=&quot;configuration.xsl&quot;?&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Put site-specific property overrides in this file. --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">name</span>&gt;</span>fs.defaultFS<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">value</span>&gt;</span>hdfs://master:9000<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">name</span>&gt;</span>hadoop.tmp.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">value</span>&gt;</span>/home/zkpk/hadoopdata<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">2.配置hdfs-site.xml文件</span><br><span class="line">gedit  ~/hadoop-2.7.3/etc/hadoop/hdfs-site.xml</span><br><span class="line">    <span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line">    <span class="meta">&lt;?xml-stylesheet type=&quot;text/xsl&quot; href=&quot;configuration.xsl&quot;?&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Put site-specific property overrides in this file. --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.replication<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>2<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">3.配置yarn-site.xml文件</span><br><span class="line">gedit  ~/hadoop-2.7.3/etc/hadoop/yarn-site.xml</span><br><span class="line">    <span class="meta">&lt;?xml version=&quot;1.0&quot;?&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.nodemanager.aux-services<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>mapreduce_shuffle<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>master:18040<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.scheduler.address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>master:18030<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.resource-tracker.address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>master:18025<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.admin.address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>master:18141<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.webapp.address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>master:18088<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">4.配置mapred-site.xml文件</span><br><span class="line">cp ~/hadoop-2.7.3/etc/hadoop/mapred-site.xml.template  ~/hadoop-2.7.3/etc/hadoop/mapred-site.xml</span><br><span class="line">gedit ~/hadoop-2.7.3/etc/hadoop/mapred-site.xml</span><br><span class="line">    <span class="meta">&lt;?xml version=&quot;1.0&quot;?&gt;</span></span><br><span class="line">    <span class="meta">&lt;?xml-stylesheet type=&quot;text/xsl&quot; href=&quot;configuration.xsl&quot;?&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.framework.name<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>yarn<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>配置slaves文件</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">gedit ~<span class="regexp">/hadoop-2.7.3/</span>etc<span class="regexp">/hadoop/</span>slaves</span><br><span class="line">    slave01</span><br><span class="line">    slave02</span><br></pre></td></tr></table></figure></li>
<li><p>创建Hadoop数据目录</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line">mkdir hadoopdata</span><br></pre></td></tr></table></figure></li>
<li><p>将配置好的hadoop文件夹复制到从节点</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">scp</span> -r hadoop-<span class="number">2</span>.<span class="number">7</span>.<span class="number">3</span> zkpk@slave<span class="number">01</span>:~/</span><br></pre></td></tr></table></figure></li>
<li><p>配置环境变量</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">gedit ~/.bash_profile</span><br><span class="line">    #HADOOP</span><br><span class="line">    <span class="builtin-name">export</span> <span class="attribute">HADOOP_HOME</span>=/home/zkpk/hadoop-2.7.3</span><br><span class="line">    <span class="builtin-name">export</span> <span class="attribute">PATH</span>=<span class="variable">$HADOOP_HOME</span>/bin:$HADOOP_HOME/sbin:$PATH</span><br><span class="line">source ~/.bash_profile</span><br></pre></td></tr></table></figure></li>
<li><p>其他机器同样配置环境变量</p>
</li>
<li><p>在master格式化磁盘</p>
<figure class="highlight dos"><table><tr><td class="code"><pre><span class="line">hdfs namenode -<span class="built_in">format</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="五、启动检测"><a href="#五、启动检测" class="headerlink" title="五、启动检测"></a>五、启动检测</h2><ol>
<li>start-all.sh</li>
<li>jps查看</li>
<li><a href="http://master:50070/%E6%9F%A5%E7%9C%8B">http://master:50070/查看</a></li>
<li><img src="https://job-wyg.oss-cn-beijing.aliyuncs.com/image-20210911183155100.png" alt="image-20210911183155100"></li>
</ol>
]]></content>
      <categories>
        <category>hadoop</category>
      </categories>
  </entry>
  <entry>
    <title>mysql优化二</title>
    <url>/2021/11/05/db/mysql%E4%BC%98%E5%8C%962/</url>
    <content><![CDATA[<h1 id="sql语句优化"><a href="#sql语句优化" class="headerlink" title="sql语句优化"></a>sql语句优化</h1><h2 id="selete"><a href="#selete" class="headerlink" title="selete"></a>selete</h2><ol>
<li>selete尽量使用字段而不是*。</li>
</ol>
<h2 id="update、delete"><a href="#update、delete" class="headerlink" title="update、delete"></a>update、delete</h2><ol>
<li><p><a href="https://blog.csdn.net/qq_21454973/article/details/109162528">在 delete 和 update 后面加 limit 1 绝对是个好习惯</a></p>
<blockquote>
<p>比如，在删除执行中，第一条就命中了删除行，如果 SQL 中有 limit 1；这时就 return 了，否则还会执行完全表扫描才结束。</p>
</blockquote>
<span id="more"></span></li>
<li><p>如果是清空表数据建议直接用 truncate，效率上 truncate 远高于 delete。</p>
<blockquote>
<p>truncate 不走事务，不会锁表，也不会生产大量日志写入日志文件；truncate table table_name 后立刻释放磁盘空间，并重置 auto_increment 的值。delete 删除不释放磁盘空间，但后续 insert 会覆盖在之前删除的数据上。 </p>
</blockquote>
</li>
<li><p>丁奇问题</p>
<blockquote>
<p>如果你要删除一个表里面的前 10000 行数据，有以下三种方法可以做到：<br>第一种，直接执行 delete from T limit 10000;<br>第二种，在一个连接中循环执行 20 次 delete from T limit 500;<br>第三种，在 20 个连接中同时执行 delete from T limit 500。</p>
</blockquote>
<ul>
<li><p>第一个方案，一次占用的锁时间较长，可能会导致其他客户端一直在等待资源。</p>
</li>
<li><p>第二个方案，分成多次占用锁，串行执行，不占有锁的间隙其他客户端可以工作，类似于现在多任务操作系统的时间分片调度，大家分片使用资源，不直接影响使用。</p>
</li>
<li><p>第三个方案，自己制造了锁竞争，加剧并发。</p>
</li>
</ul>
</li>
<li><p>锁表问题</p>
<ol>
<li>如果没有索引，update会锁表，如果加了索引，就会锁行</li>
</ol>
</li>
<li><p>数据删除磁盘问题</p>
</li>
</ol>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
  </entry>
  <entry>
    <title>mysql优化</title>
    <url>/2021/10/14/db/mysql%E4%BC%98%E5%8C%96/</url>
    <content><![CDATA[<h3 id="四大方面"><a href="#四大方面" class="headerlink" title="四大方面"></a>四大方面</h3><ol>
<li><p>设计：存储引擎，字段类型，视图，范式与逆范式。</p>
</li>
<li><p>功能：索引，缓存，分区分表。</p>
</li>
<li><p>架构：主从复制，读写分离，负载均衡。</p>
</li>
<li><p>SQL语句：测试，经验。</p>
<span id="more"></span></li>
</ol>
<h3 id="设计"><a href="#设计" class="headerlink" title="设计"></a>设计</h3><ol>
<li>存储引擎<ol>
<li>innodb 形容的是表  <ol>
<li>支持ACID</li>
<li></li>
</ol>
</li>
<li>myisam<ol>
<li>miy文件  索引</li>
</ol>
</li>
</ol>
</li>
</ol>
<h3 id="索引优化"><a href="#索引优化" class="headerlink" title="索引优化"></a>索引优化</h3><ol>
<li><p>索引</p>
<ol>
<li>索引的表象是一个目录</li>
<li>底层原理   [字段值,地址] 某种数据结构的映射<ol>
<li>排好序的数据结构<ol>
<li>二叉树   —&gt; 递增有序的情况    <strong>树高度==n</strong></li>
<li>AVL 平衡二叉树   旋转次数多</li>
<li>红黑树 弱平衡二叉树         弊端: 高度高</li>
<li>B树   扩大横分叉，高度可控</li>
<li>B+树  每个节点从左到右一次递增<ol>
<li>非叶子节点不存数据，只存冗余索引</li>
<li>叶子节点从大到小相互连接</li>
<li>每个节点16KB<ol>
<li>如果满了  节点分裂  高度增加</li>
</ol>
</li>
</ol>
</li>
<li>B+树相对于B树优点<ol>
<li>非叶子节点不带有指向记录的指针，则一个块可以存储更多的索引项，如此可以降低树的高度。</li>
<li>叶子节点之间有指针连接，则在范围扫描时避免了在内部节点来回移动。</li>
</ol>
</li>
<li>B+树搜索过程<ol>
<li>根据冗余索引找到data叶子节点</li>
<li>把data加载到内存 然后二分查找</li>
</ol>
</li>
<li>特别的:   如果只有一层  那么就相当于二分查找 ，但是，但是这意味着把所有的数据加载到内存，内存吃不消。 </li>
<li>hash表<ol>
<li>数组+链表</li>
<li>hash运算—&gt;存到链表(hash冲突直接加在链表尾部)</li>
<li><strong>不支持范围查找</strong></li>
</ol>
</li>
</ol>
</li>
</ol>
</li>
</ol>
</li>
<li><p>索引分类 innodb才有   mylsam没有分类</p>
<ol>
<li><p>聚集(聚簇)索引：存储   (id,adress)</p>
<ol>
<li>索引和数据一起存储 </li>
<li>一个文件 idb</li>
</ol>
</li>
<li><p>非聚集(稀疏)索引： 存储(key,id)</p>
<ol>
<li>索引和数据分开存储 </li>
<li>两个文件 </li>
</ol>
</li>
<li><p>二级索引(稀疏)：数据放的是主键，</p>
<ol>
<li>查完得到主键</li>
<li>再回表去主键索引查询位置</li>
</ol>
</li>
<li><p>联合索引</p>
<ol>
<li><p>底层</p>
</li>
<li><p>最左前缀原则(a,b,c)</p>
<ol>
<li><p>为什么最左前缀</p>
<p>在相同的a下才会排序b</p>
<p><img src="https://job-wyg.oss-cn-beijing.aliyuncs.com/image-20211014212733501.png" alt="image-20211014212733501"></p>
</li>
<li></li>
</ol>
</li>
</ol>
</li>
</ol>
</li>
<li><p>慢sql  查询巨量数据以测试这句sql的效率</p>
</li>
<li><p>explain</p>
</li>
<li><p>文件</p>
<ol>
<li>frm是描抄述了表的结构</li>
<li>MYD保存了表的数据记录</li>
<li>MYI则是表的索引</li>
<li>opt记录数据库的选项</li>
<li>数据库的字符集设置</li>
</ol>
</li>
<li><p>uuid当主键的问题</p>
<ol>
<li>UUID 太长了、占用空间大，<strong>作为主键性能太差</strong>了</li>
<li>UUID 不具有有序性，会导致 B+ 树索引在写的时候有过多的随机写操作</li>
<li>innodb推荐用整形递增  减少B+树索引分裂的次数</li>
</ol>
</li>
<li><p>如果没有设置主键</p>
<ol>
<li>有唯一字段：用这个唯一字段建造B+树</li>
<li>没有唯一 字段：创建隐藏列 这样效率很低</li>
</ol>
</li>
<li><p>索引的建立提高了select效率 降低了update,insert效率</p>
</li>
<li><p>索引的建立</p>
<ol>
<li><p>原则1：需要将选择度高的列放在前面。所谓选择度，即COUNT(DISTINCT(列名))/COUNT(列名)。</p>
<p>比如性别 1  0  就不能建立索引</p>
</li>
<li><p>原则2：较频繁查询的字段创建索引  较频繁更改的字段不建立索引</p>
</li>
<li><p>原则3：不出现在where的字段不建立索引 </p>
</li>
<li><p>必须有主键</p>
</li>
<li><p>原则4：数据量小的不要索引</p>
</li>
<li><p>原则5：字段值长的不建议索引</p>
</li>
</ol>
</li>
<li><h4 id="索引失效"><a href="#索引失效" class="headerlink" title="索引失效"></a>索引失效</h4><ol>
<li><p>前缀原则1  abc%会用索引</p>
</li>
<li><p>前缀原则2  联合索引(a,b,c)会a  ab  abc的方式使用索引</p>
</li>
</ol>
</li>
</ol>
<h3 id="查询优化"><a href="#查询优化" class="headerlink" title="查询优化"></a>查询优化</h3><ol>
<li>in和exist的区别<ol>
<li>exist适合 子查询中表数据大于外查询表中数据的业务场景</li>
<li>in:适合外部表数据大于子查询的表数据的业务场景</li>
</ol>
</li>
<li></li>
</ol>
<h3 id="缓存优化"><a href="#缓存优化" class="headerlink" title="缓存优化"></a>缓存优化</h3><h3 id="分区分表"><a href="#分区分表" class="headerlink" title="分区分表"></a>分区分表</h3><h3 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h3><ol>
<li><p>b+tree和btree的区别<img src="C:\Users\22453\AppData\Roaming\Typora\typora-user-images\image-20211015020343225.png" alt="image-20211015020343225"></p>
</li>
<li></li>
</ol>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ol>
<li><a href="https://www.cnblogs.com/sharpest/p/10390035.html">cnblog</a></li>
<li><a href="https://www.cnblogs.com/sharpest/p/10390035.html">优化10大技巧-cn</a></li>
<li><a href="https://blog.csdn.net/wukuaiyang/article/details/78755097?utm_term=b+%E6%A0%91%E5%92%8C%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE&utm_medium=distribute.pc_aggpage_search_result.none-task-blog-2~all~sobaiduweb~default-0-78755097&spm=3001.4430">索引-B+树-csdn</a></li>
</ol>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
  </entry>
  <entry>
    <title>mysql其他知识</title>
    <url>/2021/10/14/db/mysql%E7%9F%A5%E8%AF%862/</url>
    <content><![CDATA[<h3 id="日志"><a href="#日志" class="headerlink" title="日志"></a>日志</h3><ol>
<li>参考<ol>
<li><a href="https://www.cnblogs.com/du-z/p/11164232.html">cnblog1</a></li>
</ol>
</li>
</ol>
<h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><ol>
<li><p>开启记录执行时间</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">set</span> profiling <span class="operator">=</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure></li>
</ol>
<span id="more"></span>

<h3 id="innodb"><a href="#innodb" class="headerlink" title="innodb"></a>innodb</h3><ol>
<li>[知乎</li>
<li><a href="https://zhuanlan.zhihu.com/p/352153062"></a></li>
</ol>
<h2 id="mysql-锁机制"><a href="#mysql-锁机制" class="headerlink" title="mysql 锁机制"></a>mysql 锁机制</h2><h4 id="乐观锁-version"><a href="#乐观锁-version" class="headerlink" title="乐观锁  version"></a>乐观锁  version</h4><ol>
<li><a href="https://blog.csdn.net/hh1sdfsf56456/article/details/79449714">乐观锁</a></li>
<li></li>
</ol>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
  </entry>
  <entry>
    <title>mysql知识</title>
    <url>/2021/09/17/db/mysql%E7%9F%A5%E8%AF%86/</url>
    <content><![CDATA[<h3 id="大小"><a href="#大小" class="headerlink" title="大小"></a>大小</h3><ol>
<li>varchar(50) 表示最多50个字符，包括汉字</li>
<li>varchar变长，char 定长，定长时间效率高，空间效率差</li>
<li>int(n)中不论n指定为多少，范围都一样-2<del>31</del>2^31-1，都能插入9位数字。n只是用来控制显示而已，如果为int(4)，插入一个1，显示时也会用空格补齐到4个字节  </li>
<li>text 64KB longtext 4G</li>
<li>1k能写大概</li>
</ol>
<span id="more"></span>

<h3 id="in和exists"><a href="#in和exists" class="headerlink" title="in和exists"></a>in和exists</h3><ol>
<li><p><a href="https://blog.csdn.net/codesweetpotato/article/details/109700424">in流程</a></p>
<p>对于 in 查询来说，会先执行子查询，如上边的 t2 表，然后把查询得到的结果和外表 t1 做<a href="https://so.csdn.net/so/search?from=pc_blog_highlight&q=%E7%AC%9B%E5%8D%A1%E5%B0%94%E7%A7%AF">笛卡尔积</a>，再通过条件进行筛选（这里的条件就是指 name 是否相等），把每个符合条件的数据都加入到结果集中。</p>
</li>
<li><p>exists执行流程</p>
<p>对于 exists 来说，是先查询遍历外表 t1 ，然后每次遍历时，再检查在内表是否符合匹配条件，即检查是否存在 name 相等的数据。</p>
</li>
</ol>
<h3 id="join三种"><a href="#join三种" class="headerlink" title="join三种"></a>join三种</h3><ol>
<li><p>简单join 即inner join</p>
<p>复杂度也是最高的，O(mn)</p>
</li>
<li></li>
</ol>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
  </entry>
  <entry>
    <title>mysql设计问题</title>
    <url>/2021/11/07/db/mysql%E8%AE%BE%E8%AE%A1%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h3 id="mysql设计问题"><a href="#mysql设计问题" class="headerlink" title="mysql设计问题"></a>mysql设计问题</h3><p>[toc]</p>
<h2 id="一、逻辑删除"><a href="#一、逻辑删除" class="headerlink" title="一、逻辑删除"></a>一、逻辑删除</h2><ol>
<li><p>常见逻辑删除：is_delete,delete_time</p>
</li>
<li><p>逻辑删除的优缺点</p>
<ol>
<li><p>优点: 方便恢复被删除的数据</p>
</li>
<li><p>缺点:</p>
<ol>
<li><p>查询数据时，所有的查询条件都需要增加deleteTime==null。</p>
</li>
<li><p>不可以使用业务唯一性Id作为数据库表Id，需要增加1个专门的没有逻辑意义的自增长Id作为唯一性Id。</p>
<span id="more"></span></li>
<li><p>业务Id不能建唯一性约束，也不能建唯一索引。</p>
<blockquote>
<p>比如说a入职了，离职了删除了，但是id还在，又入职了，这样就会造成id重复</p>
</blockquote>
</li>
<li><p>增加数据时，判断业务Id是否为重复，需要先做查询，不能利用表的唯一约束。</p>
</li>
<li><p>增加数据时，判断唯一性字段是否重复，需要先做查询，也不能利用表的唯一约束。</p>
</li>
</ol>
</li>
</ol>
</li>
<li><p>第二类逻辑删除：新增一个表，把删除的数据储存在这个表内。</p>
</li>
</ol>
<h2 id="二、视图"><a href="#二、视图" class="headerlink" title="二、视图"></a>二、视图</h2><h2 id="三、触发器"><a href="#三、触发器" class="headerlink" title="三、触发器"></a>三、触发器</h2>]]></content>
      <categories>
        <category>数据库</category>
      </categories>
  </entry>
  <entry>
    <title>mysql配置</title>
    <url>/2021/11/04/db/mysql%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h3 id="修改密码"><a href="#修改密码" class="headerlink" title="修改密码"></a>修改密码</h3><h3 id="允许远程登录"><a href="#允许远程登录" class="headerlink" title="允许远程登录"></a>允许远程登录</h3><ol>
<li><p>新建用户</p>
<p>grant all on <em>.</em> to root@’%’ identified by ‘root’ with grant option;</p>
</li>
<li><p>刷新权限</p>
<p>flush privileges;</p>
<span id="more"></span></li>
<li><p>修改远程密码</p>
<ol>
<li>delete from mysql.user where user = ‘root’ and host = ‘%’;</li>
<li>flush privileges;</li>
<li>重新建立</li>
</ol>
</li>
</ol>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
  </entry>
  <entry>
    <title>redis使用</title>
    <url>/2021/10/06/db/redis/</url>
    <content><![CDATA[<h3 id="技术发展史"><a href="#技术发展史" class="headerlink" title="技术发展史"></a>技术发展史</h3><ol>
<li><p>redis</p>
<ol>
<li>特点<ol>
<li><a href="https://www.jianshu.com/p/f42d5f5c495b">原子性</a></li>
<li><a href="https://www.cnblogs.com/myseries/p/11733861.html">单线程</a></li>
<li><a href="https://blog.csdn.net/xlgen157387/article/details/79470556">为什么说Redis是单线程的以及Redis为什么这么快</a></li>
</ol>
</li>
</ol>
</li>
<li><p>技术分类</p>
<ol>
<li><p>功能性: java jsp tomcat html jdbc linux</p>
</li>
<li><p>性能: nosql java线程 hadoop nginx mq elasticSearch</p>
</li>
<li><p>扩展 struts mybtis  spring springBoot </p>
<span id="more"></span></li>
</ol>
</li>
<li><p>问题</p>
<ol>
<li><p>分布式服务器session共享问题</p>
<ol>
<li><p>放入到cookie，安全性差</p>
</li>
<li><p>session复制，数据冗余</p>
</li>
<li><p>jwt+共享远程nosql，直接放在内存，读取快</p>
</li>
</ol>
</li>
<li><p>数据库大</p>
<ol>
<li>分库分表，读写分离，破坏了业务逻辑</li>
<li>缓存，内存处理，减少IO操作</li>
</ol>
</li>
</ol>
</li>
<li><p>NoSQL(not only sql) 非关系型数据库   k—v</p>
<ol>
<li>特点<ol>
<li>不支持ACID</li>
<li>性能高</li>
<li>原子性</li>
</ol>
</li>
<li>场景</li>
<li>适: 高并发，海量数据，扩展性数据 </li>
<li>不适：事务支持，结构支持</li>
<li>常见NoSQL</li>
<li>Redis<pre><code>1. 支持持久化
    2. 多数据结构
</code></pre>
</li>
<li>MongoDB<pre><code>1. 文档型数据库
    2. json友好型
    3. 支持二进制
</code></pre>
</li>
<li>行数据库 </li>
<li>列数据库 avg ，mean,sum,方便</li>
<li>图数据库</li>
</ol>
</li>
</ol>
<h3 id="reids–linux"><a href="#reids–linux" class="headerlink" title="reids–linux"></a>reids–linux</h3><ol>
<li>各个文件<ol>
<li>benchmark 性能测试</li>
<li>check-aof  修复aof</li>
<li>sentinel  集群</li>
<li>server  启动<br>1. </li>
<li>cli 客户端</li>
</ol>
</li>
<li>操作<ol>
<li>库操作<ol>
<li>切换库 select 1</li>
<li>dbsize数据库大小</li>
<li>flushdb 清空库</li>
</ol>
</li>
<li>key操作<ol>
<li>查看所有 keys *   keys nam*  查看所有 nam开头的*</li>
<li>set k v  get k</li>
<li>exists key</li>
<li>type key</li>
<li>del key</li>
<li>expire key  10  十秒失效  </li>
<li>ttl  key 查看多少米过期  -2 已经过期   -1 永不过期</li>
</ol>
</li>
</ol>
</li>
<li>五大类型<ol>
<li>string（动态String,ArrryList-&gt;扩容，每次1倍，大于1M则每次1M）<ol>
<li>max 512M</li>
<li>set k str  get k</li>
<li>append k 追加</li>
<li>strlen k</li>
<li>setnx  不存在则设置   返回0表示已经存在</li>
<li>incr/decr k  增加/减少1 </li>
<li>incrby/decrby k n  增加/减少n   原子性操作</li>
<li> mset mget msetnx(都不存在才成功)</li>
<li>getrange k begin end    —-&gt;substring</li>
<li>setrange k begin  str       —-&gt;替换覆盖</li>
<li>setex k 100 v  同时设置</li>
<li>getset 取了就换 </li>
</ol>
</li>
<li>list (多值，排序，双向链表，索引差，两头性能高)<ol>
<li>lpush k v1 v2  左是头-头插法  v2 v1</li>
<li>rpush k v1 v2 右是头头插法 v1 v2</li>
<li>lrange k begin end 从左开始取</li>
<li>lpop/rpop  从左/右吐出一个</li>
<li>rpoplpush  右边吐一个放在左边 </li>
<li>index k 0  按下标取</li>
<li>llen</li>
<li>linsert k before/after “str3”  “strn” 在str3 前面插入strn</li>
<li>lrem k before/after “str3”  …</li>
<li>lset k 0 “wang” 把第一个设置为”wang”</li>
</ol>
</li>
<li>set 底层hash 无序 不重复<ol>
<li>sadd k v1 v2</li>
<li>smembers k</li>
<li>sismember k v v是否存在 1true</li>
<li>scard k   返回个数</li>
<li>spop 随机吐出一个</li>
<li>srandmenber k  n随机取出n个</li>
<li>smove k v k2   迁移</li>
<li>交集</li>
<li>并集</li>
<li></li>
</ol>
</li>
<li>hash</li>
<li>zset</li>
</ol>
</li>
<li>原理<ol>
<li>单线程+多路IO复用</li>
<li>list<ol>
<li>quickList<ol>
<li>数据少的时候是连续内存  ziplist</li>
<li>数据多将多个ziplist用链表连接起来</li>
</ol>
</li>
</ol>
</li>
<li></li>
</ol>
</li>
</ol>
<h3 id="Redis6"><a href="#Redis6" class="headerlink" title="Redis6"></a>Redis6</h3><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ol>
<li><a href="https://blog.csdn.net/xlgen157387/article/details/79470556">https://blog.csdn.net/xlgen157387/article/details/79470556</a></li>
</ol>
<h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><ol>
<li>不用keys</li>
</ol>
<h4 id="新的数据类型"><a href="#新的数据类型" class="headerlink" title="新的数据类型"></a>新的数据类型</h4><h4 id="redis新事务"><a href="#redis新事务" class="headerlink" title="redis新事务"></a>redis新事务</h4><h4 id="主从复制"><a href="#主从复制" class="headerlink" title="主从复制"></a>主从复制</h4><h4 id="雪崩"><a href="#雪崩" class="headerlink" title="雪崩"></a>雪崩</h4>]]></content>
      <categories>
        <category>数据库</category>
      </categories>
  </entry>
  <entry>
    <title>mysql其他</title>
    <url>/2021/09/17/db/sql2/</url>
    <content><![CDATA[<h3 id="group-by"><a href="#group-by" class="headerlink" title="group by"></a>group by</h3><ol>
<li><p>聚集user，exam选出用户每场考试的最高分和其他详细信息。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> user_id,exam_id,depart_id,title,<span class="built_in">max</span>(qualify_score) <span class="keyword">from</span> el_paper <span class="keyword">group</span> <span class="keyword">by</span> user_id,exam_id;</span><br></pre></td></tr></table></figure></li>
</ol>
<span id="more"></span>

<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><ol>
<li><p>去重，保留最小的</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DELETE</span></span><br><span class="line"><span class="keyword">FROM</span> testdelete</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">ONE</span> <span class="keyword">IN</span>(<span class="keyword">SELECT</span></span><br><span class="line">               <span class="keyword">ONE</span></span><br><span class="line">             <span class="keyword">FROM</span> (<span class="keyword">SELECT</span></span><br><span class="line">                     <span class="keyword">ONE</span></span><br><span class="line">                   <span class="keyword">FROM</span> testdelete</span><br><span class="line">                   <span class="keyword">GROUP</span> <span class="keyword">BY</span> <span class="keyword">ONE</span></span><br><span class="line">                   <span class="keyword">HAVING</span> <span class="built_in">COUNT</span>(<span class="keyword">ONE</span>) <span class="operator">&gt;</span> <span class="number">1</span>) a)</span><br><span class="line">    <span class="keyword">AND</span> id <span class="keyword">NOT</span> <span class="keyword">IN</span>(<span class="keyword">SELECT</span></span><br><span class="line">                    <span class="operator">*</span></span><br><span class="line">                  <span class="keyword">FROM</span> (<span class="keyword">SELECT</span></span><br><span class="line">                          <span class="built_in">MIN</span>(id)</span><br><span class="line">                        <span class="keyword">FROM</span> testdelete</span><br><span class="line">                        <span class="keyword">GROUP</span> <span class="keyword">BY</span> <span class="keyword">ONE</span></span><br><span class="line">                        <span class="keyword">HAVING</span> <span class="built_in">COUNT</span>(<span class="keyword">ONE</span>) <span class="operator">&gt;</span> <span class="number">1</span>) b)</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="导出导入"><a href="#导出导入" class="headerlink" title="导出导入"></a>导出导入</h3><ol>
<li><p>导出整个数据库<br>mysqldump -u dbuser -p dbname &gt; dbname.sql</p>
</li>
<li><p>导出一个表<br>mysqldump -u dbuser -p dbname users&gt; dbname_users.sql</p>
</li>
<li><p>导出一个数据库结构<br>mysqldump -u dbuser -p -d –add-drop-table dbname &gt;d:/dbname_db.sql<br>参数：-d 没有数据 </p>
<p>参数：–add-drop-table 在每个create语句之前增加一个drop table</p>
</li>
<li><p>导入数据库 use test<br>source d:/dbname.sql</p>
</li>
</ol>
<!--more-->
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
  </entry>
  <entry>
    <title>数据库事务</title>
    <url>/2021/09/24/db/%E4%BA%8B%E5%8A%A1/</url>
    <content><![CDATA[<p>ACID</p>
<p><a href="https://www.cnblogs.com/takumicx/p/9998844.html">数据库事务cnblog</a></p>
<ol>
<li><p>Atomicity 原子性</p>
<ol>
<li>begin</li>
<li>sql1</li>
<li>sql2</li>
<li>commit</li>
<li>构成逻辑整体的这些数据库操作,要么全部执行成功,要么全部不执行。基于以事务为单位执行</li>
</ol>
</li>
</ol>
<span id="more"></span>

<ol start="2">
<li><p>Consistency一致性：正确性，一个一致性转移到另一个一致性，并且拥有完整性约束。</p>
</li>
<li><p>Isolation隔离性：可串行化，即并发执行和串行执行结果一样。</p>
</li>
<li><p>Durability持久性：事务一旦提交，其对数据库的更新是永久的。</p>
<p><img src="https://job-wyg.oss-cn-beijing.aliyuncs.com/image-20210924130355472.png" alt="image-20210924130355472"></p>
</li>
</ol>
<h3 id="—"><a href="#—" class="headerlink" title="—"></a>—</h3><ol>
<li>在事务的ACID特性中,C即一致性是事务的根本追求,而对数据一致性的破坏主要来自两个方面<ol>
<li>事务的并发执行</li>
<li>事务故障或系统故障</li>
</ol>
</li>
<li>数据库系统是通过并发控制技术和日志恢复技术来避免这种情况发生的。</li>
</ol>
<h3 id="各种错误"><a href="#各种错误" class="headerlink" title="各种错误"></a>各种错误</h3><ol>
<li><p>脏读:事务读取了其他事务还没提交的事务</p>
</li>
<li><p>丢失更新:两个事务对相同的值进行更改，造成了一个更改失败。：a=10   q:a=a-10</p>
<p>p:a=a+10  结果a=10</p>
</li>
<li><p>不可重复度读：读了一次A=1，另一个事务对A改变，第二次在读是A=2.</p>
</li>
<li><p>幻读:事务前后数量发生变化。a删除了，另一个事务有插入了一个a，这样数量变了，造成了幻觉。</p>
</li>
</ol>
<h3 id="隔离级别"><a href="#隔离级别" class="headerlink" title="隔离级别"></a>隔离级别</h3><ol>
<li><p>四种隔离级别从高到低依次是：</p>
<ol>
<li><p>读未提交</p>
</li>
<li><p>读已提交</p>
</li>
<li><p>可重复读 mysql 默认rr</p>
</li>
<li><p>创行化</p>
<p><img src="E:\data-ana\ana-notes\experience\db\隔离级别" alt="image-20210924131844559"></p>
</li>
</ol>
</li>
<li><p>事务隔离实现：并发控制</p>
<ol>
<li>基于封锁</li>
<li>基于时间戳</li>
<li>基于有效检查</li>
<li>基于快照</li>
<li></li>
</ol>
</li>
</ol>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
  </entry>
  <entry>
    <title>数据库规范</title>
    <url>/2021/09/24/db/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%A7%84%E8%8C%83/</url>
    <content><![CDATA[<p>[toc]</p>
<h2 id="一、外键"><a href="#一、外键" class="headerlink" title="一、外键"></a>一、外键</h2><ol>
<li><p>每次delete update都需要考虑外键。</p>
</li>
<li><p>阿里巴巴开发规范禁用外键。</p>
</li>
<li><p>每次考虑外键都要检查主外键表，造成了效率低下。</p>
</li>
<li><p>级联删除造成数据不可控（不可追溯）</p>
<span id="more"></span></li>
</ol>
<h2 id="二、范式"><a href="#二、范式" class="headerlink" title="二、范式"></a>二、范式</h2><h3 id="1-1-第一范式-1NF"><a href="#1-1-第一范式-1NF" class="headerlink" title="1.1 第一范式 1NF"></a>1.1 第一范式 1NF</h3><ol>
<li>字段有原子性，不可拆分</li>
</ol>
<h3 id="1-2-第二范式-2NF"><a href="#1-2-第二范式-2NF" class="headerlink" title="1.2 第二范式 2NF"></a>1.2 第二范式 2NF</h3><ol>
<li>必须有主键</li>
<li>非主键必须<strong>完全</strong>依赖于主键，而不能<strong>只</strong>完全依赖于主键的一部分(最小主键原则?)</li>
<li>简单的解释，比如你和一个女生约会建立一张表，不用每条约会记录都记录她的身高、体重，将身高体重单独的存在一张表中供查询即可。</li>
</ol>
<h3 id="1-3-第三范式"><a href="#1-3-第三范式" class="headerlink" title="1.3 第三范式"></a>1.3 第三范式</h3><ol>
<li>任何字段不能由其他字段派生出来，它要求字段没有冗余</li>
<li>去次键原则</li>
<li>非主键不能传递关系  表1 爸爸，儿子，女儿，女儿的衣服  ，最后一个数据就不行，应该添加表2 女儿,女儿的衣服</li>
<li>第三范式说明不直接相关的数据应该拆分到连个表中</li>
</ol>
<h2 id=""><a href="#" class="headerlink" title=""></a></h2>]]></content>
      <categories>
        <category>数据库</category>
      </categories>
  </entry>
  <entry>
    <title></title>
    <url>/2021/10/17/java/JavaNPE%E9%97%AE%E9%A2%98%20nopointExpection/</url>
    <content><![CDATA[<h3 id="NPE问题-nopointExpection"><a href="#NPE问题-nopointExpection" class="headerlink" title="NPE问题 nopointExpection"></a>NPE问题 nopointExpection</h3><ol>
<li>Opthional java8</li>
<li>属性用包装类型   阿里巴巴</li>
</ol>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2021/11/04/java/hashcode%E7%9A%84%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<h3 id="hashcode的由来"><a href="#hashcode的由来" class="headerlink" title="hashcode的由来"></a>hashcode的由来</h3><h3 id="hashcode是否会相等"><a href="#hashcode是否会相等" class="headerlink" title="hashcode是否会相等"></a>hashcode是否会相等</h3>]]></content>
  </entry>
  <entry>
    <title>函数式接口</title>
    <url>/2021/11/02/java/java8%E4%B9%8B%E5%87%BD%E6%95%B0%E5%BC%8F%E6%8E%A5%E5%8F%A3/</url>
    <content><![CDATA[<h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><ol>
<li><p>标准函数式接口在这个包下</p>
<p>java.util.function</p>
</li>
<li><p>@FuntionalInterface</p>
</li>
<li><p>面向函数范式编程(FOP)(SQL)</p>
</li>
<li><p>面向接口编程</p>
</li>
<li><p><strong>面向过程编程（<code>Procedure Oriented</code>、简称<code>PO</code>）</strong> 和 <strong>面向对象编程（<code>Object Oriented</code>、简称<code>OO</code>）</strong> 我们一定听过，然而实际企业级开发里受用更多的一种编程思想那就是：<strong>面向接口编程（<code>Interface-Oriented</code>）</strong>！</p>
</li>
</ol>
<p>&lt;!–&gt;</p>
<h3 id="四大函数式接口"><a href="#四大函数式接口" class="headerlink" title="四大函数式接口"></a>四大函数式接口</h3><ol>
<li><p>Consumer<T> </p>
<p>​    消费型：有参无返回 </p>
<p>​    void accept(T t)</p>
</li>
<li><p>Suppiier<T> 它是一个可以获取任意值的接口而已</p>
<p>​    供给型：无参有返回</p>
<p>​    T get()</p>
</li>
<li><p>Functional&lt;T,R&gt;</p>
<p>​    函数型：处理参数</p>
<p>​    R apply(T t)</p>
</li>
<li><p>Prediate<T></p>
<p>​    断定型：有参判定返回bool</p>
<p>​    boolean test(T t)</p>
</li>
</ol>
<h3 id="我对函数式接口的理解与发现"><a href="#我对函数式接口的理解与发现" class="headerlink" title="我对函数式接口的理解与发现"></a>我对函数式接口的理解与发现</h3><ol>
<li><p>java的函数式接口就是为了弥补java中<strong>万物皆对象</strong>,但函数却不是对象的缺憾而产生的。</p>
<p>比如 一个函数对象</p>
<figure class="highlight coffeescript"><table><tr><td class="code"><pre><span class="line">Supplier&lt; Integer&gt; a = <span class="function"><span class="params">()</span> -&gt;</span> <span class="number">10</span> + <span class="number">1</span>; <span class="regexp">//</span>这个生产者函数就是一个对象。</span><br></pre></td></tr></table></figure></li>
<li><p>传出的函数对象的参数一定是形参或者final引用(不会add,remove,但可以update)的参数，比如</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Paper&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">List&lt;Paper&gt; finalList = list;</span><br><span class="line">map.values().forEach(o -&gt; finalList.addAll(o.values()));</span><br></pre></td></tr></table></figure>

<p>这里就需要用一个list的final引用才能放进lambda表达式</p>
</li>
</ol>
]]></content>
      <categories>
        <category>java</category>
      </categories>
  </entry>
  <entry>
    <title>java8新特性</title>
    <url>/2021/09/29/java/java8%E6%96%B0%E7%89%B9%E6%80%A7/</url>
    <content><![CDATA[<h1 id="java8新特性"><a href="#java8新特性" class="headerlink" title="java8新特性"></a>java8新特性</h1><h3 id="一、lambda-参数式函数-代码更少"><a href="#一、lambda-参数式函数-代码更少" class="headerlink" title="一、lambda(参数式函数) 代码更少"></a>一、lambda(参数式函数) 代码更少</h3><p>fun1(fun2())</p>
<ol>
<li><p>参数式函数，参数式lambda。</p>
</li>
<li><p>java中 lambda是实现了函数的对象，而不像其他语言一样是一个函数。一般用于接口，这个接口只有一个函数需要重写。这个接口的实例就是lambda。</p>
</li>
<li><p>但是用到的lambda还是写的那个重写的函数，也就是说我们需要某个功能的时候，我们可以根据四大函数式接口写出自己的函数，将这个接口传入，就完成了一个功能器。</p>
<span id="more"></span></li>
<li><p>为了完成多功能，所以lambda对象应该是以参数的身份传入到指定函数，以为创建Lambda很简单，代码很少，这样在不改变原函数的情况下就能根据传入的lambda不同而拥有不同的功能，目的就是多态。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">public</span> List <span class="title">filter</span><span class="params">(<span class="keyword">int</span> []nums,Predicate&lt;Integer&gt;predicate)</span></span>&#123;</span><br><span class="line">filter(nums,o-&gt;o&gt;<span class="number">6</span>);</span><br><span class="line">filter(nums,o-&gt;<span class="number">2</span>*o&gt;<span class="number">6</span>);</span><br><span class="line">filter(nums,o-&gt;o*o&gt;<span class="number">6</span>);</span><br><span class="line">filter(nums,o-&gt;<span class="number">1</span>&gt;<span class="number">6</span>);</span><br></pre></td></tr></table></figure></li>
<li><p>创建比较器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//lambda</span></span><br><span class="line">        Comparator&lt;Integer&gt;comparator2=(o1,o2)-&gt;o1.compareTo(o2);</span><br><span class="line">        <span class="comment">//方法引用  lambda 传fun</span></span><br><span class="line">        Comparator&lt;Integer&gt;comparator3= Integer::compareTo;</span><br><span class="line">Arrays.sort(nums,comparator3);</span><br></pre></td></tr></table></figure></li>
<li><p>创建进程</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Runnable runnable2=()-&gt; System.out.println(<span class="string">&quot;rrrr2&quot;</span>);</span><br></pre></td></tr></table></figure></li>
<li><p>lambda优化</p>
<ol>
<li><p>去掉形参类型(类型推断)</p>
<ol>
<li><p>直接传入o1,而不用在前面加integer</p>
</li>
<li><p>int[]nums=new int[]{1,2,3}–&gt;</p>
<p>int[]nums={1,2,3}</p>
</li>
</ol>
</li>
<li><p>去掉return和{} 只有一句的情况</p>
</li>
<li><p>只有一个参数，可以去掉小括号</p>
</li>
</ol>
</li>
<li><p>格式</p>
<ol>
<li>一个参数没返回:obj=x-&gt;fun(x)</li>
<li>无参无返回: obj=()-&gt;fun()</li>
<li>两个参数: obj=(x,y)-&gt;fun(x,y)</li>
<li>有返回: obj=(x,y)-&gt;{fun(x,y) return}</li>
</ol>
</li>
</ol>
<h3 id="二、函数式接口"><a href="#二、函数式接口" class="headerlink" title="二、函数式接口"></a>二、函数式接口</h3><ol>
<li></li>
</ol>
<h3 id="三、方法引用-构造器引用"><a href="#三、方法引用-构造器引用" class="headerlink" title="三、方法引用 构造器引用"></a>三、方法引用 构造器引用</h3><ol>
<li><p>当要传递给lambda操作，已经有实现方法，就可以使用方法引用。</p>
</li>
<li><p>基于lambda</p>
</li>
<li><p>关键：传入的方法的返回类型和参数相同</p>
</li>
<li><p>就好像现在不用自己写函数传入Lambda体了，而是有现成的函数，那么直接传入</p>
<p>类::方法名就ok了。</p>
</li>
<li><p>三种情况+一种构造器</p>
<ol>
<li>类::非静态方法</li>
<li>对象::静态方法</li>
<li>类::非静态方法</li>
<li>构造器引用<ol>
<li>类::new</li>
</ol>
</li>
</ol>
</li>
<li><p>要求：两个函数除了名字不一样，其他都一样</p>
</li>
<li><p>细节</p>
<ol>
<li>不用写入形参，因为类型与参数推断，且要求两函数是一样的，所以没必要写形参。</li>
</ol>
</li>
</ol>
<h3 id="四、stream-api-并行计算"><a href="#四、stream-api-并行计算" class="headerlink" title="四、stream api 并行计算"></a>四、stream api 并行计算</h3><ol>
<li><p>stream:运算 cpu打交道</p>
<p>Collection:集合  内存打交道</p>
</li>
<li><p>类似于SQL语句</p>
</li>
<li><p>作用：</p>
<ol>
<li>查询数据不能用sql的情况,如nosql需要把查询到的数据在java里面进行处理</li>
</ol>
</li>
<li><p>特点：</p>
<ol>
<li>自己不储存(视图)</li>
<li>不会改变原对象，也就是inplace=False</li>
<li>操作延迟，直到终止操作才会执行</li>
</ol>
</li>
<li><p>步骤</p>
<ol>
<li><p>创建</p>
<ol>
<li><p>可迭代对象(即实现迭代接口).stream()</p>
</li>
<li><p>并行：parallelstream()</p>
</li>
<li><p>Arrays.stream(T[]arr)</p>
</li>
<li><p>Stream.of(T..)</p>
</li>
<li><p>生成器</p>
<ol>
<li><p>生成偶数流</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span>&lt;T&gt; <span class="title">iterate</span><span class="params">(T t,计算器)</span></span></span><br><span class="line"><span class="function">Stream.<span class="title">iterate</span><span class="params">(<span class="number">0</span>,t-&gt;t+<span class="number">2</span>)</span></span></span><br></pre></td></tr></table></figure></li>
<li><p>生成随机数流</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Stream.generate(Math::random)</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
</ol>
</li>
<li><p>中间操作{数据处理：}</p>
<ol>
<li><p>筛选与切片</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//筛选</span></span><br><span class="line">stream.filter(a-&gt;a&gt;<span class="number">2</span>)</span><br><span class="line"><span class="comment">//跳过 跳过前三个</span></span><br><span class="line">stream.skip(<span class="number">3</span>)</span><br><span class="line"><span class="comment">//截断 前三个</span></span><br><span class="line">stream.limit(<span class="number">3</span>)</span><br><span class="line"><span class="comment">//去重</span></span><br><span class="line">stream.distinct()</span><br></pre></td></tr></table></figure></li>
<li><p>映射map  (数据转换)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//转换成大写</span></span><br><span class="line">   stream.map(s&gt;s.toUpperCase())</span><br><span class="line">   <span class="comment">//选出名字长度大于三的数据</span></span><br><span class="line">   stream.map(User::getname).filter(name-&gt;name.leangth&gt;<span class="number">3</span>)</span><br><span class="line">   <span class="comment">//摊平</span></span><br><span class="line">   stream.flatMap(mapToStream)</span><br><span class="line">   <span class="comment">//其中mapToStream能够把stream里面的单个对象转换成stream的函数</span></span><br></pre></td></tr></table></figure></li>
<li><p>排序</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">stream.sorted((o1,o2)-&gt;o1.value-o2.value)</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
<li><p>终止操作</p>
<ol>
<li><p>匹配查找</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//所有匹配-&gt;bool</span></span><br><span class="line">stream.addMatch(o-&gt;o.age&gt;<span class="number">18</span>)    </span><br><span class="line"><span class="comment">//任意匹配-&gt;bool</span></span><br><span class="line">stream.anyMatch(o-&gt;o.age&gt;<span class="number">18</span>)</span><br><span class="line"><span class="comment">//第一个元素-&gt;Optional&lt;T&gt;</span></span><br><span class="line">stream.fidFirst()</span><br></pre></td></tr></table></figure></li>
<li><p>其他</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//数量-&gt;long</span></span><br><span class="line">stream.count()</span><br><span class="line"><span class="comment">//最大值-&gt;Optional&lt;T&gt;</span></span><br><span class="line">stream.max((o1,o2)-&gt;o1.value-o2.value)</span><br><span class="line"><span class="comment">//内部迭代</span></span><br><span class="line">stream.foreach(System.out:println)</span><br></pre></td></tr></table></figure></li>
<li><p>规约 reduce</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">stream.reduce(<span class="number">0</span>,(o1,o2)-&gt;o1+o2)</span><br></pre></td></tr></table></figure></li>
<li><p>收集collect(Collector c)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//list</span></span><br><span class="line">stream.collect(Collectors.toList())</span><br><span class="line"><span class="comment">//set</span></span><br><span class="line">stream.collect(Collectors.toSet())    </span><br><span class="line"><span class="comment">//不确定性collection</span></span><br><span class="line">stream.collect(Collectors.toCollection())</span><br></pre></td></tr></table></figure></li>
<li><p>分组</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Map&lt;String, Map&lt;String, Paper&gt;&gt; collect = records.parallelStream().collect(</span><br><span class="line">                Collectors.groupingBy(Paper::getExamId,</span><br><span class="line">                        Collectors.toMap(Paper::getUserId, Function.identity(), (o1, o2) -&gt; (o1.getUserScore() &gt; o2.getUserScore() ? o1 : o2))));</span><br></pre></td></tr></table></figure></li>
<li><p>平均值</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> avg = exams.stream().mapToInt(UserExam::getMaxScore).sum() / exams.size();</span><br></pre></td></tr></table></figure></li>
<li><p>某一属性</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">dictEntityList.stream().map(DictEntity::getName).collect(Collectors.toList());</span><br></pre></td></tr></table></figure></li>
<li><p><a href="https://blog.csdn.net/yihuaiyan/article/details/101050144?utm_term=javastream%E6%B1%82%E5%B9%B3%E5%9D%87%E5%80%BC&utm_medium=distribute.pc_aggpage_search_result.none-task-blog-2~all~sobaiduweb~default-0-101050144&spm=3001.4430">参考</a></p>
</li>
</ol>
</li>
</ol>
</li>
</ol>
<h3 id="optional类-最大减少空指针异常"><a href="#optional类-最大减少空指针异常" class="headerlink" title="optional类 最大减少空指针异常"></a>optional类 最大减少空指针异常</h3><ol>
<li><p>of</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Optional&lt;Student&gt;optionalStudent=Optional.of(student);<span class="comment">//of必须非空</span></span><br><span class="line"><span class="comment">//ofNullable 可空，为empty  </span></span><br><span class="line">Optional&lt;Student&gt;optionalStudent2=Optional.ofNullable(student);</span><br></pre></td></tr></table></figure></li>
<li><p>orElse</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">value != <span class="keyword">null</span> ? value : other</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><ol>
<li><p>接口默认方法</p>
</li>
<li><p>DateTime api</p>
</li>
<li><p>nashorn javascript引擎</p>
</li>
</ol>
<h3 id="函数式接口"><a href="#函数式接口" class="headerlink" title="函数式接口"></a><a href="https://www.runoob.com/java/java8-functional-interfaces.html">函数式接口</a></h3><ol>
<li><p>Function</p>
</li>
<li><p>&lt;T&gt; Function&lt;T, T&gt;  Function.identity()   传</p>
</li>
<li><p>BinaryOperator</p>
<figure class="highlight gcode"><table><tr><td class="code"><pre><span class="line">T apply<span class="comment">(T t, T u)</span>;</span><br><span class="line"><span class="comment">(o1,o2)</span>-&gt;<span class="meta">o1</span>.age&gt;<span class="meta">o2</span>.a? <span class="meta">o1</span> : <span class="meta">o2</span></span><br></pre></td></tr></table></figure></li>
<li><p>BiFunction&lt;T, U, R&gt;</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function">R <span class="title">apply</span><span class="params">(T t, U u)</span></span>;</span><br></pre></td></tr></table></figure></li>
<li><p>ToIntFunction<T> </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">applyAsInt</span><span class="params">(T value)</span></span>;</span><br><span class="line">Student::getAge</span><br><span class="line">o-&gt;o.getAge()    </span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="我对Lambda的运用"><a href="#我对Lambda的运用" class="headerlink" title="我对Lambda的运用"></a>我对Lambda的运用</h3><ol>
<li><p>类–&gt;映射string–&gt;加到listString</p>
<pre><code><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">result.getAllErrors().stream().map(DefaultMessageSourceResolvable::getDefaultMessage).forEach(list::add);</span><br></pre></td></tr></table></figure>
</code></pre>
</li>
<li><p>取出每组最大值</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//并行流 聚集分组 得最大值</span></span><br><span class="line">Map&lt;String, ConcurrentMap&lt;String, Paper&gt;&gt; map = records.stream().collect(</span><br><span class="line">    Collectors.groupingBy(Paper::getExamId,</span><br><span class="line">                          Collectors.toConcurrentMap(Paper::getUserId, Function.identity(), (o1, o2) -&gt; (o1.getUserScore() &gt; o2.getUserScore() ? o1 : o2))));</span><br></pre></td></tr></table></figure></li>
<li></li>
</ol>
]]></content>
      <categories>
        <category>java高阶</category>
      </categories>
  </entry>
  <entry>
    <title>optional类</title>
    <url>/2021/11/02/java/java8%E4%B9%8Boptional/</url>
    <content><![CDATA[<h3 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h3><ol>
<li>```java<br>private final T value;//值<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="number">2</span>. ```java</span><br><span class="line">   <span class="keyword">private</span> <span class="built_in">static</span> <span class="keyword">final</span> Optional<span class="meta">&lt;?</span>&gt; <span class="keyword">EMPTY</span> = <span class="keyword">new</span> Optional&lt;&gt;();<span class="comment">//空值常量</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="API"><a href="#API" class="headerlink" title="API"></a>API</h3><ol>
<li><p>构建：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Optional.of()<span class="comment">// 不能传null</span></span><br><span class="line">Optional.ofNullable() <span class="comment">//可以传null</span></span><br><span class="line">Optional.empty()<span class="comment">//返回一个空的optional</span></span><br></pre></td></tr></table></figure></li>
<li><p> 检查</p>
</li>
</ol>
   <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">o.isPresent() <span class="comment">//判断是否存在值</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li><p>取值</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">o.get()  <span class="comment">//如果o为null就会报错</span></span><br><span class="line">o.orElse(abc)<span class="comment">// 取值，如果为Null，返回同类对象abc</span></span><br></pre></td></tr></table></figure>

<span id="more"></span></li>
<li><p>lambda</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">o.ifPresent(s-&gt;System.out.println(s))<span class="comment">//消费者函数 consumer void accept (T t)</span></span><br><span class="line">o.orElseGet(Supplier&lt;? extends T&gt; other)   <span class="comment">// 生产者函数 supplier  T get()</span></span><br><span class="line">o.filter(Predicate&lt;? <span class="keyword">super</span> T&gt; predicate) <span class="comment">//检测者函数 Boolean test(T t)，如果为false就会变null</span></span><br><span class="line">o.map(Function&lt;? <span class="keyword">super</span> T, ? extends U&gt; mapper) <span class="comment">//映射函数Function R apply(T t) 转换类型</span></span><br></pre></td></tr></table></figure></li>
<li><p>重写方法</p>
<ol>
<li><p>判等</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">equals(object o)</span><br><span class="line">--&gt;Object.equals(value,o.value)</span><br><span class="line">----&gt;<span class="keyword">return</span> v1==v2||v1.equals(v2)</span><br></pre></td></tr></table></figure></li>
<li><p>toString</p>
</li>
</ol>
</li>
</ol>
]]></content>
      <categories>
        <category>java</category>
      </categories>
  </entry>
  <entry>
    <title>java2</title>
    <url>/2021/09/24/java/java2/</url>
    <content><![CDATA[<h3 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h3><ol>
<li>接口基础<ol>
<li><p>接口继承接口，方法重复只需要重写一个就ok</p>
</li>
<li><p>接口可以有default方法</p>
</li>
<li><p>接口可以有static方法</p>
<span id="more"></span></li>
</ol>
</li>
</ol>
<!-- more --

2. 接口继承
   1. 两个接口Animal<--Cat
   2. Cat ani= new Animal可以通过
   3. 但是如果调用Cat的新增方法就会报错。



### static

1. 类的所有方法都能访问static方法

2. 类的所有方法都能访问static变量

3. static方法不能访问非static方法

4. static方法不能访问非static变量

   <figure class="highlight actionscript"><table><tr><td class="code"><pre><span class="line">这就好像<span class="keyword">static</span>的东西都无私奉献出来了，但他却置身事外，不过问q</span><br></pre></td></tr></table></figure>


<h3 id="protected"><a href="#protected" class="headerlink" title="protected"></a>protected</h3><ol>
<li>protected权限就是对包的限定</li>
<li>例子：<ol>
<li>clone方法是protected的，如果不重写，那么永远实例对象都不能用(除了这个类自带的方法，包括main方法能有权利用到，其他都没这个权力)，</li>
</ol>
</li>
<li>在其他包创建实例，没有能力用到这个类的protected。</li>
<li>不同包的B继承了A那么，B如果不重写protected，那么除非在A的包下创建实例之外，就永远访问不到protected</li>
<li>关键<ol>
<li>自己类里面能用所有的方法(除了static不饿能访问非static方法)</li>
<li>对于protected，包的概念应该相对于类成员来讲的，而不是相对于类来讲的，也就是说如果在这个protected成员所在的包创建的实例能够调用protected方法。</li>
<li>不同包下创建的实例就不能调用这个protected成员。</li>
</ol>
</li>
</ol>
<h3 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h3><h3 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h3><ol>
<li><p> 菱形运算符&lt;&gt;</p>
</li>
<li><p>定义(我需要)</p>
<ol>
<li><p>接口</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="symbol">ReadListener</span>&lt;<span class="symbol">T</span>&gt;</span><br></pre></td></tr></table></figure></li>
<li><p>类</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="symbol">AnalysisEventListener</span>&lt;<span class="symbol">T</span>&gt;</span><br></pre></td></tr></table></figure></li>
<li><p>方法</p>
<figure class="highlight delphi"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span>&lt;T&gt; T copyByClass(<span class="keyword">Object</span> src,<span class="keyword">Class</span> x,<span class="keyword">Class</span> target) </span><br></pre></td></tr></table></figure>

<ol>
<li><p>如果这两个class参数都不指定T 那么就会返回一个Object</p>
</li>
<li><p>如果是</p>
<figure class="highlight delphi"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span>&lt;T&gt; T copyByClass(<span class="keyword">Object</span> src,<span class="keyword">Class</span> x,<span class="keyword">Class</span>&lt;T&gt; target) </span><br></pre></td></tr></table></figure></li>
<li><p>那么返回对象就是target类</p>
</li>
</ol>
</li>
</ol>
</li>
<li><p>传入</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"><span class="module-access"><span class="module"><span class="identifier">BeanMapper</span>.</span></span>copy<span class="constructor">ByClass(<span class="params">studentVO</span>, Integer.TYPE,Student.<span class="params">class</span>)</span>;</span><br></pre></td></tr></table></figure></li>
<li><p>如果没有T，那么就只能返返回Object</p>
</li>
<li><p>也就是说&lt;&gt;菱形运算符就是为了规范返回与传入，全部Object一堆乱+强制类型转换</p>
</li>
</ol>
]]></content>
      <categories>
        <category>java</category>
      </categories>
  </entry>
  <entry>
    <title>java-web</title>
    <url>/2021/10/31/java/java_web/</url>
    <content><![CDATA[<h3 id="web-网页"><a href="#web-网页" class="headerlink" title="web(网页)"></a>web(网页)</h3><ol>
<li>静态web <ol>
<li>html css</li>
<li>静态文件</li>
<li>模板引擎</li>
<li>即所有的数据都不变化</li>
</ol>
</li>
<li>动态web 这个叫javaWeb<ol>
<li><p>提供给人的数据会根据用户的请求而会变化</p>
<span id="more"></span></li>
</ol>
</li>
<li>web的组成<ol>
<li>html css js</li>
<li>jsp servlet</li>
<li>java</li>
<li>jar</li>
<li>配置文件</li>
<li>服务器</li>
</ol>
</li>
</ol>
<h3 id="javaWeb项目结构"><a href="#javaWeb项目结构" class="headerlink" title="javaWeb项目结构"></a>javaWeb项目结构</h3><ol>
<li><p>文件结构</p>
<ol>
<li>根目录(parent)<ol>
<li>WEN-INF目录<ol>
<li>web.xml:web核心配置</li>
<li>Classes:字节码文件（java编译后）</li>
<li>lib:依赖jar包</li>
</ol>
</li>
</ol>
</li>
</ol>
</li>
<li><p>web+idea</p>
<ol>
<li><p>启动idea,配置启 添加本地tomcat</p>
<p>配置</p>
<ol>
<li>虚拟目录</li>
<li>端口</li>
</ol>
</li>
<li><p>添加facet的Web</p>
<ol>
<li>配置文件path:web.xml</li>
<li>资源目录 path:webapp</li>
</ol>
</li>
<li><p>在启动配置的tomcat的部署下方配置上下文以配置路径</p>
</li>
<li><p>热部署–&gt;debug方式启动</p>
</li>
<li><p>右键new servlet</p>
<p>javaProject.iml/pom.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">sourceRoots</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">root</span> <span class="attr">url</span>=<span class="string">&quot;file://$MODULE_DIR$/src&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">root</span> <span class="attr">url</span>=<span class="string">&quot;file://$MODULE_DIR$/src/main/java&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">sourceRoots</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ol>
</li>
</ol>
<h3 id="一些理解"><a href="#一些理解" class="headerlink" title="一些理解"></a>一些理解</h3><ol>
<li>tomcat，</li>
<li>servlet 一种规范，实现这个规范的Class能够随时接受Requeset,Response，就好象一直运行在tomcat上一样。</li>
<li>request 一种规范，将浏览器的请求数据进行封装，其中httoRequest将http协议的请求进行封装，这个封装体可以把这些数据到处共享。</li>
<li>response</li>
<li>其他<ol>
<li>@WebServlet(“”)请求模式路径</li>
<li></li>
</ol>
</li>
</ol>
<h3 id="issue"><a href="#issue" class="headerlink" title="issue"></a>issue</h3><ol>
<li><p>Request请求参数乱码</p>
<ol>
<li><p>tomcat&gt;8 get方式不会乱码(url)</p>
</li>
<li><p>post(stream)-&gt;设置流的编码–&gt;</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">req.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
<li><p>Response设置编码</p>
</li>
</ol>
]]></content>
      <categories>
        <category>javaWeb</category>
      </categories>
  </entry>
  <entry>
    <title>java分析1</title>
    <url>/2021/10/13/java/java%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<h3 id="数组-列表的for-each"><a href="#数组-列表的for-each" class="headerlink" title="数组-列表的for-each"></a>数组-列表的for-each</h3><ol>
<li><p>数组</p>
<ol>
<li><p>源代码1</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (Student student : students) &#123;student=students2[<span class="number">0</span>];&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>反编译1</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(var5 = <span class="number">0</span>; var5 &lt; var4; ++var5) &#123;</span><br><span class="line">            Student var10000 = var3[var5];</span><br><span class="line">            var6 = var2[<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<span id="more"></span></li>
<li><p>源代码2</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (Student student : students) &#123;</span><br><span class="line">           System.out.println(student);</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure></li>
<li><p>反编译2</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(var5 = <span class="number">0</span>; var5 &lt; var4; ++var5) &#123;</span><br><span class="line">            var6 = var3[var5];</span><br><span class="line">    System.out.println(var6);&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
<li><p>List</p>
<ol>
<li><p>修改1</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">students.forEach(o-&gt;o=s);</span><br><span class="line"><span class="comment">//编译后</span></span><br><span class="line">var0.forEach((var1x) -&gt; &#123;&#125;);</span><br></pre></td></tr></table></figure></li>
<li><p>修改2</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (Student student : students) student=s;</span><br><span class="line"><span class="comment">//反编译后</span></span><br><span class="line">Iterator var2;</span><br><span class="line">Student var3;</span><br><span class="line"><span class="keyword">for</span>(var2 = var0.iterator(); var2.hasNext(); var3 = (Student)var2.next()) &#123;&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>输出1</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">students.forEach(o-&gt; System.out.println(s));</span><br><span class="line"><span class="comment">//反编译后</span></span><br><span class="line">var0.forEach((var1x) -&gt; &#123;System.out.println(var1);&#125;);</span><br></pre></td></tr></table></figure></li>
<li><p>输出2</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span>(var2.hasNext()) &#123;var3 = (Student)var2.next();System.out.println(var3);&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>list.foreach(id-&gt;xx)不能continue break return</p>
</li>
</ol>
</li>
</ol>
<h3 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h3><ol>
<li>泛型擦除</li>
</ol>
<h3 id="instanceof的原理"><a href="#instanceof的原理" class="headerlink" title="instanceof的原理"></a>instanceof的原理</h3><ol>
<li>​        用法 obj instanceof clazz   obj是否为clazz的实例，或者是他的或者实现这个接口，</li>
<li></li>
</ol>
]]></content>
      <categories>
        <category>java</category>
      </categories>
  </entry>
  <entry>
    <title>java操作</title>
    <url>/2021/10/30/java/java%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<h3 id="路径问题"><a href="#路径问题" class="headerlink" title="路径问题"></a>路径问题</h3><ol>
<li><p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.out.println(<span class="string">&quot;java_home:&quot;</span>  + System.getProperty( <span class="string">&quot;java.home&quot;</span> ));<span class="comment">//D:\java\jdk8u302-b08\jre</span></span><br><span class="line">    System.out.println(<span class="string">&quot;user_name:&quot;</span>  + System.getProperty( <span class="string">&quot;user.name&quot;</span> ));<span class="comment">//22453</span></span><br><span class="line">    System.out.println(<span class="string">&quot;user_home:&quot;</span>  + System.getProperty( <span class="string">&quot;user.home&quot;</span> ));<span class="comment">//C:\Users\22453</span></span><br><span class="line">    System.out.println(<span class="string">&quot;user_dir:&quot;</span>  + System.getProperty( <span class="string">&quot;user.dir&quot;</span> ));<span class="comment">//D:\project\boot-test1</span></span><br><span class="line">    System.out.println(ClassLoader.getSystemResource(<span class="string">&quot;&quot;</span>));<span class="comment">//file:/D:/project/boot-test1/target/classes/</span></span><br><span class="line">    System.out.println(Constant.class.getClassLoader().getResource(<span class="string">&quot;&quot;</span>));<span class="comment">//同上</span></span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>java</category>
      </categories>
  </entry>
  <entry>
    <title>java常用工具类源码</title>
    <url>/2021/10/04/java/java%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB/</url>
    <content><![CDATA[<h3 id="比较器Comparator"><a href="#比较器Comparator" class="headerlink" title="比较器Comparator"></a>比较器Comparator</h3><ol>
<li><p>Arrays.sort(users,new Comparator)</p>
<p>-&gt;TimSort.sort(user,0,length,comparator)</p>
<p>-&gt;if(len&lt;32)</p>
<p>​    –&gt;i++找到合适开始index</p>
<p>​    –&gt;2进制插入排序binarySort(a,index,length,c)</p>
<p>​    –&gt;这是对少量元素进行排序的最佳方法，它需</p>
</li>
</ol>
<span id="more"></span>

<ol start="2">
<li><p>要O（n logn）比较，但需要O（n^2）数据移动（最坏情况</p>
<p>-&gt;else -&gt;Timsort</p>
</li>
<li><p>Arrays.sort(int[])–&gt;优化的快排</p>
</li>
</ol>
<h3 id="org-apache-logging-log4j-util-Strings-final"><a href="#org-apache-logging-log4j-util-Strings-final" class="headerlink" title="org.apache.logging.log4j.util.Strings(final)"></a>org.apache.logging.log4j.util.Strings(final)</h3><ol>
<li><p>isEmpty</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">return</span> cs == <span class="keyword">null</span> || cs.length() == <span class="number">0</span>;</span><br></pre></td></tr></table></figure></li>
<li><p>isBlank 是否是空白</p>
</li>
</ol>
<h3 id="java-lang"><a href="#java-lang" class="headerlink" title="java.lang"></a>java.lang</h3><ol>
<li><p>final class</p>
<ol>
<li><p>String</p>
<ol>
<li><p>charAt,indexOf,compareTo,concat(str),contain,equals,endsWith,ifEmpty</p>
<p>replace,split</p>
</li>
<li><p>copyValueOf(),valueOf(char[],begin,length),valueOf(基本类型)</p>
</li>
<li><p>subString(begin,end),toLowerCase,trim</p>
</li>
</ol>
</li>
<li><p>Character</p>
<ol>
<li>equals,isLetter是否是一个字母,isLowLetter是否小写字母，toLowCase,compareTo</li>
<li>digit</li>
</ol>
</li>
<li><p>Object</p>
<ol>
<li><p>final native getClass 获得运行时Class而非String/类 com.wyg.entity.user,也可能是他的子类。</p>
</li>
<li><p>native clone</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">x.clone()!=x</span><br><span class="line">x.clone().getClass()==x</span><br><span class="line">x.clone().equal(<span class="string">&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure></li>
<li><p>native hashcode</p>
</li>
<li><p>可重写：toString,equals</p>
</li>
</ol>
</li>
<li><p>java.util.Objects  //对Object对象处理的方法类</p>
<ol>
<li><p>深度判等</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">deepEquals(Object a, Object b)</span><br><span class="line"><span class="keyword">if</span> (a == b)</span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (a == <span class="keyword">null</span> || b == <span class="keyword">null</span>)</span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">	<span class="keyword">return</span> Arrays.deepEquals0(a, b);</span><br></pre></td></tr></table></figure></li>
<li></li>
</ol>
</li>
<li><p>System</p>
<ol>
<li><p>获取系统信息，修改系统信息，标准输入输出流，加载文件、库。</p>
</li>
<li><p>native void arraycopy(src[],begin1,dest[],begin2,length)</p>
</li>
<li><p>exit退出</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">exit</span><span class="params">(<span class="keyword">int</span> status)</span> </span>&#123;</span><br><span class="line">    Runtime.getRuntime().exit(status);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>getProperties获取当前系统信息</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">os.version</span>=<span class="string">10.0, </span></span><br><span class="line"><span class="meta">os.arch</span>=<span class="string">amd64,</span></span><br><span class="line"><span class="meta">os.name</span>=<span class="string">Windows 10, sun.jnu.encoding=GBK, </span></span><br><span class="line"><span class="meta">file.encoding</span>=<span class="string">UTF-8, </span></span><br><span class="line"><span class="meta">user.language</span>=<span class="string">zh,</span></span><br><span class="line"><span class="meta">user.dir</span>=<span class="string">D:\java\新特性, </span></span><br><span class="line"><span class="meta">user.country</span>=<span class="string">CN,</span></span><br><span class="line"><span class="meta">user.name</span>=<span class="string">22453, </span></span><br><span class="line"><span class="meta">user.home</span>=<span class="string">C:\Users\22453, </span></span><br><span class="line"><span class="meta">user.timezone</span>=<span class="string">Asia/Shanghai, </span></span><br><span class="line"><span class="meta">java.runtime.name</span>=<span class="string">OpenJDK Runtime Environment, </span></span><br><span class="line"><span class="meta">java.vm.name</span>=<span class="string">OpenJDK 64-Bit Server VM, </span></span><br><span class="line"><span class="meta">java.vm.specification.name</span>=<span class="string">Java Virtual Machine Specification,</span></span><br><span class="line"><span class="meta">java.runtime.version</span>=<span class="string">1.8.0_302-b08, java.awt.graphicsenv=sun.awt.Win32GraphicsEnvironment, java.endorsed.dirs=D:\java\jdk8u302-b08\jre\lib\endorsed,</span></span><br><span class="line"><span class="meta">java.io.tmpdir</span>=<span class="string">C:\Users\22453\AppData\Local\Temp\,</span></span><br><span class="line"><span class="meta">java.library.path</span>=<span class="string">cmd.path</span></span><br><span class="line"><span class="meta">java.specification.name</span>=<span class="string">Java Platform API Specification, </span></span><br><span class="line"><span class="meta">java.class.version</span>=<span class="string">52.0,</span></span><br><span class="line"><span class="meta">java.vm.specification.version</span>=<span class="string">1.8, </span></span><br><span class="line"><span class="meta">java.home</span>=<span class="string">D:\java\jdk8u302-b08\jre,</span></span><br><span class="line"><span class="meta">java.version</span>=<span class="string">1.8.0_302, </span></span><br><span class="line"><span class="meta">java.vendor</span>=<span class="string">Temurin,</span></span><br><span class="line"><span class="meta">sun.cpu.endian</span>=<span class="string">little, </span></span><br><span class="line"><span class="meta">sun.java.launcher</span>=<span class="string">SUN_STANDARD, </span></span><br><span class="line"><span class="meta">sun.desktop</span>=<span class="string">windows,</span></span><br><span class="line"><span class="meta">sun.boot.library.path</span>=<span class="string">D:\java\jdk8u302-b08\jre\bin, </span></span><br><span class="line"><span class="meta">sun.cpu.isalist</span>=<span class="string">amd64&#125;</span></span><br></pre></td></tr></table></figure></li>
</ol>
</li>
<li><p>Math</p>
</li>
<li></li>
</ol>
</li>
<li><p>class</p>
<ol>
<li>interface Runable</li>
<li>Thread implements Runnable<ol>
<li>static sleep 当前线程休息</li>
<li>start,调用run</li>
<li>getId,getName</li>
<li>static currentThread,返回当前线程</li>
<li></li>
</ol>
</li>
<li>class Package implements java.lang.reflect.AnnotatedElemen–单例</li>
</ol>
</li>
<li><p>特殊类：</p>
<ol>
<li><p>异常类class Throwable implements Serializable</p>
<ol>
<li>getMassage</li>
<li>printStackTrace</li>
</ol>
</li>
<li><p>final Void</p>
<ol>
<li><p>结合native方法构成关键字</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">native</span> Class&lt;?&gt; getPrimitiveClass(String name);</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
<li><p>final Class&lt;T&gt;</p>
<ol>
<li><p>结合native方法构成关键字</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">native</span> Class&lt;?&gt; getPrimitiveClass(String name);</span><br></pre></td></tr></table></figure></li>
<li><p>T newInstance 创造实例</p>
</li>
<li></li>
</ol>
</li>
</ol>
</li>
</ol>
<h3 id="sun-reflect"><a href="#sun-reflect" class="headerlink" title="sun.reflect"></a>sun.reflect</h3>]]></content>
      <categories>
        <category>java</category>
      </categories>
  </entry>
  <entry>
    <title>java分析3</title>
    <url>/2021/10/13/java/java%E7%89%B9%E6%AE%8A%E5%B1%9E%E6%80%A7/</url>
    <content><![CDATA[<h3 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h3><ol>
<li><p>方法重构</p>
<ol>
<li><p>不同return 不同参  可行</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">t</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">t</span><span class="params">(<span class="keyword">int</span> a)</span></span>&#123;<span class="keyword">return</span> <span class="number">1</span>;&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>不同类型同参  不行</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">t</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">t</span><span class="params">()</span></span>&#123;<span class="keyword">return</span> <span class="number">1</span>;&#125;</span><br></pre></td></tr></table></figure>

<span id="more"></span></li>
<li><p>继承重构也是</p>
</li>
<li><p>所以带有@Data的两个继承类，属性能覆盖，但是如果int A.a  String B.a 就会报错，因为A是int getA()</p>
<p>而B是String getA()。</p>
</li>
</ol>
</li>
<li></li>
</ol>
]]></content>
      <categories>
        <category>java</category>
      </categories>
  </entry>
  <entry>
    <title>java知识</title>
    <url>/2021/10/05/java/java%E7%9F%A5%E8%AF%86/</url>
    <content><![CDATA[<h3 id="java分析"><a href="#java分析" class="headerlink" title="java分析"></a>java分析</h3><ol>
<li><p>基本代码分析</p>
<ol>
<li>调试–栈</li>
<li>语法糖、注解等：javac编译+javap反编译</li>
</ol>
</li>
<li><p>判断两个obj是否同类  print obj.getClass</p>
</li>
<li><p>判断两个obj是否一样  print   obj.hashcode  但是可能hash碰撞</p>
</li>
<li><p>web功能分析：</p>
<ol>
<li><p>F12</p>
</li>
<li><p>Postman Swagger RestfulTools</p>
<span id="more"></span></li>
</ol>
</li>
</ol>
<h2 id="类"><a href="#类" class="headerlink" title="类"></a>类</h2><h4 id="私有构造"><a href="#私有构造" class="headerlink" title="私有构造"></a>私有构造</h4><ol>
<li><p>特点：不能实例化，不能被继承，常用于被实例化一次的类(单例模式)</p>
</li>
<li><p>两种方式拿到单例</p>
<ol>
<li><p>puvlic static成员变量</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Elvis</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Elvis INSTANCE = <span class="keyword">new</span> Elvis();</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Elvis</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>private static成员变量，使用static方法返回</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Elvis</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Elvis INSTANCE = <span class="keyword">new</span> Elvis();</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Elvis</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Elvis <span class="title">getInstance</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> INSTANCE;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>作用：防止实例化和子类化，常用在util类,常量类，我们一般用这些类static方法而非他的实例，</p>
</li>
</ol>
</li>
</ol>
<h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><ol>
<li><p>强制转换本着宁多勿少的原则，java.lang.ClassCastException运行时异常</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Users obj= (Users) <span class="keyword">new</span> Object();</span><br></pre></td></tr></table></figure></li>
</ol>
<!--more-->

<h3 id="java私有构造作用"><a href="#java私有构造作用" class="headerlink" title="java私有构造作用"></a>java私有构造作用</h3><h3 id="java四大域对象-转载"><a href="#java四大域对象-转载" class="headerlink" title="java四大域对象-转载"></a><a href="https://blog.csdn.net/u014253011/article/details/85718649">java四大域对象-转载</a></h3><ol>
<li><p>request HttpServletContext </p>
<ol>
<li><p>生命周期：</p>
<p>在Service方法调用前由服务器创建，传入service方法。整个请求结束，request生命结束。<br>用户发送一个请求，开始，服务器返回响应，请求结束，生命周期结束；</p>
</li>
<li><p>作用范围：整个请求链（请求转发也存在）/一次请求转发的范围</p>
</li>
<li><p>作用：获取请求数据，共享数据，请求转发。</p>
</li>
</ol>
</li>
<li><p>session HttpSession</p>
<ol>
<li><p>生命周期</p>
<p>在第一次调用request.getSession()方法时，服务器会检查是否已经有对应的session，如果没有就在内存中创建一个session并返回。<br>（1）当一段时间内session没有被使用（默认为30分钟），则服务器会销毁该session。<br>（2）如果服务器非正常关闭，没有到期的session也会跟着销毁。<br>（3）如果调用session提供的invalidate()，可以立即销毁session。</p>
</li>
<li></li>
</ol>
</li>
<li><p>application ServletContext</p>
<ol>
<li>生命周期：整个web服务</li>
<li>作用范围：整个web应用</li>
<li>作用：<ol>
<li>读取配置文件</li>
<li>在不同Servlet 之间转发</li>
</ol>
</li>
</ol>
</li>
<li><p>page(jsp)   pageContext</p>
<ol>
<li>可以作为入口对象获取其他三大域对象的引用，获取其所有域中的数据</li>
<li>作用于整个JSP页面，是四大作用域中最小的一个</li>
</ol>
</li>
<li><p>特点</p>
<ol>
<li>之所以他们是域对象，原因是他们都内置了map集合，都有setAttribute和getAttribute方法。</li>
<li>都有生命周期，servlet{init,service,destory}也有生命周期。</li>
</ol>
</li>
<li><p>如果一个数据只在当前jsp页面使用，可以使用pageContext域</p>
<p>如果一个数据，除了在当前Servlet中使用，还要在请求转发中使用，使用request域</p>
<p>如果一个数据，除了现在我自己要用，过一会我自己还要用，存在session域</p>
<p>如果一个数据，除了我自己用其他人也要用，存在ServleContext域中</p>
</li>
<li><p>域对象：能够在自己的作用范围共享数据。</p>
</li>
</ol>
<h3 id="java9大隐式对象"><a href="#java9大隐式对象" class="headerlink" title="java9大隐式对象"></a>java9大隐式对象</h3><ol>
<li><p>Session: 主要用于来分别保存每个用户信息，与请求关联的对话;</p>
</li>
<li><p>Request: 代表请求对象，主要用于接受客户端通过HTTP协议连接传输到服务器端的数据;</p>
</li>
<li><p>Response: 代表响应对象，主要用于向客户端发送数据;</p>
</li>
<li><p>out: 主要用于向客户端输出数据；</p>
</li>
<li><p>application: 主要用于保存用户信息，代码片段的运行环境;</p>
</li>
<li><p>pageContext: 管理网页属性;</p>
<ol>
<li>可以作为入口对象获取其他八大隐式对象的引用</li>
</ol>
</li>
<li><p>config: 代码片段配置对象，表示Servlet的配置;</p>
</li>
<li><p>page:处理jsp网页;</p>
</li>
<li><p>Exception:处理jsp文件执行时发生的错误和异常</p>
</li>
</ol>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><h4 id="native关键字"><a href="#native关键字" class="headerlink" title="native关键字"></a>native关键字</h4><ol>
<li><a href="https://www.cnblogs.com/szlbm/p/5504603.html**">手写一个native</a></li>
<li>native方法主要用于加载文件和动态链接库，由于Java语言无法访问操作系统底层信息（比如：底层硬件设备等），这时候就需要借助C语言来完成了。被native修饰的方法可以被C语言重写。</li>
<li>被native关键字修饰的方法叫做本地方法，本地方法和其它方法不一样，本地方法意味着和平台有关</li>
<li>Java程序中声明native修饰的方法，类似于abstract修饰的方法，只有方法签名，没有方法实现。编译该java文件，会产生一个.class文件。</li>
</ol>
]]></content>
      <categories>
        <category>java</category>
      </categories>
  </entry>
  <entry>
    <title>动态代理</title>
    <url>/2021/10/13/java/java%E9%AB%98%E9%98%B6/</url>
    <content><![CDATA[<h3 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h3><ol>
<li><p>方式1 jdk.InvocationHandler</p>
<ol>
<li><p>步骤</p>
<ol>
<li><p>被代理对象A1  实现接口A的两个方法(m1,m2)</p>
</li>
<li><p>创建一个handler实现InvocationHandler接口</p>
</li>
<li><p>重写handler的invoke方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">doDate()</span><br><span class="line">invoke(tar,args)==doSime()</span><br><span class="line">doLog()</span><br></pre></td></tr></table></figure></li>
<li><p>实现代理jdk.Proxy</p>
</li>
</ol>
<span id="more"></span></li>
<li><p>要求： 必须接口</p>
</li>
</ol>
</li>
<li><p>方式2 CGLIB</p>
<ol>
<li>要求：继承，不能final</li>
</ol>
</li>
<li><p>作用：</p>
<ol>
<li>减少代码重复</li>
<li>无痛功能增强</li>
<li>专注业务逻辑</li>
<li>解耦合</li>
</ol>
</li>
<li><p>AOP 面向切面编程</p>
<ol>
<li> 规范化（约定好）的动态代理</li>
<li></li>
</ol>
</li>
</ol>
]]></content>
      <categories>
        <category>java高阶</category>
      </categories>
  </entry>
  <entry>
    <title>mybatis</title>
    <url>/2021/10/16/java/mybatis/</url>
    <content><![CDATA[<h3 id="占位符"><a href="#占位符" class="headerlink" title="占位符"></a>占位符</h3><ol>
<li><p>#{}自动处理为string,     取对象get()方法</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;queryCountByDateF&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.wyg.epidemicsituation.domain.CountByDate&quot;</span>&gt;</span></span><br><span class="line">    SELECT count(id) as sum,CREATEd_at as date FROM data_result where isReg = 1 and created_at &gt; #&#123;start&#125; and created_at <span class="symbol">&amp;lt;</span> #&#123;end&#125; GROUP BY CREATEd_at ORDER BY CREATEd_at</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>${arg}无法放在注入攻击  传入的是原型</p>
</li>
<li><p>mapper没有用@Param  可用#{arg0}  #{param1}代替</p>
<span id="more"></span></li>
</ol>
<h3 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h3><h3 id="动态sql"><a href="#动态sql" class="headerlink" title="动态sql"></a>动态sql</h3>]]></content>
      <categories>
        <category>组件</category>
      </categories>
  </entry>
  <entry>
    <title>jvm</title>
    <url>/2021/09/28/java/jvm/</url>
    <content><![CDATA[<h3 id=""><a href="#" class="headerlink" title=""></a></h3><ol>
<li>OOM，栈溢出</li>
<li>jvm常用调优</li>
<li>内存快照</li>
<li>怎么分析dump文件</li>
<li>类加载器</li>
<li>jar包</li>
<li></li>
</ol>
<span id="more"></span>

<h3 id="-1"><a href="#-1" class="headerlink" title=""></a></h3><ol>
<li>对jvm理解<ol>
<li>javac a.java –&gt;java.class–&gt;类加载器—-&gt;运行区–<ol>
<li>方法区 垃圾回收</li>
<li>java栈</li>
<li>本地方法栈&lt;—本地方法接口&lt;–本地方法库</li>
<li>native method</li>
<li>堆heap 垃圾回收</li>
<li>程序技术器pc</li>
<li></li>
</ol>
</li>
<li>jvm位置<ol>
<li>硬件体系(intel)–&gt;操作系统(win)–&gt;jre（jvm）–&gt;java</li>
</ol>
</li>
<li>jvm结构</li>
</ol>
</li>
<li>类加载器<ol>
<li>class是模板，抽象的，object是实体，具象的</li>
<li>作用:加载class文件</li>
<li>a.class–&gt;jvm–&gt;new-&gt;实例</li>
</ol>
</li>
<li>双亲委派模式</li>
<li>沙箱安全模式</li>
<li>native</li>
<li>方法去</li>
<li>pc寄存器</li>
<li>栈</li>
<li>方法区</li>
<li>三种jvm</li>
<li>堆</li>
<li>新生区，老年区，用就去</li>
<li>GC算法</li>
</ol>
<h3 id="java编过程"><a href="#java编过程" class="headerlink" title="java编过程"></a>java编过程</h3>]]></content>
      <categories>
        <category>java高阶</category>
      </categories>
  </entry>
  <entry>
    <title>反射</title>
    <url>/2021/09/22/java/%E5%8F%8D%E5%B0%84%E5%92%8C%E6%B3%A8%E8%A7%A3/</url>
    <content><![CDATA[<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ol>
<li><a href="https://www.cnblogs.com/tech-bird/p/3525336.html">狂神</a></li>
</ol>
<h3 id="Class"><a href="#Class" class="headerlink" title="Class"></a>Class</h3><ol>
<li><p>创建类方式</p>
<ol>
<li>new</li>
<li>clone</li>
<li>反射<ol>
<li>newInstance</li>
<li>Constructor.newInstance</li>
</ol>
</li>
<li>反序列化</li>
</ol>
</li>
<li><p>谁拥有class</p>
<ol>
<li><p>class</p>
</li>
<li><p>interface</p>
<span id="more"></span></li>
<li><p>enum</p>
</li>
<li><p>annotation</p>
</li>
<li><p>primitive type 基本数据类型</p>
</li>
<li><p>void</p>
</li>
</ol>
</li>
<li><p>反射api</p>
<ol>
<li><table>
<thead>
<tr>
<th>方法名</th>
<th>功能说明</th>
</tr>
</thead>
<tbody><tr>
<td>static Class forName(String name)</td>
<td>返回指定类名 name 的 Class 对象</td>
</tr>
<tr>
<td>Object newInstance()</td>
<td>调用缺省构造函数，返回该Class对象的一个实例</td>
</tr>
<tr>
<td>Object newInstance(Object []args)</td>
<td>调用当前格式构造函数，返回该Class对象的一个实例</td>
</tr>
<tr>
<td>getName()</td>
<td>返回此Class对象所表示的实体（类、接口、数组类、基本类型或void）名称</td>
</tr>
<tr>
<td>Class getSuperClass()</td>
<td>返回当前Class对象的父类的Class对象</td>
</tr>
<tr>
<td>Class [] getInterfaces()</td>
<td>获取当前Class对象的接口</td>
</tr>
<tr>
<td>ClassLoader getClassLoader()</td>
<td>返回该类的类加载器</td>
</tr>
<tr>
<td>Class getSuperclass()</td>
<td>返回表示此Class所表示的实体的超类的Class</td>
</tr>
</tbody></table>
</li>
</ol>
</li>
<li><p>java.lang.Class&lt;T&gt;</p>
<ol>
<li><p>Class类是一个对象照镜子的结果，对象可以看到自己有哪些属性，方法，构造器，实现了哪些接口等等</p>
</li>
<li><p>Class类和Object关系不大，Class就是一个方便反射的类。interface也有Class,这个.但这不意味着interface和Object有任何关系。</p>
<ol>
<li>inteface作为注解的时候有一个类似Object的公共父接口Annotation.</li>
</ol>
</li>
<li><p>Class 是一个类,一个描述类的类.封装了描述方法的 Method,</p>
<p>​       描述字段的 Filed,</p>
<p>​       描述构造器的 Constructor 等属性.</p>
</li>
<li><p>获取方法</p>
<ol>
<li><p>fornname</p>
</li>
<li><p>实例.getClass()</p>
</li>
<li><p>类.class</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Class&lt;String&gt; _class = String.class;</span><br><span class="line">        Class&lt;String&gt; _getClass = (Class&lt;String&gt;) <span class="string">&quot;aa&quot;</span>.getClass();</span><br><span class="line">          Object obj=xx;</span><br><span class="line">     System.out.println(obj == _class);</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
</ol>
</li>
<li><p>Class&lt;T&gt;</p>
<ol>
<li><p>```java<br>Class<Class>tt=Class.class</p>
<figure class="highlight crystal"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="number">6</span>. 特别的</span><br><span class="line"></span><br><span class="line">   <span class="number">1</span>. 基本类可以通过其封装类.<span class="keyword">type</span>获得<span class="class"><span class="keyword">class</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>Integer.TYPE==int<br>Integer.class==class java.lang.Integer</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="bullet">7.</span> 类加载过程</span><br><span class="line"></span><br><span class="line"><span class="bullet">   1.</span> load:classLoader将class文件读入内存，并创建一个Class\<span class="xml"><span class="tag">&lt;<span class="name">this</span>&gt;</span></span>的Class实例</span><br><span class="line"><span class="bullet">   2.</span> link:将类的二进制数据合并到Jre</span><br><span class="line"><span class="bullet">      1.</span> 检验类信息是否符合规范，代码是否正确</span><br><span class="line"><span class="bullet">      2.</span> 分配static成员的内存</span><br><span class="line"><span class="bullet">   3.</span> initialize:JVM初始化类，执行静态代码块</span><br><span class="line"></span><br><span class="line"><span class="bullet">8.</span> 类的初始化</span><br><span class="line"></span><br><span class="line"><span class="bullet">   1.</span> 初始化是一种懒加载，只有被用到了才会初始化</span><br><span class="line"><span class="bullet">   2.</span> 主动引用(从父类到子类都会初始化)</span><br><span class="line"><span class="bullet">      1.</span> new</span><br><span class="line"><span class="bullet">      2.</span> 反射</span><br><span class="line"><span class="bullet">   3.</span> 被动引用(不会初始化)</span><br><span class="line"><span class="bullet">      1.</span> 直接调用静态变量 、常量类A.a，(因为在这些东西在link的时候就加载出来了)</span><br><span class="line"><span class="bullet">      2.</span> new 出来的是对象数组</span><br><span class="line"></span><br><span class="line"><span class="bullet">9.</span> 类加载器</span><br><span class="line"></span><br><span class="line">   ![<span class="string">image-20211011004255272</span>](<span class="link">https://job-wyg.oss-cn-beijing.aliyuncs.com/image-20211011004255272.png</span>)</span><br><span class="line"></span><br><span class="line"><span class="bullet">10.</span> 双亲委派机制</span><br><span class="line"></span><br><span class="line"><span class="bullet">11.</span> 关键</span><br><span class="line"></span><br><span class="line"><span class="bullet">    1.</span> 一个类,对象只有一个Class</span><br><span class="line"></span><br><span class="line"><span class="section">### 反射</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">1.</span> [<span class="string">反射功能</span>](<span class="link">https://www.cnblogs.com/adamjwh/p/9683705.html</span>)</span><br><span class="line"></span><br><span class="line"><span class="bullet">   1.</span> 在运行时判断任意一个对象所属的类。</span><br><span class="line"><span class="bullet">   2.</span> 在运行时构造任意一个类的对象。</span><br><span class="line"><span class="bullet">   3.</span> 在运行时判断任意一个类所具有的成员变量和方法。</span><br><span class="line"><span class="bullet">   4.</span> 在运行时调用任意一个对象的方法。</span><br><span class="line"><span class="bullet">   5.</span> 生成动态代理。</span><br><span class="line"></span><br><span class="line"><span class="bullet">2.</span> Method</span><br><span class="line"></span><br><span class="line"><span class="bullet">   1.</span> 获得所有方法(不包括私有)</span><br><span class="line"></span><br><span class="line"><span class="code">      ```java</span></span><br><span class="line"><span class="code">      Method[] methods = clazz.getMethods();</span></span><br></pre></td></tr></table></figure></li>
<li><p>获取本类方法(包括私有)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">methods = clazz.getDeclaredMethods();</span><br></pre></td></tr></table></figure></li>
<li><p>通过方法名+参数类型获取方法(包括私有)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Method method = clazz.getDeclaredMethod(<span class="string">&quot;setName&quot;</span>, String.class);</span><br></pre></td></tr></table></figure></li>
<li><p>反向调用方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">method.invoke(obje,<span class="number">2</span>);<span class="comment">//如果一个方法是私有方法，第三步是可以获取到的，但是这一步却不能执行　　　　//私有方法的执行，必须在调用invoke之前加上一句method.setAccessible（true）;</span></span><br></pre></td></tr></table></figure></li>
<li><p>个人理解</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> &lt;T&gt;<span class="function"><span class="keyword">void</span> <span class="title">updateEntity</span><span class="params">(BaseMapper baseMapper, String entity,Class&lt;T&gt;tClass)</span></span></span><br></pre></td></tr></table></figure>

<p>void前面的T就好像是声明了我这个函数是关于T的，如果不声明，参数也不能用T。</p>
</li>
</ol>
</li>
</ol>
<h3 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h3><ol>
<li><p>内置注解</p>
<ol>
<li>Override </li>
<li>Supersswarnings 类/方法</li>
<li>Deprecated 类/方法</li>
</ol>
</li>
<li><p>元注解 </p>
<ol>
<li><p>@Target 作用范围</p>
<p>ElementType 枚举值</p>
<ol>
<li>Type 类上</li>
<li>Method 方法上</li>
<li>Field 属性上</li>
</ol>
</li>
<li><p>@Retetion 什么时候有效</p>
</li>
<li><p>@Inherited 继承</p>
</li>
<li><p>@Documented 生成文档</p>
</li>
</ol>
</li>
<li><p>本质：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">myAnno</span>.<span class="title">An1</span> <span class="keyword">extends</span> <span class="title">java</span>.<span class="title">lang</span>.<span class="title">annotation</span>.<span class="title">Annotation</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>三大主干类</p>
<ol>
<li><p>祖先</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> java.lang.annotation;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Annotation</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">String <span class="title">toString</span><span class="params">()</span></span>;</span><br><span class="line">    Class&lt;? extends Annotation&gt; annotationType();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>作用域</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">ElementType</span> </span>&#123;</span><br><span class="line">    TYPE,               <span class="comment">/* 类、接口（包括注释类型）或枚举声明  */</span></span><br><span class="line">    FIELD,              <span class="comment">/* 字段声明（包括枚举常量）  */</span></span><br><span class="line">    METHOD,             <span class="comment">/* 方法声明  */</span></span><br><span class="line">    PARAMETER,          <span class="comment">/* 参数声明  */</span></span><br><span class="line">    CONSTRUCTOR,        <span class="comment">/* 构造方法声明  */</span></span><br><span class="line">    LOCAL_VARIABLE,     <span class="comment">/* 局部变量声明  */</span></span><br><span class="line">    ANNOTATION_TYPE,    <span class="comment">/* 注释类型声明  */</span></span><br><span class="line">    PACKAGE             <span class="comment">/* 包声明  */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>作用时间</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> java.lang.annotation;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">RetentionPolicy</span> </span>&#123;</span><br><span class="line">    SOURCE,            <span class="comment">/* Annotation信息仅存在于编译器处理期间，编译器处理完之后就没有该Annotation信息了  */</span></span><br><span class="line">    CLASS,             <span class="comment">/* 编译器将Annotation存储于类对应的.class文件中。默认行为  */</span></span><br><span class="line">    RUNTIME            <span class="comment">/* 编译器将Annotation存储于class文件中，并且可由JVM读入 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
<li><p>属性—抽象方法</p>
<ol>
<li><p>这是一种java特定规约方法,无参+返回</p>
<p>object method();</p>
<p>类似的还有@Test的</p>
<p>void method();</p>
</li>
<li><p>返回值类型</p>
<ol>
<li>注解(不能是自己，循环注解)</li>
<li>string</li>
<li>枚举</li>
<li>数组</li>
<li>基本类型(不是integer)</li>
</ol>
</li>
<li><p>可以default</p>
</li>
<li><p>在注解被使用的时候属性必须有值</p>
</li>
<li><p>每个属性—抽象方法都能根据反射获得值</p>
</li>
</ol>
</li>
<li><p>作用</p>
<ol>
<li>编译检查<ol>
<li>override检查父类是否有该方法<ol>
<li>其实override加不加都能覆盖,但是加了能起到检查的作用</li>
</ol>
</li>
<li>supersswarnings 检查警告</li>
<li></li>
</ol>
</li>
</ol>
</li>
</ol>
<h3 id="jvm"><a href="#jvm" class="headerlink" title="jvm"></a>jvm</h3><ol>
<li>内存分析<ol>
<li>方法区(特殊的堆)<ol>
<li>加载class文件</li>
<li>执行static静态代码块，和变量赋值</li>
<li>生成Class&lt;this&gt;实例放入堆</li>
<li></li>
</ol>
</li>
<li>堆<ol>
<li>包含了static变量</li>
</ol>
</li>
<li>栈<ol>
<li>执行static main方法</li>
<li></li>
</ol>
</li>
<li></li>
<li></li>
</ol>
</li>
</ol>
<h3 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h3><ol>
<li>反向代理</li>
<li>静态代理</li>
</ol>
]]></content>
      <categories>
        <category>java</category>
      </categories>
  </entry>
  <entry>
    <title></title>
    <url>/2021/10/14/java/%E7%BC%96%E8%AF%91%E8%BF%87%E7%A8%8B/</url>
    <content><![CDATA[<h3 id="编译过程"><a href="#编译过程" class="headerlink" title="编译过程"></a>编译过程</h3><ol>
<li><a href="https://www.cnblogs.com/code-duck/p/13568092.html">java编译过程.cnblog</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/206732617">java-操作系统.知乎</a><ol>
<li>运行环境 = 操作系统 + 硬件（主要是CPU)</li>
<li>操作系统屏蔽了除 CPU 外的硬件差异,并自身形成系统调用(一套Api)</li>
<li>但是不同操作系统api不同，所以为了</li>
</ol>
</li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>设计模式</title>
    <url>/2021/09/24/java/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h3 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h3><ul>
<li>单例类只能有一个实例。</li>
<li>单例类必须自己创建自己的唯一实例。</li>
<li>单例类必须给所有其他对象提供这一实例。</li>
</ul>
<span id="more"></span>

<p>实例：</p>
<p>​    Windows 是多进程多线程的，在操作一个文件的时候，就不可避免地出现多个进程或线程同时操作一个文件的现象，所以所有文件的处理必须通过唯一的实例来进行。</p>
<p>特点：</p>
<ol>
<li>私有构造器。</li>
<li>占用内存低（懒汉式）（饿汉式直接创建可能浪费内存）懒汉式线程不安全，但是加锁后可以避免（双重检测锁，voliate）。</li>
<li>但是强大，霸道的反射依然会造成线程不安全。三重检测。（）</li>
</ol>
]]></content>
      <categories>
        <category>java高阶</category>
      </categories>
  </entry>
  <entry>
    <title>servletContext</title>
    <url>/2021/10/31/javaWeb/ServletContext/</url>
    <content><![CDATA[<h3 id="ServletContext"><a href="#ServletContext" class="headerlink" title="ServletContext"></a>ServletContext</h3><ol>
<li><p>存活于整个web应用，程序–容器间通信</p>
</li>
<li><p>作用</p>
<ol>
<li><p>获取mime类型</p>
<ol>
<li>大类型/小类型 text/html  image/jpg</li>
<li>context.getMimeType(String src)</li>
</ol>
</li>
<li><p>域共享数据</p>
<ol>
<li><p>setAttribute</p>
</li>
<li><p>getAtrribute</p>
</li>
<li><p>removeAtrribute</p>
</li>
<li><p>范围：所有用户，所有请求的数据，王存李取。(很少用)</p>
<span id="more"></span></li>
</ol>
</li>
<li><p>获取文件真实路径</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">context.getRealPath(<span class="string">&quot;a.txt&quot;</span>);<span class="comment">//web资源路径直接写</span></span><br><span class="line">context.getRealPath(<span class="string">&quot;/WEB-INF/classes/a.txt&quot;</span>);<span class="comment">//src下的需要指定WEB-INFO/classes</span></span><br></pre></td></tr></table></figure>

<p>jpath</p>
<pre><code>├── index.html
├── index.jsp
├── login.html
└── WEB-INF
    ├── classes
    │   └── com
    │       └── wyg
    └── web.xml
</code></pre>
</li>
</ol>
</li>
<li><p>获取ServletContext</p>
<ol>
<li><p>两种方式，两个相等</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ServletContext context=req.getServletContext();</span><br><span class="line">ServletContext context2=<span class="keyword">this</span>.getServletContext();</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
</ol>
]]></content>
      <categories>
        <category>javaWeb</category>
      </categories>
  </entry>
  <entry>
    <title>session</title>
    <url>/2021/10/31/javaWeb/Session/</url>
    <content><![CDATA[<h3 id="session-服务端会话技术"><a href="#session-服务端会话技术" class="headerlink" title="session 服务端会话技术"></a>session 服务端会话技术</h3><ol>
<li>特点<ol>
<li>存储一次会话所有的数据</li>
<li>很大，任意类型</li>
<li>基于cookie</li>
<li>服务器关闭前tomcat会自动持久化到本地</li>
</ol>
</li>
<li>原理<ol>
<li><p>第一次访问 创建session,setId,setAttr</p>
</li>
<li><p>响应到浏览器set-cookie:JSESSIONID</p>
</li>
<li><p>再次访问根据cookie的sessionId获取session</p>
<span id="more"></span></li>
</ol>
</li>
<li>存活时间<ol>
<li>关闭浏览器消失—&gt;可以通过延长cookie存活时期而持久化存储</li>
<li>session钝化—&gt;服务器关闭时持久化(序列化)   tomcat会自动进行—&gt;tomcat/work…./localhost/…/Session.ser</li>
<li>session活化—&gt;服务器读取持久化session到内存</li>
<li>session失效时间<ol>
<li>服务器关闭</li>
<li>自杀:session.invalidate();</li>
<li>默认30分钟web.xml-&gt;&lt;session-config-timeout&gt;</li>
</ol>
</li>
</ol>
</li>
</ol>
]]></content>
      <categories>
        <category>javaWeb</category>
      </categories>
  </entry>
  <entry>
    <title>java-web</title>
    <url>/2021/09/27/javaWeb/java_web/</url>
    <content><![CDATA[<h3 id="web-网页"><a href="#web-网页" class="headerlink" title="web(网页)"></a>web(网页)</h3><ol>
<li>静态web <ol>
<li>html css</li>
<li>静态文件</li>
<li>模板引擎</li>
<li>即所有的数据都不变化</li>
</ol>
</li>
<li>动态web 这个叫javaWeb<ol>
<li><p>提供给人的数据会根据用户的请求而会变化</p>
<span id="more"></span></li>
</ol>
</li>
<li>web的组成<ol>
<li>html css js</li>
<li>jsp servlet</li>
<li>java</li>
<li>jar</li>
<li>配置文件</li>
<li>服务器</li>
</ol>
</li>
</ol>
<h3 id="javaWeb项目结构"><a href="#javaWeb项目结构" class="headerlink" title="javaWeb项目结构"></a>javaWeb项目结构</h3><ol>
<li><p>文件结构</p>
<ol>
<li>根目录(parent)<ol>
<li>WEN-INF目录<ol>
<li>web.xml:web核心配置</li>
<li>Classes:字节码文件（java编译后）</li>
<li>lib:依赖jar包</li>
</ol>
</li>
</ol>
</li>
</ol>
</li>
<li><p>web+idea</p>
<ol>
<li><p>启动idea,配置启 添加本地tomcat</p>
<p>配置</p>
<ol>
<li>虚拟目录</li>
<li>端口</li>
</ol>
</li>
<li><p>添加facet的Web</p>
<ol>
<li>配置文件path:web.xml</li>
<li>资源目录 path:webapp</li>
</ol>
</li>
<li><p>在启动配置的tomcat的部署下方配置上下文以配置路径</p>
</li>
<li><p>热部署–&gt;debug方式启动</p>
</li>
<li><p>右键new servlet</p>
<p>javaProject.iml/pom.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">sourceRoots</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">root</span> <span class="attr">url</span>=<span class="string">&quot;file://$MODULE_DIR$/src&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">root</span> <span class="attr">url</span>=<span class="string">&quot;file://$MODULE_DIR$/src/main/java&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">sourceRoots</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ol>
</li>
</ol>
<h3 id="一些理解"><a href="#一些理解" class="headerlink" title="一些理解"></a>一些理解</h3><ol>
<li>tomcat，</li>
<li>servlet 一种规范，实现这个规范的Class能够随时接受Requeset,Response，就好象一直运行在tomcat上一样。</li>
<li>request 一种规范，将浏览器的请求数据进行封装，其中httoRequest将http协议的请求进行封装，这个封装体可以把这些数据到处共享。</li>
<li>response</li>
<li>其他<ol>
<li>@WebServlet(“”)请求模式路径</li>
<li></li>
</ol>
</li>
</ol>
<h3 id="issue"><a href="#issue" class="headerlink" title="issue"></a>issue</h3><ol>
<li><p>Request请求参数乱码</p>
<ol>
<li><p>tomcat&gt;8 get方式不会乱码(url)</p>
</li>
<li><p>post(stream)-&gt;设置流的编码–&gt;</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">req.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
<li><p>Response设置编码</p>
</li>
</ol>
]]></content>
      <categories>
        <category>javaWeb</category>
      </categories>
  </entry>
  <entry>
    <title>http</title>
    <url>/2021/10/31/javaWeb/http/</url>
    <content><![CDATA[<h3 id="Http"><a href="#Http" class="headerlink" title="Http"></a>Http</h3><ol>
<li>Hyper Text Transfer Protocol 超文本传输协议，客户端&lt;—&gt;服务端 数据交换格式<ol>
<li> 基于TCP/IP的高级协议</li>
<li> 默认端口80</li>
<li> 一次请求对应一次响应</li>
<li> 无状态，每个请求独立，不能数据交换</li>
<li>各个版本<ol>
<li>1.0 每个请求都要一次建立连接，断开连接</li>
<li>1.1 请求复用，请求完等一会，等其他的请求复用这个连接</li>
</ol>
</li>
</ol>
<span id="more"></span></li>
</ol>
<h4 id="请求消息格式"><a href="#请求消息格式" class="headerlink" title="请求消息格式"></a>请求消息格式</h4><ol>
<li><p>请求行</p>
<ol>
<li><p>组成请求方式 请求url 请求协议</p>
</li>
<li><p>GET /login.html HTTP/1.1</p>
</li>
<li><p>请求方式</p>
<ol>
<li>Get：请求参数在请求行中,url有限制，不安全（参数可见）</li>
<li>Post: 请求参数在请求体中，url可无限大，安全。</li>
</ol>
</li>
</ol>
</li>
<li><p>请求头</p>
<p>k:v</p>
<p>请求名称：请求头值</p>
<p>get:</p>
<p><img src="https://job-wyg.oss-cn-beijing.aliyuncs.com/image-20211003214231021.png" alt="image-20211003214231021"></p>
<p>post:</p>
<p><img src="https://job-wyg.oss-cn-beijing.aliyuncs.com/image-20211003214506976.png" alt="image-20211003214506976"></p>
<p>user-agent：浏览器版本信息（解决浏览器兼容）。</p>
<p>accept:可接受的文件格式</p>
<p>referer: 告诉服务器我从哪里来，</p>
<ol>
<li>防盗链，防止别人盗取链接。</li>
<li>访问统计。</li>
<li>如果直接访问而不是通过连接访问，那么这个值就是null</li>
</ol>
<p>connection: keep-live 1.1版本的请求复用</p>
</li>
<li><p>请求空行，分割请求体和请求头的</p>
</li>
<li><p>请求体(正文,post才有)，封装post请求参数的</p>
</li>
</ol>
<h4 id="响应消息格式"><a href="#响应消息格式" class="headerlink" title="响应消息格式"></a>响应消息格式</h4><ol>
<li><p>响应行</p>
<p>HTTP /2.0 200 OK</p>
<p>协议:版本 状态码</p>
<p>状态码</p>
<ol>
<li>1xx: 服务端未接受全部请求消息</li>
<li>2xx: 成功</li>
<li>3xx: 不在我这。<ol>
<li>302 重定向，在别人哪</li>
<li>304 访问缓存(成功了)，在浏览器的缓存中</li>
</ol>
</li>
<li>4xx: 客户端错误<ol>
<li>401 需要身份认证</li>
<li>403 服务器收到了请求，但拒绝执行，可能是没权限</li>
<li>404 url写错了</li>
<li>405 没有这个get/post方法</li>
<li>414 url过长</li>
</ol>
</li>
<li>5xx: 服务端错误<ol>
<li>500:java报错(1/0)</li>
<li></li>
</ol>
</li>
</ol>
</li>
<li><p>响应头</p>
<p><img src="https://job-wyg.oss-cn-beijing.aliyuncs.com/image-20211004025720770.png" alt="image-20211004025720770"></p>
<ol>
<li>content-type 响应编码格式(text/html;charset=utf-8)</li>
<li>content-disposition 响应数据格式<ol>
<li>in-line: 当前页面直接显示</li>
<li>attachment:附件(超链接下载)</li>
</ol>
</li>
</ol>
</li>
<li><p>响应空行</p>
</li>
<li><p>响应体</p>
<p>data: html  string json 图片二进制数据</p>
</li>
</ol>
<h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><ol>
<li><p>url:统一资源定位符:<a href="http://localhost:8080/d2%E4%B8%AD%E5%8D%8E%E4%BA%BA%E6%B0%91%E5%85%B1%E5%92%8C%E5%9B%BD">http://localhost:8080/d2中华人民共和国</a></p>
<p>uri:统一资源标识符:/d2 共和国</p>
</li>
</ol>
]]></content>
      <categories>
        <category>javaWeb</category>
      </categories>
  </entry>
  <entry>
    <title>cookie</title>
    <url>/2021/10/31/javaWeb/cookie/</url>
    <content><![CDATA[<h2 id="会话"><a href="#会话" class="headerlink" title="会话"></a>会话</h2><ol>
<li>会话功能：在会话范围内共享数据</li>
<li>一次会话就是从浏览器打开到关闭期间客户端与服务端的请求和响应</li>
<li>http无状态，无法进行数据交换，无法识别身份，</li>
</ol>
<h3 id="cookie-客户端会话技术"><a href="#cookie-客户端会话技术" class="headerlink" title="cookie 客户端会话技术"></a>cookie 客户端会话技术</h3><ol>
<li><p>cookie特点</p>
<ol>
<li><p>保存在浏览器内存中</p>
</li>
<li><p>key-value,Respones.Header，</p>
</li>
<li><p>可设置存活时间</p>
</li>
<li><p>安全性低</p>
</li>
<li><p>大小有限(每个域名一个大小)</p>
</li>
<li><p>不可跨域性</p>
<span id="more"></span></li>
</ol>
</li>
<li><p>作用</p>
<ol>
<li>登陆记录(欢迎回来，你上一次访问的时间是。。。cookie.set(cookie.getOrDefault(“lastTime”,0)))</li>
<li>页面间数据传递</li>
<li>保存用户信息</li>
</ol>
</li>
</ol>
<h4 id="使用步骤"><a href="#使用步骤" class="headerlink" title="使用步骤"></a>使用步骤</h4><ol>
<li><p>创建cookie</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Cookie c=<span class="keyword">new</span> Cookie(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;hello&quot;</span>);</span><br></pre></td></tr></table></figure></li>
<li><p>发送cookie–&gt;想听头 set-cookie:””</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">response.addCookie(c);</span><br></pre></td></tr></table></figure></li>
<li><p>获取cookie</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Cookie[]cookies=request.getCookies();</span><br></pre></td></tr></table></figure></li>
<li><p>发送多个cookie</p>
<p><img src="https://job-wyg.oss-cn-beijing.aliyuncs.com/image-20211006110443252.png![image-20211006110900739](https://job-wyg.oss-cn-beijing.aliyuncs.com/image-20211006110900739.png" alt="image-20211006110443252"></p>
<p>–&gt;下一次request的时候重复的会被统一(默认用最后一个)</p>
<p><img src="https://job-wyg.oss-cn-beijing.aliyuncs.com/image-20211006110648442.png" alt="image-20211006110648442"></p>
</li>
</ol>
<h4 id="cookie问题"><a href="#cookie问题" class="headerlink" title="cookie问题"></a>cookie问题</h4><ol>
<li><p>cookie保存时间</p>
<ol>
<li>默认浏览器关闭</li>
<li>持久化存储 cookie.setMaxAge(60<em>60</em>24*30) <ol>
<li>整数：关闭浏览器n秒后才消失，上面是一个月</li>
<li>负数：默认</li>
<li>零：删除此cookie</li>
</ol>
</li>
</ol>
</li>
<li><p>cookie中文问题(tomcat&gt;8)</p>
<p>在浏览器中显示有问题，但是再次发送到java还是可以看到中文</p>
</li>
<li><p>cookie共享问题</p>
<ol>
<li>多个tomcat(服务器)默认情况下是不共享的</li>
<li>可以使用setPath设置范围(“/“)范围最大</li>
</ol>
</li>
</ol>
]]></content>
      <categories>
        <category>javaWeb</category>
      </categories>
  </entry>
  <entry>
    <title>java发送http请求</title>
    <url>/2021/11/01/javaWeb/java%E5%8F%91%E9%80%81Http%E8%AF%B7%E6%B1%82/</url>
    <content><![CDATA[<h3 id=""><a href="#" class="headerlink" title=""></a></h3>]]></content>
      <categories>
        <category>javaWeb</category>
      </categories>
  </entry>
  <entry>
    <title>request</title>
    <url>/2021/10/31/javaWeb/request/</url>
    <content><![CDATA[<h3 id="request请求"><a href="#request请求" class="headerlink" title="request请求"></a>request请求</h3><h5 id="一次请求响应步骤"><a href="#一次请求响应步骤" class="headerlink" title="一次请求响应步骤"></a>一次请求响应步骤</h5><ol>
<li><p>tomcat会根据请求url的路径创建servlet对象</p>
</li>
<li><p>tomcat创建Request和Response对象，并且request封装请求消息数据</p>
</li>
<li><p>tomcat将request和response两个对象传给service，并调用service方法</p>
</li>
<li><p>service根据request获取请求消息，使用response设置响应消息</p>
</li>
<li><p>服务器再给浏览器响应之前，会从response获取响应消息</p>
</li>
<li><p>其中resp.getWriter.write(“html”)会返回一个页面</p>
<span id="more"></span></li>
</ol>
<h3 id="Request功能-获取请求消息"><a href="#Request功能-获取请求消息" class="headerlink" title="Request功能-获取请求消息"></a>Request功能-获取请求消息</h3><h4 id="1-获取请求行"><a href="#1-获取请求行" class="headerlink" title="(1)获取请求行"></a>(1)获取请求行</h4><p>GET /login.html HTTP/1.1</p>
<ol>
<li><p>获取虚拟目录</p>
<p>String getContextPath</p>
</li>
<li><p>获取请求URL</p>
<p>getRequestURL </p>
<p><a href="http://localhost:8080/d2">http://localhost:8080/d2</a></p>
</li>
<li><p>获取请求URI</p>
<p>getRequestURI</p>
<p>d2</p>
</li>
<li><p>获取请求方式：</p>
<p>String getMethod</p>
<p>GET</p>
</li>
<li><p>获取请求参数</p>
<p>String getQueryString</p>
<p>username=aaa</p>
</li>
<li><p>获取Servlet路径</p>
<p>getServletPath</p>
<p>/d2</p>
</li>
<li><p>获取Ip地址</p>
<p>getRemoteAddr</p>
<p>0:0:0:0:0:0:0:1</p>
</li>
</ol>
<h4 id="2-获取请求头数据"><a href="#2-获取请求头数据" class="headerlink" title="(2)获取请求头数据"></a>(2)获取请求头数据</h4><ol>
<li><p>通过请求头获取请求头值</p>
<p>getHeader(string name)</p>
</li>
<li><p>获取所有请求头名称</p>
<p>Enumeration getHeaderNames</p>
<p><img src="https://job-wyg.oss-cn-beijing.aliyuncs.com/image-20211003223205963.png" alt="image-20211003223205963"></p>
</li>
</ol>
<h4 id="3-获取请求体信息-只有Post才有"><a href="#3-获取请求体信息-只有Post才有" class="headerlink" title="(3)获取请求体信息(只有Post才有)"></a>(3)获取请求体信息(只有Post才有)</h4><ol>
<li><p>获取字符流/字节流</p>
<p>getReader/getInputStream</p>
</li>
<li><p>从流中解析得数据</p>
</li>
</ol>
<h4 id="4-其他功能"><a href="#4-其他功能" class="headerlink" title="(4)其他功能"></a>(4)其他功能</h4><ol>
<li><p>获取请求参数通用方式(无论get/post，优点：方法统一)</p>
<ol>
<li><p>根据参数名称获取参数值</p>
<p>getParameter(string name)</p>
</li>
<li><p>根据参数名称获取数组getParameterValues(string name)</p>
</li>
<li><p>获取所有参数名称</p>
<p>getParamaterNames</p>
</li>
<li><p>获取参数map集合</p>
<p>getParameterMap</p>
</li>
</ol>
</li>
<li><p>请求转发</p>
<p>服务器资源跳转方式</p>
<ol>
<li>获取转发对象RequestDispatcher getRequestDispatcher(string path)</li>
<li>调用对象方法<ol>
<li>forword(req,resp): 请求抓发,第一个servlet只Writer了resp的头,</li>
<li>include( req , resp): 请求包含—两个请求都Writer了resp体</li>
</ol>
</li>
<li>特点<ol>
<li>浏览器只有一次请求，其他请求在服务器进行</li>
<li>浏览器地址不变</li>
<li>只能转发得到当前服务器内部资源</li>
</ol>
</li>
</ol>
</li>
<li><p>共享数据</p>
<ol>
<li>域对象：一个有作用范围的对象，在这个范围能够共享数据</li>
<li>request对象：代表一次请求的范围，一般用于请求转发多个资源中共享数据。</li>
<li>共享方法：<ol>
<li>setAttribute(“age”,obj)</li>
<li></li>
</ol>
</li>
</ol>
</li>
<li><p>获取ServletContext getServletContext</p>
</li>
</ol>
]]></content>
      <categories>
        <category>javaWeb</category>
      </categories>
  </entry>
  <entry>
    <title>request</title>
    <url>/2021/10/31/javaWeb/response/</url>
    <content><![CDATA[<h3 id="Response响应"><a href="#Response响应" class="headerlink" title="Response响应"></a>Response响应</h3><ol>
<li><p>设置响应消息</p>
<ol>
<li><p>响应行</p>
<ol>
<li>setStatus(200)</li>
</ol>
</li>
<li><p>响应头</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">set<span class="constructor">Header(<span class="params">string</span> <span class="params">name</span>,<span class="params">string</span> <span class="params">value</span>)</span></span><br></pre></td></tr></table></figure></li>
<li><p>响应体(stream)</p>
<ol>
<li>获取输出流 PrintWriter</li>
<li>调用outStream输出到浏览器</li>
</ol>
</li>
</ol>
<span id="more"></span></li>
<li><p>重定向步骤</p>
<ol>
<li><p>A没干–&gt;302+url of B–&gt;但是告诉浏览器B能干</p>
</li>
<li><p>```java<br>resp.sendRedirect(“/d6”);</p>
<figure class="highlight xl"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">   <span class="number">3</span>. 异步编程：<span class="function"><span class="title">get1</span>--&gt;</span><span class="function"><span class="title">post1</span>--&gt;</span>重定向--&gt;<span class="function"><span class="title">post1</span>--&gt;</span>get1;post2....</span><br><span class="line"></span><br><span class="line">   <span class="number">4</span>. 重定向是两次请求，所以重定向地址不是request域，也因为没传入req,resp.</span><br><span class="line"></span><br><span class="line">   <span class="number">5</span>. <span class="function"><span class="title">d5</span>-&gt;</span><span class="function"><span class="title">d6</span>-&gt;</span>d5不会让服务器崩溃，会让他一直工作</span><br><span class="line"></span><br><span class="line">### 响应数据到浏览器</span><br><span class="line"></span><br><span class="line"><span class="number">1</span>. String/txt/html</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>PrintWriter printWriter=resp.getWriter();<br>printWriter.write(“<h>hello-write</h>“);</p>
<figure class="highlight autohotkey"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="number">2</span>. 乱码：编码和解码的标准不一样。</span><br><span class="line"></span><br><span class="line">   <span class="number">1</span>. 设置resp的编码格式</span><br><span class="line"></span><br><span class="line">   <span class="number">2</span>. 告诉浏览器解码方式(建议)</span><br><span class="line"></span><br><span class="line">      ```java</span><br><span class="line">      resp.setHeader(<span class="string">&quot;content-type&quot;</span>,<span class="string">&quot;text/html;charaset=utf-8&quot;</span>)<span class="comment">;</span></span><br></pre></td></tr></table></figure></li>
</ol>
</li>
<li><p>字节流</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ServletOutputStream outputStream=resp.getOutputStream();</span><br><span class="line">outputStream.write(<span class="string">&quot;你不好&quot;</span>.getBytes(StandardCharsets.UTF_8));</span><br></pre></td></tr></table></figure></li>
<li><p>制作验证码</p>
<ol>
<li><p>简单图片</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">BufferedImage image=<span class="keyword">new</span> BufferedImage(w,h,BufferedImage.TYPE_INT_RGB);<span class="comment">//创建图片对象</span></span><br><span class="line"><span class="keyword">int</span> n=<span class="number">4</span>;<span class="comment">//画布加入4个字母</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">	Random ran=<span class="keyword">new</span> Random();</span><br><span class="line">	<span class="keyword">int</span> index=ran.nextInt(<span class="number">26</span>);</span><br><span class="line">	<span class="keyword">char</span> c= (<span class="keyword">char</span>) (index+<span class="string">&#x27;A&#x27;</span>);</span><br><span class="line">	g.drawString(c+<span class="string">&quot;&quot;</span>,<span class="number">20</span>+w/<span class="number">5</span>*i,h/<span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line">ImageIO.write(image,<span class="string">&quot;jpg&quot;</span>,resp.getOutputStream());<span class="comment">//传入到流</span></span><br></pre></td></tr></table></figure></li>
<li><p>点击图片刷新–&gt;前端调用刷新函数</p>
</li>
</ol>
</li>
<li><p>下载资源步骤(content-disposition: 附件-attachment;)</p>
<ol>
<li>href—&gt;servlet, 超链接指向servlet</li>
<li>设置响应头：文件类型+打开方式</li>
<li>servlet.context.getRealName，通过context获取真实路径</li>
<li>OutStream(InputStream(RealName)) 传到response的输出流</li>
<li>资源需要放在web下，而不是WEB-INF下</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String filename = req.getParameter(<span class="string">&quot;filename&quot;</span>);</span><br><span class="line">        String mimeType = context.getMimeType(filename);</span><br><span class="line">        resp.setHeader(<span class="string">&quot;content-type&quot;</span>,mimeType);</span><br><span class="line">        resp.setHeader(<span class="string">&quot;content-disposition&quot;</span>,<span class="string">&quot;attachment;filename=&quot;</span>+filename);</span><br><span class="line">        String realPath1 = context.getRealPath(filename);</span><br><span class="line">        FileInputStream inputStream = <span class="keyword">new</span> FileInputStream(realPath1);</span><br><span class="line">        ServletOutputStream outputStream = resp.getOutputStream();</span><br><span class="line">        <span class="keyword">byte</span>[] buffers = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span> * <span class="number">8</span>];</span><br><span class="line">        <span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> ((len = inputStream.read(buffers)) != -<span class="number">1</span>) &#123;outputStream.write(buffers,<span class="number">0</span>,len);</span><br><span class="line">        &#125;<span class="comment">//访问/d8?filename=a.jpg</span></span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>javaWeb</category>
      </categories>
  </entry>
  <entry>
    <title>servlet</title>
    <url>/2021/10/31/javaWeb/servlet/</url>
    <content><![CDATA[<h3 id="Servlet"><a href="#Servlet" class="headerlink" title="Servlet"></a>Servlet</h3><ol>
<li><p>server applet——&gt;运行在服务器的小程序</p>
</li>
<li><p>动态资源：java类若要一直运行在tomcat，那么它就得实现servlet规范(接口)，这样才能被tomcat识别。</p>
</li>
<li><p>servlet接口方法</p>
<ol>
<li><p>init: serlvet创建的时候运行，只运行一次,不是启动的时候，而是第一次访问的时候。</p>
</li>
<li><p>service:提供服务的方法，运行多次</p>
<figure class="highlight coq"><table><tr><td class="code"><pre><span class="line">访问mapping的</span><br><span class="line"><span class="number">8080</span>+虚拟目录+url-<span class="built_in">pattern</span></span><br><span class="line">就会运行该函数</span><br></pre></td></tr></table></figure>

<span id="more"></span></li>
<li><p>getServletInfo：获取serlvet版本信息</p>
</li>
<li><p>getServletConfig</p>
</li>
<li><p>destroy:正常关闭时运行一次</p>
</li>
</ol>
</li>
</ol>
<h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><ol>
<li><p>servlet.class</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(ServletRequest ,ServletResponse )</span></span></span><br><span class="line"><span class="function"></span>&#123;System.out.println(<span class="string">&quot;servlet启动&quot;</span>);&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>web.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>serveletName<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span><span class="comment">&lt;!--名字--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.wyg.web.servlet.ServletDemo<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span><span class="comment">&lt;!--servlet类--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span><span class="comment">&lt;!--映射--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>serveletName<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/demox1<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span><span class="comment">&lt;!--路径--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>注解配置</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@WebServlet( &quot;/s1&quot;)</span></span><br></pre></td></tr></table></figure></li>
<li><p>可以加入映射数组</p>
<figure class="highlight ada"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;user/demo&quot;</span></span><br><span class="line"><span class="string">&quot;user/*&quot;</span> 通配符任意</span><br><span class="line"><span class="string">&quot;/*&quot;</span> 任意，优先级最低</span><br><span class="line"><span class="string">&quot;*.do&quot;</span>任意.<span class="keyword">do</span>结尾 </span><br></pre></td></tr></table></figure></li>
</ol>
<h4 id="原理步骤"><a href="#原理步骤" class="headerlink" title="原理步骤"></a>原理步骤</h4><ol>
<li>访问url</li>
<li>扫描mapping找到对应servlet.name进而找到servlet.class的全限定类名</li>
<li>反射class.forname(servlet.class).newInstance创建出对象servlet</li>
<li>调用servlet.service</li>
</ol>
<h4 id="servlet生命周期"><a href="#servlet生命周期" class="headerlink" title="servlet生命周期"></a>servlet生命周期</h4><ol>
<li><p>被创建加载：init 加载资源</p>
<p>默认第一次访问url</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">web.xml-&gt;指定启动时加载并赋予优先级，值为2表示可能是依赖其他servlet启动才能启动。</span><br><span class="line"><span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>2<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>被调用–&gt;service</p>
</li>
<li><p>被销毁–&gt;destory 释放资源</p>
</li>
</ol>
<h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><ol>
<li>servlet是容易并发的对象(单例)，所以尽量不要定义成员变量，确保线程安全。</li>
<li>尽量不要再servlet定义成员变量，定义了也只用于读取。</li>
<li>url-pattern必须前缀”/“</li>
<li>servlet配置项地址：CATALINA_BASE(tomcat启动的时候输出)</li>
</ol>
<h4 id="servlet体系结构"><a href="#servlet体系结构" class="headerlink" title="servlet体系结构"></a>servlet体系结构</h4><ol>
<li><p>父子关系：接口Servlet–&gt;抽象GenericServlet–&gt;抽象HttpServlet</p>
</li>
<li><p>genericServlet</p>
<ol>
<li>其他方法默认空实现</li>
<li>只需实现service方法</li>
</ol>
</li>
</ol>
<h4 id="httpServlet"><a href="#httpServlet" class="headerlink" title="httpServlet:"></a>httpServlet:</h4><ol>
<li><p>url请求</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String method=req.<span class="function">getMethod</span></span><br><span class="line"><span class="function"><span class="title">if</span><span class="params">(method.eq(<span class="string">&quot;get&quot;</span>)</span>)...</span></span><br><span class="line"><span class="function"><span class="keyword">else</span>...</span></span><br></pre></td></tr></table></figure></li>
<li><p>这样每次都判断很麻烦，所以httpServlet对它进行了一个封装，这个封装就是重写service方法判断是get还是post,然后调用对应方法，只需重写doGet/doPost方法</p>
</li>
<li><p>默认deGet方法</p>
</li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>tomcat</title>
    <url>/2021/10/31/javaWeb/tomcat/</url>
    <content><![CDATA[<h3 id="tomacat"><a href="#tomacat" class="headerlink" title="tomacat"></a>tomacat</h3><ol>
<li><p>下载</p>
</li>
<li><p>日志换成中文乱码解决</p>
<p>conf/logging.properties:</p>
<p>encoding = UTF-8–&gt;GBK</p>
</li>
<li><p>文件结构</p>
<ol>
<li><p>bin 可执行文件</p>
</li>
<li><p>conf 配置文件</p>
</li>
<li><p>lib jar依赖</p>
</li>
<li><p>log日志</p>
</li>
<li><p>webapps web项目</p>
</li>
<li><p>运行时数据</p>
<span id="more"></span></li>
</ol>
</li>
<li><p>配置java_home </p>
</li>
<li><p>启动: start-up.bat</p>
</li>
<li><p>关闭: shut-down.bat || ctrl+c || 叉掉</p>
</li>
<li><p>路径：webapps=localhost:8080</p>
</li>
<li><p>tomcat部署web项目的几种方法</p>
<ol>
<li><p>直接将web项目放在webapps下</p>
</li>
<li><p>简化：将web项目压缩成zip并改后缀为war包，这个war包会自动解压缩</p>
<p>缺点：每次都要移动文件，无法配置虚拟目录</p>
</li>
<li><p>servlet.xml–&gt; &lt;host&gt;&lt;Context docBase:”实际目录” path”虚拟地址”/&gt;&lt;/host&gt;</p>
<p>缺点：配置servlet.xml不安全。</p>
</li>
<li><p>热部署：conf\Catalina\localhost下创建bbb.xml，并添加</p>
<p>&lt;Context docBase:”path” path”url”/&gt;</p>
<p>访问bbb就ok</p>
</li>
</ol>
</li>
<li><p>两个jar</p>
<ol>
<li>jsp-api.jar</li>
<li>servlet-api.jar</li>
</ol>
</li>
<li><p>index.html优先级高于jsp</p>
</li>
</ol>
]]></content>
      <categories>
        <category>javaWeb</category>
      </categories>
  </entry>
  <entry>
    <title>url</title>
    <url>/2021/11/02/javaWeb/url/</url>
    <content><![CDATA[<h3 id="URL-组成"><a href="#URL-组成" class="headerlink" title="URL 组成"></a>URL 组成</h3><ul>
<li><strong>协议为(protocol)：</strong>http</li>
<li>**主机为(host:port)**：<a href="http://www.runoob.com/">www.runoob.com</a></li>
<li><strong>端口号为(port):</strong> 80 ，以上URL实例并未指定端口，因为 HTTP 协议默认的端口号为 80。</li>
<li><strong>文件路径为(path)：</strong>/index.html</li>
<li>**请求参数(query)**：language=cn</li>
<li><strong>定位位置(fragment)：</strong>j2se，定位到网页中 id 属性为 j2se 的 HTML 元素位置 。</li>
</ul>
<h3 id="URL-api"><a href="#URL-api" class="headerlink" title="URL api"></a>URL api</h3><ol>
<li><p>构造函数</p>
<ol>
<li>public URL(String url)</li>
<li>public URL(String protocol, String host, int port, String path)</li>
</ol>
</li>
<li><p>获取成分</p>
<ol>
<li>getPath()</li>
<li>getQuery()</li>
<li>获取授权部分 getAuthority()</li>
<li>获取端口 getPort()</li>
<li>获取协议 getProtocol()</li>
<li>获取主机 getHost()</li>
<li>获取路径getFile()</li>
</ol>
</li>
<li><p>打开连接</p>
<p>public URLConnection openConnection()</p>
</li>
</ol>
<h3 id="URLConnection-api"><a href="#URLConnection-api" class="headerlink" title="URLConnection api"></a>URLConnection api</h3><ol>
<li><p>读取response/资源 流  </p>
<p>public InputStream getInputStream()</p>
</li>
<li><p>写request </p>
<p>public OutputStream getOutputStream()</p>
</li>
<li><p>获取URL</p>
<p>getURL</p>
</li>
<li></li>
</ol>
]]></content>
      <categories>
        <category>javaWeb</category>
      </categories>
  </entry>
  <entry>
    <title>数据交互</title>
    <url>/2021/10/31/javaWeb/%E6%95%B0%E6%8D%AE%E4%BA%A4%E4%BA%92/</url>
    <content><![CDATA[<h3 id="数据交互类型"><a href="#数据交互类型" class="headerlink" title="数据交互类型"></a>数据交互类型</h3><ol>
<li><p>BeanUtils</p>
<p>map–&gt;obj</p>
<ol>
<li>解析map–&gt;封装javaBean</li>
</ol>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"><span class="module-access"><span class="module"><span class="identifier">BeanUtils</span>.</span></span>populate(obj,map)</span><br></pre></td></tr></table></figure>

<ol>
<li><p>getProperty</p>
</li>
<li><p>setProperty</p>
<span id="more"></span></li>
</ol>
</li>
<li><p>javaBean</p>
<ol>
<li><p>public修饰class setter getter</p>
</li>
<li><p>空参构造器</p>
</li>
<li><p>成员变量Private</p>
<ol>
<li><p>属性 有同名setter(setName) getter</p>
<p>哪怕类没有这个成员变量，可以理解为属性是一对setter/getter的驼峰方法</p>
</li>
<li><p>成员变量 可以是属性，也可以不是，可以理解为类的变量。</p>
</li>
<li><p>一般情况下属性==成员变量</p>
</li>
</ol>
</li>
</ol>
</li>
</ol>
]]></content>
      <categories>
        <category>javaWeb</category>
      </categories>
  </entry>
  <entry>
    <title>restful</title>
    <url>/2021/10/07/project/Restful/</url>
    <content><![CDATA[<h3 id=""><a href="#" class="headerlink" title=""></a></h3><ol>
<li>restful之前<ol>
<li>CURD只能get/post<ol>
<li>8080/add?name=1&amp;password=1</li>
<li>8080/delete?name=1</li>
<li>8080/update?name=2&amp;password=2</li>
<li>8080/get?name=1</li>
</ol>
</li>
<li>四个地址太多了，restful统一这四个地址，根据请求方式来判断进行的操作</li>
</ol>
</li>
</ol>
<h3 id="RestTemplate"><a href="#RestTemplate" class="headerlink" title="RestTemplate"></a>RestTemplate</h3><ol>
<li>常见Http客户端请求工具<ol>
<li>OkHttp</li>
<li>Apache Http</li>
</ol>
</li>
<li>RestTemplate是spring封装的http web请求模板方法</li>
<li><a href="https://httpstatus.com/">状态码</a></li>
<li>作用暂且理解为后端发送rest请求</li>
</ol>
]]></content>
      <categories>
        <category>project</category>
      </categories>
  </entry>
  <entry>
    <title>springBoot秒杀系统</title>
    <url>/2021/09/29/project/springboot_%E7%A7%92%E6%9D%80%E7%B3%BB%E7%BB%9F/</url>
    <content><![CDATA[<h3 id="技术介绍"><a href="#技术介绍" class="headerlink" title="技术介绍"></a>技术介绍</h3><ol>
<li>秒杀 两个问题：并发读，并发写。防止最坏的情况发生。<ol>
<li>稳  高可用 最坏情况planb</li>
<li>准  一致性</li>
<li>快  高性能， 效率</li>
</ol>
</li>
<li> <img src="https://job-wyg.oss-cn-beijing.aliyuncs.com/image-20210930003833352.png" alt="image-20210930003833352"></li>
<li><img src="https://job-wyg.oss-cn-beijing.aliyuncs.com/image-20210930003801073.png" alt="image-20210930003800497"></li>
<li><img src="https://job-wyg.oss-cn-beijing.aliyuncs.com/image-20210930003852477.png" alt="image-20210930003852477"></li>
</ol>
<span id="more"></span>

<h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><ol>
<li><p>创建项目加入依赖</p>
<p>mybatisplus,mysql,thymeleaf,springwebm,lomok</p>
</li>
<li><p>配置resources</p>
<ol>
<li><p>application</p>
<ol>
<li>datasource<ol>
<li>driver-url-username-password</li>
<li>连接池</li>
</ol>
</li>
<li>logging debug</li>
<li>mybatis-plus</li>
</ol>
</li>
<li><p>mapper</p>
</li>
<li><p>templates</p>
<ol>
<li><p>html—&gt;thymeleaf命名空间</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>    <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ol>
</li>
<li><p>logging</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="attr">level:  com.examapl.springkill.mapper:</span> <span class="string">debug</span></span><br></pre></td></tr></table></figure></li>
</ol>
</li>
<li><p>登录功能</p>
<ol>
<li><p>MD5加密(实质是一种消息摘要算法)</p>
</li>
<li><p>步骤</p>
<ol>
<li><p>依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">commons-codec</span><br><span class="line">commons-lang3</span><br></pre></td></tr></table></figure></li>
<li><p>二次加密步骤</p>
<ol>
<li><p>```<br>根据公有盐第一次转化为md5密码—m1</p>
<figure class="highlight autohotkey"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="number">2</span>. ```</span><br><span class="line">   根据m1和数据库的私有盐进行二次加密-</span><br></pre></td></tr></table></figure></li>
<li><pre><code>封装函数方便直接得到m2
</code></pre>
</li>
</ol>
</li>
<li><p>二次加密优点</p>
</li>
</ol>
</li>
<li></li>
</ol>
</li>
</ol>
]]></content>
      <categories>
        <category>project</category>
      </categories>
  </entry>
  <entry>
    <title>spring-secruity</title>
    <url>/2021/10/12/project/spring-secruity/</url>
    <content><![CDATA[<h3 id="project1"><a href="#project1" class="headerlink" title="project1"></a>project1</h3><ol>
<li><p>database</p>
<p>user</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">username,series,token,last_used</span><br></pre></td></tr></table></figure></li>
<li><p>配置类</p>
<ol>
<li><p>注入数据库</p>
</li>
<li><p>@configuration</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> DataSource dataSource;</span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> PersistentTokenRepository <span class="title">persistentTokenRepository</span><span class="params">()</span></span>&#123;</span><br><span class="line">    JdbcTokenRepositoryImpl jdbcTokenRepository=<span class="keyword">new</span> JdbcTokenRepositoryImpl();</span><br><span class="line">    jdbcTokenRepository.setDataSource(dataSource);</span><br><span class="line">    <span class="comment">//        jdbcTokenRepository.setCreateTableOnStartup();</span></span><br><span class="line">    <span class="keyword">return</span> jdbcTokenRepository;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> </span></span><br><span class="line"><span class="function">.<span class="title">and</span><span class="params">()</span>.<span class="title">rememberMe</span><span class="params">()</span>.<span class="title">tokenRepository</span><span class="params">(persistentTokenRepository()</span>)<span class="comment">//配置数据库--token</span></span></span><br><span class="line"><span class="function">                .<span class="title">tokenValiditySeconds</span><span class="params">(<span class="number">4</span>)</span><span class="comment">//设置有效时长</span></span></span><br><span class="line"><span class="function">                .<span class="title">userDetailsService</span><span class="params">(userDetailsService)</span></span></span><br></pre></td></tr></table></figure></li>
</ol>
</li>
</ol>
   <span id="more"></span>

<ol start="3">
<li><p>csrf 跨站请求伪造</p>
<ol>
<li><p>依赖</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">     &lt;groupId&gt;org.thymeleaf.extras&lt;/groupId&gt;</span><br><span class="line">     &lt;artifactId&gt;thymeleaf-extras-springsecurity5&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;	</span><br></pre></td></tr></table></figure></li>
<li></li>
</ol>
</li>
</ol>
]]></content>
      <categories>
        <category>spring</category>
      </categories>
  </entry>
  <entry>
    <title></title>
    <url>/2021/10/14/other/%E5%B0%B1%E4%B8%9A%E7%96%91%E9%97%AE/</url>
    <content><![CDATA[<h3 id="学习"><a href="#学习" class="headerlink" title="学习"></a>学习</h3><ol>
<li>上班还需要学习吗  <ol>
<li>新技术</li>
<li>底层技术</li>
</ol>
</li>
<li>上班</li>
</ol>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2021/10/08/other/%E5%BC%80%E5%8F%91%E6%97%A5%E8%AE%B0/</url>
    <content><![CDATA[<h3 id="需求问题"><a href="#需求问题" class="headerlink" title="需求问题"></a>需求问题</h3><ol>
<li>这个功能是否已经完成，</li>
<li></li>
</ol>
<h3 id="技术问题"><a href="#技术问题" class="headerlink" title="技术问题"></a>技术问题</h3><ol>
<li>postman登录测试怎么完成 </li>
<li>数据库的连接问题</li>
<li>Repository是mybatispluS?</li>
</ol>
<h3 id="处理"><a href="#处理" class="headerlink" title="处理"></a>处理</h3><ol>
<li>所有api<ol>
<li>api/dict 增删改查</li>
<li>dictDetail增删改查</li>
</ol>
</li>
</ol>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">map 检验</span><br><span class="line"></span><br><span class="line"><span class="regexp">//</span>        Map&lt;String, Map&lt;String, Paper&gt;&gt; map = records.parallelStream().collect(</span><br><span class="line"><span class="regexp">//</span>                Collectors.groupingBy(Paper::getExamId,</span><br><span class="line"><span class="regexp">//</span>                        Collectors.toMap(Paper::getUserId, Function.identity(), (o1, o2) -&gt; (o1.getUserScore() &gt; o2.getUserScore() ? o1 : o2))));</span><br><span class="line"><span class="regexp">//</span>        Debug.debug(<span class="string">&quot;map1&quot;</span>);</span><br><span class="line"><span class="regexp">//</span>        map.forEach((k, v) -&gt; &#123;</span><br><span class="line"><span class="regexp">//</span>            System.out.println(<span class="string">&quot;exam-&gt;&quot;</span>+k + <span class="string">&quot;:&quot;</span>);</span><br><span class="line"><span class="regexp">//</span>            v.forEach((a, b) -&gt; System.out.println(<span class="string">&quot;\tuser:&quot;</span> + a + <span class="string">&quot;:  &quot;</span> + b.getUserScore()));</span><br><span class="line"><span class="regexp">//</span>        &#125;);</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2021/10/12/other/%E9%9C%80%E6%B1%821/</url>
    <content><![CDATA[<h3 id="处理"><a href="#处理" class="headerlink" title="处理"></a>处理</h3><ol>
<li>题目-试卷<ol>
<li>el_exam  : 试卷   </li>
<li>el_repo 考试-题库   对应于3</li>
<li>el_paper 学生–试卷 考试ing试卷状态</li>
<li>el_qu_answer 题目id–答案id</li>
<li>el_qu 题目id-内容</li>
<li>el_paper_qu_answer 试卷id-题目id-回答id-是否选中-答案id</li>
</ol>
</li>
<li>题目-题库<ol>
<li>el_repo 题库(id，各个数量) 需要增加一个类别</li>
<li>el_qu_repo 题库id-试题id表</li>
</ol>
</li>
</ol>
<h3 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h3><ol>
<li><p>题库类别  –&gt;数据库 加一个id</p>
</li>
<li><p>考试时间  前端问题—-后端时间已经精确到时分秒</p>
</li>
<li><p>试题默认数量  RepoController的/exam/api/repo/detail   自带通过id查询数量的方法</p>
</li>
<li><p>移动试题  </p>
</li>
<li><p>成绩显示姓名 本地回显没问题</p>
<p><img src="https://job-wyg.oss-cn-beijing.aliyuncs.com/image-20211013130356858.png" alt="image-20211013130356858"></p>
</li>
<li><p>考试次数大于2  增加方法 localhost:8101/exam/api/exam/exam/isValid</p>
</li>
</ol>
<h3 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h3><ol>
<li><p>题库类别  –添加字段</p>
<p><img src="https://job-wyg.oss-cn-beijing.aliyuncs.com/image-20211012162844210.png" alt="image-20211012162844210"></p>
</li>
<li><p>考试时间</p>
<p><img src="https://job-wyg.oss-cn-beijing.aliyuncs.com/image-20211012162641407.png" alt="image-20211012162641407"></p>
</li>
<li><p>试题默认<img src="https://job-wyg.oss-cn-beijing.aliyuncs.com/image-20211012162559390.png" alt="image-20211012162559390">总数量</p>
</li>
<li><p>移动试题</p>
<p><img src="https://job-wyg.oss-cn-beijing.aliyuncs.com/image-20211012162903396.png" alt="image-20211012162903396"></p>
</li>
<li><p>成绩处显示姓名</p>
<p><img src="https://job-wyg.oss-cn-beijing.aliyuncs.com/image-20211012162814949.png" alt="image-20211012162814949"></p>
</li>
<li><p>考试次数大于2</p>
<p><img src="https://job-wyg.oss-cn-beijing.aliyuncs.com/image-20211012163049400.png" alt="image-20211012163049400"></p>
</li>
</ol>
<h3 id="疑问"><a href="#疑问" class="headerlink" title="疑问"></a>疑问</h3><h3 id="处理-1"><a href="#处理-1" class="headerlink" title="处理"></a>处理</h3><ol>
<li></li>
</ol>
<h3 id="解决-1"><a href="#解决-1" class="headerlink" title="解决"></a>解决</h3><p>1. </p>
]]></content>
  </entry>
  <entry>
    <title>linux操作</title>
    <url>/2021/10/07/os/linux%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<h3 id="简单操作"><a href="#简单操作" class="headerlink" title="简单操作"></a>简单操作</h3><ol>
<li><p>ls -a 连同.文件一起查看</p>
</li>
<li><p>解压  tar xzf ..gz</p>
</li>
<li><p>删除非空文件夹 rm -rf aaa</p>
</li>
<li><p>搜索文件</p>
<p> find / -name jvmm</p>
</li>
<li><p>查看文件夹大小</p>
<ol>
<li><p>以byte为单位</p>
<p>ls -ll</p>
</li>
<li><p>以KB MB为单位</p>
<p>ls -lh</p>
</li>
</ol>
</li>
</ol>
<span id="more"></span>

<ol start="7">
<li> 查看位数</li>
</ol>
<p>   uname -a</p>
<ol start="8">
<li><p>查看是ubantu还是centos</p>
<ol>
<li>cat /etc/issue</li>
<li>uname -n</li>
</ol>
</li>
<li><p>shell可执行</p>
<p> chmod +x a.sh</p>
</li>
<li><p>修改文件夹/文件名</p>
<p>mv f1 f2</p>
</li>
</ol>
<h3 id="进程、端口"><a href="#进程、端口" class="headerlink" title="进程、端口"></a>进程、端口</h3><ol>
<li><p>查看redis进程 ps -ef | grep redis</p>
</li>
<li><p>查看端口 lsof -i:8000  </p>
<p>netstat -lnp|grep 3306</p>
</li>
<li><p>杀死进程pid   kill 1002</p>
</li>
</ol>
<h3 id="vim"><a href="#vim" class="headerlink" title="vim"></a>vim</h3><ol>
<li>搜索：c    /str</li>
</ol>
]]></content>
      <categories>
        <category>os</category>
      </categories>
  </entry>
  <entry>
    <title>linux配置</title>
    <url>/2021/10/07/os/linux%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h3 id="常用配置"><a href="#常用配置" class="headerlink" title="常用配置"></a>常用配置</h3><ol>
<li><p>ssh免密登录</p>
<ol>
<li><p>编写主机名 gedit /etc/hostname</p>
<p>master</p>
</li>
<li><p>临时设置hostname hostname master</p>
</li>
<li><p>上一步生效 bash</p>
</li>
<li><p>验证主机名 hostname</p>
<span id="more"></span></li>
<li><p>关闭防火墙systemctl stop/disable firewalld/firewalld.service   </p>
</li>
<li><p>ifconfig获取Ipc</p>
<p><img src="https://job-wyg.oss-cn-beijing.aliyuncs.com/image-20211007023706983.png" alt="image-20211007023706983"></p>
</li>
<li><p>修改主机—ip 列表  vi /etc/hosts</p>
<p>10.42.0.93 master</p>
</li>
<li><p>时钟同步</p>
</li>
<li><p>Ping主机名测试  ping master -c 3</p>
</li>
<li><p>*0生成ssh-key   ssh-keygen -t rsa</p>
</li>
<li><p>*1密钥<font color="red">cat ~/.ssh/id_rsa.pub &gt;&gt; ~/.ssh/authorized_keys</font>&gt;</p>
</li>
<li><p>*2chmod 600 ~/.ssh/authorized_keys</p>
</li>
<li><p>*3复制scp <del>/.ssh/authorized_keys zkpk@slave01:</del>/.ssh</p>
</li>
<li><p>*4换节点生成密钥ssh-keygen -t rsa</p>
</li>
<li><p>复制scp <del>/.ssh/authorized_keys zkpk@slave02:</del>/.ssh/temp</p>
</li>
<li><p>覆盖 cat t authorized &gt; authorized_keys</p>
<p>或者追加cat t &gt;&gt; authorized _keys</p>
<p>这个key在那个用户就能对那个用户免密</p>
</li>
</ol>
</li>
<li><p>不同用户名</p>
<ol>
<li><p>在.ssh下创建最低644文件config</p>
<p>Host </p>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line">Host es</span><br><span class="line"><span class="keyword">user</span> <span class="title">root</span></span><br></pre></td></tr></table></figure></li>
</ol>
</li>
<li><p>windows下的host</p>
<p>C:\Windows\System32\drivers\etc</p>
</li>
<li></li>
</ol>
<h3 id="其他配置"><a href="#其他配置" class="headerlink" title="其他配置"></a>其他配置</h3><ol>
<li><p>中文输入法</p>
<ol>
<li>下载中文输入法yum install ibus-libpinyin</li>
<li>在设置添加输入数据源汉语(pinyin)</li>
<li>按win+空格切换</li>
</ol>
</li>
<li><p>配置时钟同步</p>
<ol>
<li>定时任务 crontab -e</li>
<li>0 1 * * * /usr/sbin/ntpdate cn.pool.ntp.org</li>
<li>手动：/usr/sbin/ntpdate cn.pool.ntp.or</li>
</ol>
</li>
<li><p>防火墙</p>
<ol>
<li>查看状态 systemctl status firewalld.service</li>
<li>关闭systemctl stop/disable firewalld.service </li>
</ol>
</li>
<li><p>localtime换成UTC time</p>
<ol>
<li>rm /etc/localtime</li>
<li>ln -s /usr/share/zoneinfo/Universal /etc/localtime</li>
</ol>
</li>
<li><p><a href="https://www.cnblogs.com/morninglight/p/6420414.html">参考-linux 刷新环境变量</a></p>
<p>方法一：source /etc/profile<br>在/etc/profile文件中添加变量【对所有用户生效（永久的）】<br>方法二：source .bash_profile<br>在用户目录下的.bash_profile文件中增加变量【对单一用户生效（永久的）】</p>
<p>方法三：直接运行export命令定义变量【只对当前shell（BASH）有效（临时的）】<br>export PATH=/usr/local/webserver/php/bin:$PATH</p>
</li>
<li><p>开启网络服务</p>
<ol>
<li>systemctl restart network</li>
<li>参考xshell.1.4</li>
</ol>
</li>
<li><p>下载c++ yum install gcc-c++ -y</p>
<ol>
<li>make MALLOC=libc </li>
</ol>
</li>
</ol>
<h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><ol>
<li><p>redis</p>
<ol>
<li><p>tar -zxvf</p>
</li>
<li><p>下载gcc语言环境,tcl</p>
<p>root-&gt;yum install gcc</p>
<p>root-&gt;yum install tcl </p>
</li>
<li><p>cd redis—&gt;make</p>
</li>
<li><p>make install</p>
</li>
<li><p>启动</p>
<ol>
<li>前台启动redis-server</li>
<li>后台启动  –&gt;cp redis.conf–&gt;etc  </li>
<li>daemonize yes</li>
<li>启动usr/local/bin/redis-server /etc/redis.conf </li>
<li>关闭 redis-cli shutdown</li>
</ol>
</li>
</ol>
</li>
</ol>
]]></content>
      <categories>
        <category>os</category>
      </categories>
  </entry>
  <entry>
    <title>linux配置web</title>
    <url>/2021/11/03/os/linux%E9%85%8D%E7%BD%AEweb/</url>
    <content><![CDATA[<h3 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h3><ol>
<li><p>安装wget</p>
<p>yum -y install wget</p>
<span id="more"></span></li>
</ol>
<h3 id="配置java"><a href="#配置java" class="headerlink" title="配置java"></a>配置java</h3><ol>
<li><p>下载</p>
<p>官网下载 jdk-8u202-linux-x64.tar.gz</p>
</li>
<li><p>scp远程复制粘贴 或者xftp</p>
</li>
<li><p>解压到指定路径</p>
<p> tar -xzvf /home/zkpk/tgz/jdk-8u131-linux-x64.tar.gz -C /usr/java</p>
</li>
<li><p>添加环境变量 vim ~/.bash_profile 追加</p>
<p>export JAVA_HOME=/usr/java/jdk1.8.0_131/</p>
<p>export PATH=$JAVA_HOME/bin:$PATH</p>
</li>
<li><p>生效环境变量</p>
<p>source ~/.bash_profile</p>
</li>
<li><p>验证</p>
<p>java -version</p>
</li>
</ol>
<h3 id="配置mysql"><a href="#配置mysql" class="headerlink" title="配置mysql"></a>配置mysql</h3><ol>
<li><p>下载rmp包</p>
<p> wget <a href="http://dev.mysql.com/get/mysql57-community-release-el7-8.noarch.rpm">http://dev.mysql.com/get/mysql57-community-release-el7-8.noarch.rpm</a></p>
</li>
<li><p>安装mysql源</p>
<p> yum -y localinstall mysql57-community-release-el7-8.noarch.rpm</p>
</li>
<li><p>查看是否安装完成</p>
<p>yum repolist enabled | grep “mysql.<em>-community.</em>“</p>
</li>
<li><p>安装Msyql</p>
<p>yum module disable mysql</p>
<p>yum -y install mysql-community-server</p>
</li>
<li><p>启动mysql</p>
<p>systemctl start mysqld</p>
</li>
<li><p>查看Mysql状态</p>
<p>systemctl status mysqld</p>
</li>
<li><p>设置开机自动启动</p>
<p>systemctl enable mysqld<br>systemctl daemon-reload</p>
</li>
<li><p>配置mysql密码</p>
<ol>
<li><p>查看随机生成的密码</p>
<p>grep ‘temporary password’ /var/log/mysqld.log</p>
</li>
<li><p>用随机密码登录</p>
<p>mysql -uroot -p  。。。</p>
</li>
<li><p>默认开启密码安全长度检查插件</p>
<p>查看密码检查策略</p>
<p>show variables like ‘%password%’;</p>
</li>
<li><p>修改密码策略</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">set</span> <span class="keyword">global</span> validate_password_policy<span class="operator">=</span><span class="number">0</span>;</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">set</span> <span class="keyword">global</span> validate_password_length<span class="operator">=</span><span class="number">4</span>;</span><br></pre></td></tr></table></figure></li>
<li><p>修改密码</p>
<p>ALTER USER ‘root‘@’localhost’ IDENTIFIED BY ‘root’;</p>
<p>或者 set password for ‘root‘@’localhost’=password(‘root’);</p>
</li>
<li><p>配置允许远程连接</p>
</li>
<li><p>重启mysql</p>
<p>service mysqld restart</p>
</li>
</ol>
</li>
</ol>
]]></content>
      <categories>
        <category>os</category>
      </categories>
  </entry>
  <entry>
    <title>linux防护墙与网络配置</title>
    <url>/2021/11/04/os/linux%E9%98%B2%E7%81%AB%E5%A2%99-%E7%BD%91%E7%BB%9C%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h3 id="防火墙"><a href="#防火墙" class="headerlink" title="防火墙"></a>防火墙</h3><ol>
<li>查看状态 systemctl status firewalld.service</li>
<li>关闭systemctl stop/disable firewalld.service </li>
<li>重启防火墙 systemctl restart firewalld </li>
</ol>
<h3 id="端口"><a href="#端口" class="headerlink" title="端口"></a>端口</h3><ol>
<li><p>查看端口是否开放</p>
<p>firewall-cmd –query-port=1521/tcp</p>
</li>
<li><p>查看所有开放的端口</p>
<span id="more"></span>

<p>firewall-cmd –zone=public –list-ports</p>
</li>
<li><p>开启、关闭某个端口</p>
<p>firewall-cmd –zone=public –add-port=1521/tcp –permanent</p>
<p>firewall-cmd –zone=public –remove-port=1521/tcp –permanent</p>
</li>
<li><p>开启、关闭连续端口</p>
<p>firewall-cmd –zone=public –add-port=1000-2000/tcp –permanent</p>
<p>firewall-cmd –zone= public –remove-port=1000-2000/tcp –permanent </p>
</li>
<li><p>重新加载配置文件</p>
<p>firewall-cmd –reload </p>
</li>
</ol>
]]></content>
      <categories>
        <category>os</category>
      </categories>
  </entry>
  <entry>
    <title>bean生命周期</title>
    <url>/2021/10/21/spring/Bean%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/</url>
    <content><![CDATA[<h3 id="Bean声明周期"><a href="#Bean声明周期" class="headerlink" title="Bean声明周期"></a>Bean声明周期</h3><p><img src="https://job-wyg.oss-cn-beijing.aliyuncs.com/image-20211021203128542.png" alt="image-20211021203128542"></p>
<ol>
<li><p><a href="https://www.cnblogs.com/javazhiyin/p/10905294.html">整体步骤-摘自</a>    </p>
<ol>
<li>Spring启动，查找并加载需要被Spring管理的bean，进行Bean的实例化</li>
<li>Bean实例化后对将Bean的引入和值注入到Bean的属性中</li>
<li>如果Bean实现了BeanNameAware接口的话，Spring将Bean的Id传递给setBeanName()方法</li>
<li>如果Bean实现了BeanFactoryAware接口的话，Spring将调用setBeanFactory()方法，将BeanFactory容器实例传入</li>
<li>如果Bean实现了ApplicationContextAware接口的话，Spring将调用Bean的setApplicationContext()方法，将bean所在应用上下文引用传入进来。</li>
<li>如果Bean实现了BeanPostProcessor接口，Spring就将调用他们的postProcessBeforeInitialization()方法。</li>
<li>如果Bean 实现了InitializingBean接口，Spring将调用他们的afterPropertiesSet()方法。类似的，如果bean使用init-method声明了初始化方法，该方法也会被调用</li>
<li>如果Bean 实现了BeanPostProcessor接口，Spring就将调用他们的postProcessAfterInitialization()方法。</li>
<li>此时，Bean已经准备就绪，可以被应用程序使用了。他们将一直驻留在应用上下文中，直到应用上下文被销毁。</li>
<li>如果bean实现了DisposableBean接口，Spring将调用它的destory()接口方法，同样，如果bean使用了destory-method 声明销毁方法，该方法也会被调用。</li>
</ol>
</li>
<li><p>创建声明周期<br>1. </p>
</li>
<li><p>特别的</p>
<ol>
<li><p>@componet</p>
<ol>
<li><p>这个类就会在运行的时候放入单例池</p>
<ol>
<li>pring通过它的构造方法–&gt;默认无</li>
<li>或者用@autoware注解加在指定注解上。</li>
<li>对于有参的构造方法，从spring容器中找到对应的<ol>
<li>现根据类型，如果找到多个，再根据名字找</li>
<li>先 by Type</li>
<li>byName 容器里面可以有很多名称不一样但同类的bean</li>
</ol>
</li>
</ol>
</li>
<li><p>可以作为别人的依赖/注入bean. @autuware</p>
</li>
<li><p>可以注入属性@value</p>
</li>
<li><p>@PostConstruct.Method</p>
<p>初始化前，运行这个方法</p>
<p>这样能够处理一些配置文件不能处理的属性。</p>
</li>
<li><p>implements InitializiBean 对于实现了这个接口的componet</p>
<p>@override</p>
<p>初始化(属性注入完后运行这个方法)  public void AfterProper</p>
</li>
<li><p>初始化后</p>
<ol>
<li>AOP–&gt;代理对象</li>
</ol>
</li>
<li><p>对应于注入，基于反射+注解</p>
<p>扫描注解，扫描到通过反射+池子注入</p>
</li>
<li></li>
</ol>
</li>
</ol>
</li>
<li><p>一些官方方法</p>
<ol>
<li>doCreateBean</li>
</ol>
</li>
</ol>
]]></content>
      <categories>
        <category>spring</category>
      </categories>
  </entry>
  <entry>
    <title>spring配置文件</title>
    <url>/2021/10/09/spring/spring-%E9%85%8D%E7%BD%AE1/</url>
    <content><![CDATA[<h3 id="注解配置"><a href="#注解配置" class="headerlink" title="注解配置"></a>注解配置</h3><ol>
<li><p>引入properites</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PropertySource(&quot;classpath:config.properties&quot;)</span></span><br></pre></td></tr></table></figure></li>
<li><p>注入普通字符串</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Debug</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Value(&quot;normal&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String myDebug; <span class="comment">// 注入普通字符串</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<span id="more"></span></li>
<li><p>@value接受类型</p>
<ol>
<li><p>string</p>
</li>
<li><p>boolean</p>
</li>
<li><p>long</p>
</li>
<li><p>表达式</p>
</li>
<li></li>
<li><p>强大</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Value(&quot;#&#123;$&#123;EMAIL_CODE_EXPIRATION_TIME&#125;&#125;&quot;)</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">long</span> EMAIL_CODE_EXPIRATION_TIME;</span><br></pre></td></tr></table></figure>

<p>自定义配置文件    ${}取得</p>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@PropertySource(&quot;classpath:config.properties&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConfigProperty</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;name&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h3><ol>
<li><p>yml&gt;yaml&gt;properties</p>
</li>
<li><p>yml能调用Pro ,当有yml和pro的时候会优先使用pro,如果yml没特定内容，就会使用pro</p>
<p><img src="https://job-wyg.oss-cn-beijing.aliyuncs.com/image-20211026215034623.png" alt="image-20211026215034623"></p>
</li>
</ol>
<h3 id="yml"><a href="#yml" class="headerlink" title="yml"></a>yml</h3><ol>
<li><p>yml1</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line">  <span class="attr">servlet:</span></span><br><span class="line">    <span class="attr">context-path:</span> <span class="string">/</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:8&amp;zeroDateTimeBehavior=convertToNull&amp;allowMultiQueries=true&amp;useSSL=false</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">root</span></span><br><span class="line">  <span class="attr">jpa:</span></span><br><span class="line">    <span class="attr">database:</span> <span class="string">MySQL</span></span><br><span class="line">    <span class="attr">database-platform:</span> <span class="string">org.hibernate.dialect.MySQL5InnoDBDialect</span></span><br><span class="line">    <span class="attr">show-sql:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">hibernate:</span></span><br><span class="line">      <span class="attr">ddl-auto:</span> <span class="string">update</span></span><br><span class="line">  <span class="attr">devtools:</span></span><br><span class="line">    <span class="attr">restart:</span></span><br><span class="line">      <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">additional-paths:</span> <span class="string">src/main/java</span></span><br></pre></td></tr></table></figure></li>
<li><p>yml2–dev</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#配置数据源</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">druid:</span></span><br><span class="line">      <span class="attr">db-type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line">      <span class="attr">driverClassName:</span> <span class="string">net.sf.log4jdbc.sql.jdbcapi.DriverSpy</span></span><br><span class="line">      <span class="attr">url:</span> <span class="string">jdbc:serverTimezone=Asia/Shanghai&amp;characterEncoding=utf8&amp;useSSL=false</span></span><br><span class="line">      <span class="attr">username:</span> <span class="string">$&#123;DB_USER:root&#125;</span></span><br><span class="line">      <span class="attr">password:</span> <span class="string">$&#123;DB_PWD:root&#125;</span></span><br><span class="line">      <span class="comment"># 初始连接数</span></span><br><span class="line">      <span class="attr">initial-size:</span> <span class="number">5</span></span><br><span class="line">      <span class="comment"># 最小连接数</span></span><br><span class="line">      <span class="attr">min-idle:</span> <span class="number">15</span></span><br><span class="line">      <span class="comment"># 最大连接数</span></span><br><span class="line">      <span class="attr">max-active:</span> <span class="number">30</span></span><br><span class="line">      <span class="comment"># 超时时间(以秒数为单位)</span></span><br><span class="line">      <span class="attr">remove-abandoned-timeout:</span> <span class="number">180</span></span><br><span class="line">      <span class="comment"># 获取连接超时时间</span></span><br><span class="line">      <span class="attr">max-wait:</span> <span class="number">3000</span></span><br><span class="line">      <span class="comment"># 连接有效性检测时间</span></span><br><span class="line">      <span class="attr">time-between-eviction-runs-millis:</span> <span class="number">60000</span></span><br><span class="line">      <span class="comment"># 连接在池中最小生存的时间</span></span><br><span class="line">      <span class="attr">min-evictable-idle-time-millis:</span> <span class="number">300000</span></span><br><span class="line">      <span class="comment"># 连接在池中最大生存的时间</span></span><br><span class="line">      <span class="attr">max-evictable-idle-time-millis:</span> <span class="number">900000</span></span><br><span class="line">      <span class="comment"># 指明连接是否被空闲连接回收器(如果有)进行检验.如果检测失败,则连接将被从池中去除</span></span><br><span class="line">      <span class="attr">test-while-idle:</span> <span class="literal">true</span></span><br><span class="line">      <span class="comment"># 指明是否在从池中取出连接前进行检验,如果检验失败, 则从池中去除连接并尝试取出另一个</span></span><br><span class="line">      <span class="attr">test-on-borrow:</span> <span class="literal">true</span></span><br><span class="line">      <span class="comment"># 是否在归还到池中前进行检验</span></span><br><span class="line">      <span class="attr">test-on-return:</span> <span class="literal">false</span></span><br><span class="line">      <span class="comment"># 检测连接是否有效</span></span><br><span class="line">      <span class="attr">validation-query:</span> <span class="string">select</span> <span class="number">1</span></span><br><span class="line">      <span class="comment"># 配置监控统计</span></span><br><span class="line">      <span class="attr">webStatFilter:</span></span><br><span class="line">        <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">stat-view-servlet:</span></span><br><span class="line">        <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">url-pattern:</span> <span class="string">/druid/*</span></span><br><span class="line">        <span class="attr">reset-enable:</span> <span class="literal">false</span></span><br><span class="line">      <span class="attr">filter:</span></span><br><span class="line">        <span class="attr">stat:</span></span><br><span class="line">          <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">          <span class="comment"># 记录慢SQL</span></span><br><span class="line">          <span class="attr">log-slow-sql:</span> <span class="literal">true</span></span><br><span class="line">          <span class="attr">slow-sql-millis:</span> <span class="number">1000</span></span><br><span class="line">          <span class="attr">merge-sql:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">wall:</span></span><br><span class="line">          <span class="attr">config:</span></span><br><span class="line">            <span class="attr">multi-statement-allow:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 登录相关配置</span></span><br><span class="line"><span class="attr">login:</span></span><br><span class="line">  <span class="comment"># 登录缓存</span></span><br><span class="line">  <span class="attr">cache-enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment">#  是否限制单用户登录</span></span><br><span class="line">  <span class="attr">single-login:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment">#  验证码</span></span><br><span class="line">  <span class="attr">login-code:</span></span><br><span class="line">    <span class="comment">#  验证码类型配置 查看 LoginProperties 类</span></span><br><span class="line">    <span class="attr">code-type:</span> <span class="string">arithmetic</span></span><br><span class="line">    <span class="comment">#  登录图形验证码有效时间/分钟</span></span><br><span class="line">    <span class="attr">expiration:</span> <span class="number">2</span></span><br><span class="line">    <span class="comment">#  验证码高度</span></span><br><span class="line">    <span class="attr">width:</span> <span class="number">111</span></span><br><span class="line">    <span class="comment">#  验证码宽度</span></span><br><span class="line">    <span class="attr">height:</span> <span class="number">36</span></span><br><span class="line">    <span class="comment"># 内容长度</span></span><br><span class="line">    <span class="attr">length:</span> <span class="number">2</span></span><br><span class="line">    <span class="comment"># 字体名称，为空则使用默认字体</span></span><br><span class="line">    <span class="attr">font-name:</span></span><br><span class="line">    <span class="comment"># 字体大小</span></span><br><span class="line">    <span class="attr">font-size:</span> <span class="number">25</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#jwt</span></span><br><span class="line"><span class="attr">jwt:</span></span><br><span class="line">  <span class="attr">header:</span> <span class="string">Authorization</span></span><br><span class="line">  <span class="comment"># 令牌前缀</span></span><br><span class="line">  <span class="attr">token-start-with:</span> <span class="string">Bearer</span></span><br><span class="line">  <span class="comment"># 必须使用最少88位的Base64对该令牌进行编码</span></span><br><span class="line">  <span class="comment"># 令牌过期时间 此处单位/毫秒 ，默认4小时，可在此网站生成 https://www.convertworld.com/zh-hans/time/milliseconds.html</span></span><br><span class="line">  <span class="attr">token-validity-in-seconds:</span> <span class="number">14400000</span></span><br><span class="line">  <span class="comment"># 在线用户key</span></span><br><span class="line">  <span class="attr">online-key:</span> <span class="string">online-token-</span></span><br><span class="line">  <span class="comment"># 验证码</span></span><br><span class="line">  <span class="attr">code-key:</span> <span class="string">code-key-</span></span><br><span class="line">  <span class="comment"># token 续期检查时间范围（默认30分钟，单位毫秒），在token即将过期的一段时间内用户操作了，则给用户的token续期</span></span><br><span class="line">  <span class="attr">detect:</span> <span class="number">1800000</span></span><br><span class="line">  <span class="comment"># 续期时间范围，默认1小时，单位毫秒</span></span><br><span class="line">  <span class="attr">renew:</span> <span class="number">3600000</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#是否允许生成代码，生产环境设置为false</span></span><br><span class="line"><span class="attr">generator:</span></span><br><span class="line">  <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#是否开启 swagger-ui</span></span><br><span class="line"><span class="attr">swagger:</span></span><br><span class="line">  <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># IP 本地解析</span></span><br><span class="line"><span class="attr">ip:</span></span><br><span class="line">  <span class="attr">local-parsing:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 文件存储路径</span></span><br><span class="line"><span class="attr">file:</span></span><br><span class="line">  <span class="attr">mac:</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">~/file/</span></span><br><span class="line">    <span class="attr">avatar:</span> <span class="string">~/avatar/</span></span><br><span class="line">  <span class="attr">linux:</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">/home/eladmin/file/</span></span><br><span class="line">    <span class="attr">avatar:</span> <span class="string">/home/eladmin/avatar/</span></span><br><span class="line">  <span class="attr">windows:</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">C:\eladmin\file\</span></span><br><span class="line">    <span class="attr">avatar:</span> <span class="string">C:\eladmin\avatar\</span></span><br><span class="line">  <span class="comment"># 文件大小 /M</span></span><br><span class="line">  <span class="attr">maxSize:</span> <span class="number">100</span></span><br><span class="line">  <span class="attr">avatarMaxSize:</span> <span class="number">5</span></span><br></pre></td></tr></table></figure></li>
<li><p>yml3-prod</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#配置数据源</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">devtools:</span></span><br><span class="line">    <span class="attr">restart:</span></span><br><span class="line">      <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">additional-paths:</span> <span class="string">src/main/java</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">druid:</span></span><br><span class="line">      <span class="attr">db-type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line">      <span class="attr">driverClassName:</span> <span class="string">net.sf.log4jdbc.sql.jdbcapi.DriverSpy</span></span><br><span class="line">      <span class="attr">url:</span> <span class="string">jdbc:log4jdbc:mysql:serverTimezone=Asia/Shanghai&amp;characterEncoding=utf8&amp;useSSL=false</span></span><br><span class="line">      <span class="attr">username:</span> <span class="string">$&#123;D</span></span><br><span class="line">      <span class="comment"># 初始连接数</span></span><br><span class="line">      <span class="attr">initial-size:</span> <span class="number">5</span></span><br><span class="line">      <span class="comment"># 最小连接数</span></span><br><span class="line">      <span class="attr">min-idle:</span> <span class="number">15</span></span><br><span class="line">      <span class="comment"># 最大连接数</span></span><br><span class="line">      <span class="attr">max-active:</span> <span class="number">30</span></span><br><span class="line">      <span class="comment"># 获取连接超时时间</span></span><br><span class="line">      <span class="attr">max-wait:</span> <span class="number">5000</span></span><br><span class="line">      <span class="comment"># 连接有效性检测时间</span></span><br><span class="line">      <span class="attr">time-between-eviction-runs-millis:</span> <span class="number">60000</span></span><br><span class="line">      <span class="comment"># 连接在池中最小生存的时间</span></span><br><span class="line">      <span class="attr">min-evictable-idle-time-millis:</span> <span class="number">300000</span></span><br><span class="line">      <span class="comment"># 连接在池中最大生存的时间</span></span><br><span class="line">      <span class="attr">max-evictable-idle-time-millis:</span> <span class="number">900000</span></span><br><span class="line">      <span class="comment"># 指明连接是否被空闲连接回收器(如果有)进行检验.如果检测失败,则连接将被从池中去除</span></span><br><span class="line">      <span class="attr">test-while-idle:</span> <span class="literal">true</span></span><br><span class="line">      <span class="comment"># 指明是否在从池中取出连接前进行检验,如果检验失败, 则从池中去除连接并尝试取出另一个</span></span><br><span class="line">      <span class="attr">test-on-borrow:</span> <span class="literal">true</span></span><br><span class="line">      <span class="comment"># 是否在归还到池中前进行检验</span></span><br><span class="line">      <span class="attr">test-on-return:</span> <span class="literal">false</span></span><br><span class="line">      <span class="comment"># 检测连接是否有效</span></span><br><span class="line">      <span class="attr">validation-query:</span> <span class="string">select</span> <span class="number">1</span></span><br><span class="line">      <span class="comment"># 配置监控统计</span></span><br><span class="line">      <span class="attr">webStatFilter:</span></span><br><span class="line">        <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">stat-view-servlet:</span></span><br><span class="line">        <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">        <span class="comment"># 控制台管理用户名和密码</span></span><br><span class="line">        <span class="attr">url-pattern:</span> <span class="string">/druid/*</span></span><br><span class="line">        <span class="attr">reset-enable:</span> <span class="literal">false</span></span><br><span class="line">        <span class="attr">login-username:</span> <span class="string">admin</span></span><br><span class="line">        <span class="attr">login-password:</span> <span class="number">123456</span></span><br><span class="line">      <span class="attr">filter:</span></span><br><span class="line">        <span class="attr">stat:</span></span><br><span class="line">          <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">          <span class="comment"># 记录慢SQL</span></span><br><span class="line">          <span class="attr">log-slow-sql:</span> <span class="literal">true</span></span><br><span class="line">          <span class="attr">slow-sql-millis:</span> <span class="number">1000</span></span><br><span class="line">          <span class="attr">merge-sql:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">wall:</span></span><br><span class="line">          <span class="attr">config:</span></span><br><span class="line">            <span class="attr">multi-statement-allow:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 登录相关配置</span></span><br><span class="line"><span class="attr">login:</span></span><br><span class="line">  <span class="comment"># 登录缓存</span></span><br><span class="line">  <span class="attr">cache-enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment">#  是否限制单用户登录</span></span><br><span class="line">  <span class="attr">single-login:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment">#  验证码</span></span><br><span class="line">  <span class="attr">login-code:</span></span><br><span class="line">    <span class="comment">#  验证码类型配置 查看 LoginProperties 类</span></span><br><span class="line">    <span class="attr">code-type:</span> <span class="string">arithmetic</span></span><br><span class="line">    <span class="comment">#  登录图形验证码有效时间/分钟</span></span><br><span class="line">    <span class="attr">expiration:</span> <span class="number">2</span></span><br><span class="line">    <span class="comment">#  验证码高度</span></span><br><span class="line">    <span class="attr">width:</span> <span class="number">111</span></span><br><span class="line">    <span class="comment">#  验证码宽度</span></span><br><span class="line">    <span class="attr">height:</span> <span class="number">36</span></span><br><span class="line">    <span class="comment"># 内容长度</span></span><br><span class="line">    <span class="attr">length:</span> <span class="number">2</span></span><br><span class="line">    <span class="comment"># 字体名称，为空则使用默认字体，如遇到线上乱码，设置其他字体即可</span></span><br><span class="line">    <span class="attr">font-name:</span></span><br><span class="line">    <span class="comment"># 字体大小</span></span><br><span class="line">    <span class="attr">font-size:</span> <span class="number">25</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#jwt</span></span><br><span class="line"><span class="attr">jwt:</span></span><br><span class="line">  <span class="attr">header:</span> <span class="string">Authorization</span></span><br><span class="line">  <span class="comment"># 令牌前缀</span></span><br><span class="line">  <span class="attr">token-start-with:</span> <span class="string">Bearer</span></span><br><span class="line">  <span class="comment"># 必须使用最少88位的Base64对该令牌进行编码</span></span><br><span class="line">  <span class="attr">base64-secret:</span> <span class="string">ZmQ0GI5</span></span><br><span class="line">  <span class="comment"># 令牌过期时间 此处单位/毫秒 ，默认2小时，可在此网站生成 https://www.convertworld.com/zh-hans/time/milliseconds.html</span></span><br><span class="line">  <span class="attr">token-validity-in-seconds:</span> <span class="number">7200000</span></span><br><span class="line">  <span class="comment"># 在线用户key</span></span><br><span class="line">  <span class="attr">online-key:</span> <span class="string">online-token-</span></span><br><span class="line">  <span class="comment"># 验证码</span></span><br><span class="line">  <span class="attr">code-key:</span> <span class="string">code-key-</span></span><br><span class="line">  <span class="comment"># token 续期检查时间范围（默认30分钟，单位默认毫秒），在token即将过期的一段时间内用户操作了，则给用户的token续期</span></span><br><span class="line">  <span class="attr">detect:</span> <span class="number">1800000</span></span><br><span class="line">  <span class="comment"># 续期时间范围，默认 1小时，这里单位毫秒</span></span><br><span class="line">  <span class="attr">renew:</span> <span class="number">3600000</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># IP 本地解析</span></span><br><span class="line"><span class="attr">ip:</span></span><br><span class="line">  <span class="attr">local-parsing:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#是否允许生成代码，生产环境设置为false</span></span><br><span class="line"><span class="attr">generator:</span></span><br><span class="line">  <span class="attr">enabled:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#如果生产环境要开启swagger，需要配置请求地址</span></span><br><span class="line"><span class="comment">#springfox:</span></span><br><span class="line"><span class="comment">#  documentation:</span></span><br><span class="line"><span class="comment">#    swagger:</span></span><br><span class="line"><span class="comment">#      v2:</span></span><br><span class="line"><span class="comment">#        host: # 接口域名或外网ip</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#是否开启 swagger-ui</span></span><br><span class="line"><span class="attr">swagger:</span></span><br><span class="line">  <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 文件存储路径</span></span><br><span class="line"><span class="attr">file:</span></span><br><span class="line">  <span class="attr">mac:</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">~/file/</span></span><br><span class="line">    <span class="attr">avatar:</span> <span class="string">~/avatar/</span></span><br><span class="line">  <span class="attr">linux:</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">/home/eladmin/file/</span></span><br><span class="line">    <span class="attr">avatar:</span> <span class="string">/home/eladmin/avatar/</span></span><br><span class="line">  <span class="attr">windows:</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">C:\eladmin\file\</span></span><br><span class="line">    <span class="attr">avatar:</span> <span class="string">C:\eladmin\avatar\</span></span><br><span class="line">  <span class="comment"># 文件大小 /M</span></span><br><span class="line">  <span class="attr">maxSize:</span> <span class="number">100</span></span><br><span class="line">  <span class="attr">avatarMaxSize:</span> <span class="number">5</span></span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>spring</category>
        <category>配置</category>
      </categories>
  </entry>
  <entry>
    <title>spring3</title>
    <url>/2021/10/28/spring/spring3/</url>
    <content><![CDATA[<h3 id="知识"><a href="#知识" class="headerlink" title="知识"></a>知识</h3><ol>
<li><p>对于非@Compoent 如需要serviceImpl可以在构造函数中传入这个service</p>
<p>如easyExcel的listener就需要</p>
</li>
<li></li>
</ol>
]]></content>
      <categories>
        <category>spring</category>
      </categories>
  </entry>
  <entry>
    <title>springAOP</title>
    <url>/2021/10/21/spring/springAOP/</url>
    <content><![CDATA[<h3 id="代理对象"><a href="#代理对象" class="headerlink" title="代理对象"></a>代理对象</h3><ol>
<li>循环依赖</li>
<li></li>
</ol>
]]></content>
      <categories>
        <category>spring</category>
      </categories>
  </entry>
  <entry>
    <title>springBoot</title>
    <url>/2021/09/29/spring/springBoot/</url>
    <content><![CDATA[<h3 id="spring-boot-starter"><a href="#spring-boot-starter" class="headerlink" title="spring-boot-starter"></a>spring-boot-starter</h3><ol>
<li>可以认为starter是一种服务（和JS的插件类似）——使得使用某个功能的开发者不需要关注各种依赖库的处理，不需要具体的配置信息，由Spring Boot自动通过classpath路径下的类发现需要的Bean，并织入bean</li>
</ol>
<span id="more"></span>]]></content>
      <categories>
        <category>spring</category>
      </categories>
  </entry>
  <entry>
    <title>SpringCloud</title>
    <url>/2021/10/06/spring/springCloud/</url>
    <content><![CDATA[<h3 id="1"><a href="#1" class="headerlink" title="1"></a>1</h3><ol>
<li><p>springCloud是一系列框架的集合</p>
</li>
<li><p>自动挡的房车</p>
</li>
<li><p>依赖.pom+配置.properties+@注解</p>
</li>
<li><p>微服务架构技术落地实现的集合体，是微服务架构下的一站式解决方案</p>
<p>服务发现——Netflix Eureka /  nacos<br>客服端负载均衡——Netflix Ribbon</p>
<p>服务调用—— netflix fergn</p>
<p>断路器——Netflix Hystrix<br>服务网关——Netflix Zuul /Sprin Cloud CateWay<br>分布式配置——Spring Cloud Config /nacos</p>
<p>消息总线 —— Spring Cloud Bus/ nacos</p>
<span id="more"></span></li>
<li><h1 id="微服务实现"><a href="#微服务实现" class="headerlink" title="微服务实现"></a>微服务实现</h1><ol>
<li>微服务架构：SpringCloud、Dubbo、SpringCloudAlibaba</li>
<li>网关–&gt;负载均衡–&gt;微服务集群–&gt;数据库</li>
</ol>
<h2 id="ribbon负载均衡"><a href="#ribbon负载均衡" class="headerlink" title="ribbon负载均衡"></a>ribbon负载均衡</h2><h2 id="nacos注册中心"><a href="#nacos注册中心" class="headerlink" title="nacos注册中心"></a>nacos注册中心</h2></li>
</ol>
<h2 id="SpringCloud"><a href="#SpringCloud" class="headerlink" title="SpringCloud"></a>SpringCloud</h2><ol>
<li>版本对应</li>
</ol>
<table>
<thead>
<tr>
<th>springCloud</th>
<th>springBoot</th>
</tr>
</thead>
<tbody><tr>
<td><a href="https://github.com/spring-cloud/spring-cloud-release/wiki/Spring-Cloud-2020.0-Release-Notes">2020.0.x</a> aka Ilford</td>
<td>2.4.x, 2.5.x (Starting with 2020.0.3)</td>
</tr>
<tr>
<td><a href="https://github.com/spring-cloud/spring-cloud-release/wiki/Spring-Cloud-Hoxton-Release-Notes">Hoxton</a><a href="https://github.com/spring-cloud/spring-cloud-release/wiki/Spring-Cloud-Hoxton-Release-Notes">Hoxton</a></td>
<td>2.2.x, 2.3.x (Starting with SR5)</td>
</tr>
<tr>
<td><a href="https://github.com/spring-projects/spring-cloud/wiki/Spring-Cloud-Greenwich-Release-Notes">Greenwich</a><a href="https://github.com/spring-projects/spring-cloud/wiki/Spring-Cloud-Greenwich-Release-Notes">Greenwich</a></td>
<td>2.1.x2.1.x</td>
</tr>
<tr>
<td><a href="https://github.com/spring-projects/spring-cloud/wiki/Spring-Cloud-Finchley-Release-Notes">Finchley</a><a href="https://github.com/spring-projects/spring-cloud/wiki/Spring-Cloud-Finchley-Release-Notes">Finchley</a></td>
<td>2.0.x2.0.x</td>
</tr>
<tr>
<td><a href="https://github.com/spring-projects/spring-cloud/wiki/Spring-Cloud-Edgware-Release-Notes">Edgware</a></td>
<td>1.5.x</td>
</tr>
<tr>
<td><a href="https://github.com/spring-projects/spring-cloud/wiki/Spring-Cloud-Dalston-Release-Notes">Dalston</a></td>
<td>1.5.x</td>
</tr>
</tbody></table>
<h2 id="1、服务拆分、"><a href="#1、服务拆分、" class="headerlink" title="1、服务拆分、"></a>1、服务拆分、</h2><ol>
<li><p>数据独立、每个模块一个数据库</p>
</li>
<li><p><strong>提供者</strong>接口暴露</p>
</li>
<li><p>业务独立</p>
</li>
<li><p><strong>消费者</strong>远程调用<strong>提供者</strong>：8080–java代码发起请求http请求—&gt;8081</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//application中注入RestTemplate</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> RestTemplate <span class="title">restTemplate</span><span class="params">(id)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> RestTemplate(param)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//service调用restTemplate</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">(order)</span></span>&#123;</span><br><span class="line">	String url=<span class="string">&quot;http://localhost:8081/user/&quot;</span>+order.getId<span class="string">&#x27;;</span></span><br><span class="line"><span class="string">    return restTemplate.getForObject(url,User.class).getName();</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="eureka注册中心"><a href="#eureka注册中心" class="headerlink" title="eureka注册中心"></a>eureka注册中心</h2><ol>
<li><p>8081可能会改变，所以需要用注册中心</p>
</li>
<li><p>消费者—注册中心—提供者</p>
</li>
<li><p>每一个模块启动，都会向eureka注册的报道登记（每30秒也会）（因为每一个模块都可能成为提供者），比如user模块：我来了，我是user。如果30s内没有报道，就会除去这个接口。</p>
</li>
<li><p>然后来了一个消费者：帮我找找user，看有没有，eureka一看有3个User，eureka就会根据负载均衡挑选一个接口。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//application中注入RestTemplate</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@LoadBalance</span> <span class="comment">//负载均衡</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> RestTemplate <span class="title">restTemplate</span><span class="params">(id)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> RestTemplate(param)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//service调用restTemplate</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">(order)</span></span>&#123;</span><br><span class="line">	String url=<span class="string">&quot;http://userservice/user/&quot;</span>+order.getId<span class="string">&#x27;;</span></span><br><span class="line"><span class="string">    return restTemplate.getForObject(url,User.class).getName();</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="Riboon负载均衡"><a href="#Riboon负载均衡" class="headerlink" title="Riboon负载均衡"></a>Riboon负载均衡</h3><ol>
<li><p>步骤</p>
<img src="https://job-wyg.oss-cn-beijing.aliyuncs.com/image-20210913002823604.png" alt="image-20210913002823604" style="zoom:80%;" /></li>
<li><p>负载均衡原理：Riboon负载均衡的原则是IRule接口实现的ZoneAvoiddanceRule&lt;—-RoundRobinRule，是轮循类。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">其中zone可以指定地方</span><br><span class="line">会优先原则离这个地方最近的服务接口</span><br><span class="line">其他调整方法：</span><br><span class="line">	<span class="meta">@Bean</span></span><br><span class="line">   	<span class="function"><span class="keyword">public</span> IRule <span class="title">testRule</span><span class="params">()</span></span>&#123;</span><br><span class="line">    	<span class="keyword">return</span> RandomRule(); 随机</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="Nacos注册中心—-gt-eureka"><a href="#Nacos注册中心—-gt-eureka" class="headerlink" title="Nacos注册中心—&gt;eureka"></a>Nacos注册中心—&gt;eureka</h3><ol>
<li><p>特点：</p>
<ol>
<li>房产中介，桥梁，注册中心</li>
</ol>
</li>
<li><p>启动</p>
<figure class="highlight dos"><table><tr><td class="code"><pre><span class="line">startup.<span class="built_in">cmd</span> -m standalone </span><br><span class="line">其中nacos中</span><br><span class="line">	standlone是单机启动</span><br><span class="line">	clusters</span><br></pre></td></tr></table></figure></li>
<li></li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>springMVC</title>
    <url>/2021/10/16/spring/springMVC/</url>
    <content><![CDATA[<h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><ol>
<li><p>spring web mvc   spring&gt;3.0</p>
<ol>
<li>支持restful</li>
<li>单例 每个servlet只有一个。所以说ssm是基于方法的，struts2是基于类的。</li>
<li>模块化，各个组件一次进行<ol>
<li>dispatch前端控制器</li>
<li>controller后端配置器</li>
<li>handler请求映射器</li>
<li>handlerAdapter处理适配器</li>
<li>ViewRelover视图解析器</li>
<li>验证器viliader Jsr303</li>
</ol>
</li>
</ol>
</li>
<li><p>springmvc  spring是容器   ioc管理对象  </p>
<ol>
<li>&lt;bean&gt; @controller @respository @ mapper</li>
<li>@controller是控制器对象  不是servlet</li>
</ol>
</li>
<li><p>springmvc 内置<strong>超级servlet</strong> 用于接受所有请求 ，然后把请求分发给controller</p>
</li>
<li><p>dispatcherservlet别名</p>
<ol>
<li>超级servlet  继承自httpserlvet</li>
<li>中央调度器</li>
<li>前端控制器</li>
</ol>
<span id="more"></span></li>
<li><p>dispatcherservlet作用</p>
<ol>
<li>接受所有请求 调用控制器对象</li>
<li>把请求响应返还个用户</li>
<li>核心方法 doDispatch(req,resp)</li>
</ol>
</li>
</ol>
<h3 id="创建springmvc项目"><a href="#创建springmvc项目" class="headerlink" title="创建springmvc项目"></a>创建springmvc项目</h3><ol>
<li><p>创建</p>
<ol>
<li><p>maven -&gt;maven-archetype-webapp模板</p>
</li>
<li><p>加入依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>wel.xml 全局serlvet配置</p>
</li>
<li><p>创建springmvc配置</p>
</li>
<li><p>创建控制器@Controller 加入@requetMapping</p>
</li>
<li><p>创建jsp</p>
</li>
</ol>
</li>
<li><p>idea配置</p>
<ol>
<li>项目结构–模块–删除部署描述  添加部署描述为web1.xml </li>
<li>更改web1.xml 为web.xml</li>
</ol>
</li>
<li><p>web.xml配置</p>
<ol>
<li>servlet<ol>
<li>name </li>
<li>url-partter</li>
</ol>
</li>
<li>过滤器 ：处理请求乱码</li>
</ol>
</li>
<li><p>st.xml配置</p>
<ol>
<li>控制器扫描器</li>
<li>视图解析器</li>
</ol>
</li>
<li><p>tomcat配置</p>
</li>
</ol>
<h3 id="知识"><a href="#知识" class="headerlink" title="知识"></a>知识</h3><ol>
<li><p>ModelAndView </p>
<ol>
<li>model 响应数据（map结构）/ javaBean    <ol>
<li>请求的最后阶段 框架会把数据加入到request作用域</li>
</ol>
</li>
<li>view jsp地址<ol>
<li>框架对视图执行forward重定向操作</li>
</ol>
</li>
</ol>
</li>
<li><p>mvc启动过程</p>
<ol>
<li><p>tomcat启动  </p>
</li>
<li><p>创建dispatcher</p>
</li>
<li><p>执行servlet.inti() 创建sprig容器webapplicationContext</p>
</li>
<li><p>把spring容器放进serlevtContext</p>
<p>getServletContext().setAttribute(name,webapplicationContext)</p>
<p>这个servlet就是dispatcher</p>
</li>
<li><p>把对象注入spring容器</p>
</li>
</ol>
</li>
<li><p>mvc请求过程</p>
<ol>
<li>diapatcher.service(req,resp)–&gt;</li>
<li>diapatcher.doDiapatcher(res,resp)–&gt;</li>
</ol>
</li>
<li><p>mvc</p>
<ol>
<li>model  返回的数据<ol>
<li>modelAndView.addObject(“name”,”王勇敢”);其实和request.serAttribute(“name”,”王勇敢”)</li>
<li>四种数据<ol>
<li>obj<ol>
<li>json的转换   和    返回设置格式 context:json是固定重复代码</li>
<li>除去重复代码：基于消息转换器.jackon<ol>
<li>加入依赖  jackson-core  jackson-databind  注意版本</li>
<li>加入注解驱动 注意是mvc的driven</li>
<li>加@ResponseBody</li>
</ol>
</li>
<li>返回json原理<ol>
<li>注解驱动的接口httpMessageConverter定义很多obj转换方法，如xml,json,txt</li>
<li> spring注入这个接口的是是实现类。</li>
</ol>
</li>
</ol>
</li>
<li>string(视图路径)</li>
<li>string,int 数据</li>
<li>void使用response.WriteStream响应（只有数据，没有视图）</li>
</ol>
</li>
</ol>
</li>
<li>view jsp</li>
<li>controller<ol>
<li>前端控制器 dispatch</li>
<li>后端控制器 controller</li>
</ol>
</li>
</ol>
</li>
<li><p>特别的</p>
<ol>
<li>@requestMapper{“a”,”b”} 访问两个路径都可以</li>
<li>url-parrten 为接受所有请求 且表示优先级最高 一般用于过滤器</li>
<li>访问资源<ol>
<li>动态资源.html/jsp的路径tomcat</li>
<li>静态资源  tomcat      因为tomcat内置一个dafaultServlet(在tomcat.conf)    启动的时候自动创建 ,<ol>
<li>处理为映射到controller.Mapping的路径</li>
<li>对所有的静态资源 </li>
<li>当某个servlet的url-patter为/或者/* 那么这个servlet就会接手这个内置servlet的工作</li>
</ol>
</li>
<li>url(controller)  有mvc内置的servlet    dispatchServlet处理</li>
</ol>
</li>
</ol>
</li>
</ol>
<h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><ol>
<li>静态资源访问失败<ol>
<li>原因可能是servlet的partten接手了//资源，而静态资源默认是//路径</li>
<li>处理：加配置</li>
</ol>
</li>
</ol>
<h3 id="springmvc处理请求流程"><a href="#springmvc处理请求流程" class="headerlink" title="springmvc处理请求流程"></a>springmvc处理请求流程</h3><ol>
<li>tomcat–&gt;url-partter匹配—&gt;dispatcher—&gt;st.servlet—&gt;wyg.controller–&gt;TestController</li>
</ol>
<p><img src="https://job-wyg.oss-cn-beijing.aliyuncs.com/image-20211019003549650.png" alt="image-20211019003549650"></p>
]]></content>
      <categories>
        <category>spring</category>
      </categories>
  </entry>
  <entry>
    <title>springIOC</title>
    <url>/2021/11/08/spring/springIOC/</url>
    <content><![CDATA[<p>[toc]</p>
<h2 id="IOC概念"><a href="#IOC概念" class="headerlink" title="## IOC概念"></a>## IOC概念</h2><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><ol>
<li><p>解决的问题</p>
<ol>
<li>原来一个对象使用另一个对象，只能new <ul>
<li>只能new,加入我改变了new 的参数,<font color='red'>那我要在很多代码里面改</font>那我要在很多代码里面改，耦合度太高 ，所以创建一个工厂统一管理对象的创建，用到的地方不需要知道怎么new，只需要过去就行了</li>
<li>每次都New 很浪费资源，所以<font color='red'>改为</font>通过xml解析获得</li>
<li>Class.forName获取,进一步获取bean，进一步降低耦合度</li>
</ul>
</li>
<li></li>
</ol>
</li>
<li><p>技术</p>
<ul>
<li>xml解析</li>
<li>工厂模式</li>
<li>反射技术</li>
<li>DI技术</li>
</ul>
</li>
</ol>
<h2 id="bean注册"><a href="#bean注册" class="headerlink" title="bean注册"></a>bean注册</h2><h3 id="1-sping-xml注册"><a href="#1-sping-xml注册" class="headerlink" title="1. sping.xml注册"></a>1. sping.xml注册</h3><ol>
<li><p>注意</p>
<ul>
<li>默认无参构造,也可以有参</li>
<li>注入属性是基于DI</li>
</ul>
</li>
<li><p>属性注入方法</p>
<ol>
<li><p>set方法&lt;properity&gt;</p>
</li>
<li><p>构造函数</p>
</li>
<li><p>p命名空间 基于set</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">xmlns:p=&quot;http://www.springframework.org/schema/p&quot;</span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;s2&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.wyg.epidemicsituation.entity.vo.Student&quot;</span> <span class="attr">p:age</span>=<span class="string">&quot;20&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ol>
</li>
<li><p>属性注入特殊情况</p>
<ol>
<li><p>null  &lt;null&gt;&lt;/null&gt;</p>
</li>
<li><p>大于小于号;lt</p>
</li>
<li><p>外部bean</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;testID&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>内部bean,作用和外部bean一样，就是形式不一样</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;aa&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span>&lt;/<span class="attr">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ol>
</li>
<li><p>注册bean</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;s2&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.wyg.epidemicsituation.entity.vo.Student&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;20&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;wang&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span>//有参</span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>getBean</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ApplicationContext ioc=<span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;/config/beans.xml&quot;</span>);</span><br><span class="line">Student student= (Student) ioc.getBean(<span class="string">&quot;s2&quot;</span>) ;</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="2-注解配置"><a href="#2-注解配置" class="headerlink" title="2.  注解配置"></a>2.  注解配置</h3><h2 id="二-获取bean"><a href="#二-获取bean" class="headerlink" title="二 获取bean"></a>二 获取bean</h2><ol>
<li><p>ioc两种获取(接口)</p>
<ul>
<li><p>BeanFactory 内置</p>
<ul>
<li>懒加载，加载配置文件不会创建对象，只有getBean才会创建bean，</li>
</ul>
</li>
<li><p>ApplicationContext </p>
<ul>
<li>饿汉式，加载配置文件的时候就会创建对象</li>
<li>实现类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ApplicationContext ioc=<span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;/config/beans.xml&quot;</span>);</span><br><span class="line">Student mybean = (Student) ioc.getBean(<span class="string">&quot;mybean&quot;</span>);</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
<h3 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h3><ol>
<li><p>qualifier要小写,且要和@autowire一起使用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Qualifier(&quot;companyIntroServiceImpl&quot;)</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="spring中两种Bean"><a href="#spring中两种Bean" class="headerlink" title="spring中两种Bean"></a>spring中两种Bean</h3><ul>
<li>普通bean<ul>
<li>定义Student 返回就是Student</li>
</ul>
</li>
<li>工厂bean<ul>
<li>定义为Student，返回可能是其他类型</li>
<li>接口FactoryBean</li>
</ul>
</li>
</ul>
<h3 id="Bean的作用域"><a href="#Bean的作用域" class="headerlink" title="Bean的作用域"></a>Bean的作用域</h3><p>spring里面bean默认为单例，可以设置为单例和多例</p>
<ol>
<li><p>设置为多例 </p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">&lt;bean  <span class="attribute">scope</span>=<span class="string">&quot;prototype&quot;</span>&gt; 多例</span><br><span class="line"> <span class="attribute">scope</span>=<span class="string">&quot;session&quot;</span>   保存在session中</span><br></pre></td></tr></table></figure></li>
<li><p>多例规则：懒加载</p>
</li>
<li><p>单例规则：饿汉式</p>
</li>
</ol>
<h3 id="Bean的声明周期"><a href="#Bean的声明周期" class="headerlink" title="Bean的声明周期"></a>Bean的声明周期</h3><h3 id="循环依赖"><a href="#循环依赖" class="headerlink" title="循环依赖"></a>循环依赖</h3>]]></content>
      <categories>
        <category>spring</category>
      </categories>
  </entry>
  <entry>
    <title>spring新特性</title>
    <url>/2021/11/08/spring/spring%E6%96%B0%E7%89%B9%E6%80%A7/</url>
    <content><![CDATA[<p>[toc]</p>
<h3 id="一、spring5"><a href="#一、spring5" class="headerlink" title="一、spring5"></a>一、spring5</h3><h3 id="二、spring4"><a href="#二、spring4" class="headerlink" title="二、spring4"></a>二、spring4</h3><h3 id="三、spring3"><a href="#三、spring3" class="headerlink" title="三、spring3"></a>三、spring3</h3><h3 id="四、spring2"><a href="#四、spring2" class="headerlink" title="四、spring2"></a>四、spring2</h3><h3 id="五、spring1"><a href="#五、spring1" class="headerlink" title="五、spring1"></a>五、spring1</h3>]]></content>
      <categories>
        <category>spring</category>
      </categories>
  </entry>
  <entry>
    <title></title>
    <url>/2021/11/05/spring/spring%E6%8E%A5%E5%8F%A3/</url>
    <content><![CDATA[<ol>
<li>InitializingBean<ol>
<li>afterProperies(){//加载配置文件后}</li>
</ol>
</li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>spring概念解析</title>
    <url>/2021/09/22/spring/spring%E6%A6%82%E5%BF%B5/</url>
    <content><![CDATA[<p>[toc]</p>
<h2 id="一、基本概念"><a href="#一、基本概念" class="headerlink" title="一、基本概念"></a>一、基本概念</h2><h3 id="1-核心"><a href="#1-核心" class="headerlink" title="1. 核心"></a>1. 核心</h3><ol>
<li>IOC 控制反转</li>
<li>AOP 面向切面</li>
</ol>
<h3 id="2-优点"><a href="#2-优点" class="headerlink" title="2. 优点"></a>2. 优点</h3><ol>
<li>解耦</li>
<li>方便开发，降低复杂度</li>
<li>方便整合其他框架</li>
<li>spring源码是</li>
<li>方便事务操作</li>
</ol>
<h2 id="二、IOC-控制反转"><a href="#二、IOC-控制反转" class="headerlink" title="二、IOC(控制反转)"></a>二、IOC(控制反转)</h2><h3 id="1-IOC介绍"><a href="#1-IOC介绍" class="headerlink" title="1. IOC介绍"></a>1. IOC介绍</h3><ol>
<li><p>平常</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Person s=<span class="keyword">new</span> Person();<span class="comment">//耦合度太高</span></span><br></pre></td></tr></table></figure></li>
<li><p>现在：引入Ioc，将创建对象的控制权交给spring的ioc，如果需要使用，就用DI(依赖注入)@Autowired.</p>
</li>
</ol>
<span id="more"></span>

<ol>
<li><p>优点：集中管理对象，方便维护，降低了耦合度。</p>
</li>
<li><p>IOC和DI区别</p>
<ol>
<li>ioc控制了对象创建的权力。</li>
<li>di是ioc的实现的一步骤。</li>
</ol>
</li>
<li><p>配置bean的方法，bean是ioc创建的对象</p>
<ol>
<li>xml.&lt;bean class:path&gt;</li>
<li>注解@Component(@Controller,@Service,@Repostory)</li>
<li>javaConfig:@Configtursion+@Bean，这像是自己实现的ioc，更灵活。</li>
<li>@import</li>
</ol>
</li>
<li><p>ioc实现机制</p>
<ol>
<li>简单工厂+反射</li>
<li>code:beanfactory.getBean+(强制类型转换+Class.forName) </li>
<li>xml配置：&lt;bean class:path&gt;</li>
</ol>
</li>
<li><p>ioc实现原理DI技术–&gt;map.put(name,new)</p>
</li>
<li><p>ioc创建Bean</p>
<figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">&lt;bean <span class="built_in">id</span>=<span class="string">&quot;aa&quot;</span> <span class="built_in">class</span>=<span class="string">&quot;com.example.spring_tech.entity.user&quot;</span>&gt;</span><br><span class="line">&lt;<span class="keyword">property</span> <span class="built_in">name</span>=<span class="string">&quot;age&quot;</span>value=<span class="string">&quot;11222&quot;</span>&gt;&lt;/<span class="keyword">property</span>&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br></pre></td></tr></table></figure></li>
<li><p>哪些类放入ioc</p>
<ol>
<li>放入：工具类，dao,service,controller</li>
<li>不放人：实体类，servlet,listener,filter</li>
</ol>
</li>
<li><p>放入ioc方法</p>
<ol>
<li>xml &lt;bean&gt;</li>
<li>注解</li>
</ol>
</li>
<li><p>ioc的对象是创建ioc的时候一起同时创建的，不是启动时创建的，也不是使用的时候创建的。</p>
</li>
<li><p>属性</p>
<ol>
<li>set +&lt;properity name value&gt;</li>
<li>set+&lt;properity name ref&gt;</li>
<li>构造注入：&lt;constructor-arg&gt;+inde</li>
</ol>
</li>
</ol>
<h4 id=""><a href="#" class="headerlink" title=""></a></h4><h3 id="4、紧耦合-松耦合-DIP"><a href="#4、紧耦合-松耦合-DIP" class="headerlink" title="4、紧耦合 松耦合(DIP)"></a>4、紧耦合 松耦合(DIP)</h3><ol>
<li>紧耦合：类之间的高度依赖</li>
<li>松耦合：单一职责原则–&gt;接口分离原则–&gt;依赖倒置原则。</li>
</ol>
<h3 id="Bean"><a href="#Bean" class="headerlink" title="Bean"></a>Bean</h3><ol>
<li>java bean 和spring bean的区别<ol>
<li>由spring ioc实例化，管理的对象叫做bean.</li>
<li>s</li>
<li>java bean 是new出来的</li>
</ol>
</li>
</ol>
<h3 id="spring使用步骤"><a href="#spring使用步骤" class="headerlink" title="spring使用步骤"></a>spring使用步骤</h3><ol>
<li>依赖denpendcy</li>
<li>创建类，dao,service,controller</li>
<li>创建配置文件<bean></li>
<li>创建容器对象ClassPathXmlAppicationContext.getBean()</li>
</ol>
<h3 id="AOP（基于jdk动态代理）"><a href="#AOP（基于jdk动态代理）" class="headerlink" title="AOP（基于jdk动态代理）"></a>AOP（基于jdk动态代理）</h3><h4 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h4><ol>
<li><p>作用：创建对象，不改变类的情况下实现功能增强。</p>
</li>
<li><p>两种实现方式：</p>
<ol>
<li>JDK<ol>
<li>要求目标类有接口</li>
<li>若没有接口。可用CGlib，</li>
</ol>
</li>
<li>Proxy</li>
</ol>
<h4 id="AOP"><a href="#AOP" class="headerlink" title="AOP"></a>AOP</h4><p>aop就是将动态代理规范化，约定大于配置。</p>
<ol>
<li><p> 四要素</p>
</li>
<li><p>aspect:切面，增强的功能的代码。</p>
<p>三要素：</p>
<ol>
<li>功能代码函数def doLog()</li>
<li>代码位置(切入点)，一般就是业务代码函数。execution(path.def)</li>
<li>执行时间（before/after）</li>
</ol>
</li>
<li><p>joinpoint:连接点，业务代码。</p>
</li>
<li><p>pointCut切入点,连接点的结合</p>
</li>
<li><p>advice 通知，表示切面功能执行的时间</p>
</li>
<li><p>aop实现</p>
<ol>
<li>spring,事务处理常用aop（代码多，不常用）</li>
<li>aspectJ:专业aop框架。spring集成了这个框架。<ol>
<li>xml实现：用于事务</li>
<li>注解实现：常见环境下都用注解。<ol>
<li>@Before</li>
<li>@AfterReturn</li>
<li>@Around</li>
<li>@AfterThrowing</li>
<li>@After</li>
</ol>
</li>
<li>切入点表达式execution(public pString]* [com.wyg.user.]getName(..)* exception)</li>
<li>步骤:<ol>
<li>加入依赖spring,aspect</li>
<li>创建目标类(接口，实现)</li>
<li>创建切面类<ol>
<li>加如@aspect</li>
<li>定义增强功能方法，并在方法上加入注解</li>
</ol>
</li>
<li>创建spring配置文件：声明对象，交予ioc管理  加入aop标志生成代理类<a href="aop:aspectj-autoproxy/">aop:aspectj-autoproxy/</a>。</li>
<li>xml配最后的<strong>自动代理生成器</strong>标志还是牵线人进行切面类和目标类.业务函数的联系。</li>
</ol>
</li>
<li>execution简化<ol>
<li>去掉public</li>
<li>用*..</li>
<li>..代替arg</li>
<li>do*代替业务函数</li>
</ol>
</li>
</ol>
</li>
</ol>
</li>
</ol>
</li>
</ol>
<h4 id="集成mybatis"><a href="#集成mybatis" class="headerlink" title="集成mybatis"></a>集成mybatis</h4><ol>
<li><p>mybatis步骤</p>
<ol>
<li><p>创建对象dao</p>
</li>
<li><p>mapper.xml</p>
</li>
<li><p>创建代理</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建工厂</span></span><br><span class="line"><span class="comment">//xml实现</span></span><br><span class="line">String resource = <span class="string">&quot;org/mybatis/example/mybatis-config.xml&quot;</span>;</span><br><span class="line">InputStream inputStream = Resources.getResourceAsStream(resource);</span><br><span class="line">SqlSessionFactory sqlSessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);</span><br><span class="line"></span><br><span class="line"><span class="comment">//java实现</span></span><br><span class="line">DataSource dataSource = BlogDataSourceFactory.getBlogDataSource();</span><br><span class="line">TransactionFactory transactionFactory = <span class="keyword">new</span> JdbcTransactionFactory();</span><br><span class="line">Environment environment = <span class="keyword">new</span> Environment(<span class="string">&quot;development&quot;</span>, transactionFactory, dataSource);</span><br><span class="line">Configuration configuration = <span class="keyword">new</span> Configuration(environment);</span><br><span class="line">configuration.addMapper(BlogMapper.class);</span><br><span class="line">SqlSessionFactory sqlSessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(configuration);</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取sqlsession</span></span><br><span class="line">SqlSession session = sqlSessionFactory.openSession()</span><br><span class="line"><span class="comment">//创建mapper实例</span></span><br><span class="line">UserMapper mapper = session.getMapper(UserMapper.class);</span><br></pre></td></tr></table></figure></li>
<li><p>mybatis步骤</p>
<ol>
<li><p>依赖mysql-connector-java mybatis</p>
</li>
<li><p>mybatis.config.xml </p>
<ol>
<li>&lt;dataSource&gt;&lt;driver,url,username,password&gt;</li>
<li>&lt;mappers&gt;&lt;mapper resource=”com.wyg.mapper.*.xml”&gt;</li>
</ol>
</li>
<li><p>mapper.xml—-&gt;&lt;select,insert&gt;</p>
</li>
<li><p>javaTest</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>创建文件流</span><br><span class="line">in=org.apache.ibatis.io.Resources.getResourceAsStream(<span class="string">&quot;.xml&quot;</span>);</span><br><span class="line"><span class="number">2.</span>创建工厂</span><br><span class="line">SqlSessionFactory factory=<span class="keyword">new</span> SqlSessionFactoryBuilder().build(in);</span><br><span class="line"><span class="number">3.</span>创建session</span><br><span class="line">SqlSession sqlsession=factory.openSession();</span><br><span class="line"><span class="number">4.</span>创建mapper</span><br><span class="line">UserMapper userMapper=sqlSession.getMapper(UserMapper.class);</span><br><span class="line"><span class="number">5.</span>调用mapper</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
</ol>
</li>
</ol>
<h3 id="Bean-1"><a href="#Bean-1" class="headerlink" title="Bean"></a>Bean</h3><ol>
<li><p>bean概念</p>
<ol>
<li><p>一类是使用Bean，即是把已经在xml文件中配置好的Bean,或者手动注册的Bean拿来用，完成属性、方法的组装；比如@Autowired , @Resource，可以通过byTYPE（@Autowired）、byNAME（@Resource）的方式获取Bean；</p>
</li>
<li><p>一类是注册Bean,@Component , @Repository , @ Controller , @Service , @Configration这些注解都是把你要实例化的对象转化成一个Bean，放在IoC容器中，等你要用的时候，它会和上面的@Autowired , @Resource配合到一起，把对象、属性、方法完美组装。</p>
</li>
</ol>
</li>
<li><p>bean加载过程</p>
</li>
<li><p>bean生命周期</p>
</li>
</ol>
<h3 id="常用注解"><a href="#常用注解" class="headerlink" title="常用注解"></a>常用注解</h3><ol>
<li><p>@Componet —-&gt;一个bean</p>
</li>
<li><p>@Configration —&gt;一本beans，一堆bean</p>
</li>
<li><p>@Bean—&gt;一个生成bean的方法，若干个@Bean常放在@Configration/@Component中，可以加载Conponent不能加载的自定义类。</p>
</li>
<li><p>bean的各个注解</p>
</li>
<li><p>MapperScan:执行类上加入@MapperScan(“com.example.springsecruity.mapper”)</p>
<p>需要加入依赖</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">mybatis-spring-boot-starter</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h3><ol>
<li><p>mysql</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>mybatis</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--mybatis-plus--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- velocity 模板引擎, Mybatis Plus 代码生成器需要 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.velocity<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>velocity-engine-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>spring</p>
</li>
<li><p>springBoot</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>springCloud</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--服务注册nacos--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-ribbon<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--服务调用--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--hystrix依赖，主要是用  @HystrixCommand --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-hystrix<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       </span><br></pre></td></tr></table></figure></li>
<li><p>swagger</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--swagger--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>单元测试</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>json数据转换</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.google.code.gson<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>gson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="alibaba依赖"><a href="#alibaba依赖" class="headerlink" title="alibaba依赖"></a>alibaba依赖</h4><ol>
<li><p>oss</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.aliyun.oss<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aliyun-sdk-oss<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>视频点播</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.aliyun<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aliyun-java-sdk-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>easyExcel</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>easyexcel<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>json</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.aliyun<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aliyun-java-sdk-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        &lt;/dependency</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
</ol>
]]></content>
      <categories>
        <category>spring</category>
      </categories>
  </entry>
  <entry>
    <title>spring注解</title>
    <url>/2021/10/21/spring/spring%E6%B3%A8%E8%A7%A3/</url>
    <content><![CDATA[<h2 id="配置型注解"><a href="#配置型注解" class="headerlink" title="配置型注解"></a>配置型注解</h2><h3 id="Service-controller-repository和-Component区别"><a href="#Service-controller-repository和-Component区别" class="headerlink" title="@Service,controller,repository和@Component区别"></a>@Service,controller,repository和@Component区别</h3><ol>
<li>前三者含有特定功能的Component 比如<ol>
<li>dispatchServlet寻找的是@Conroller的GetMapping而不是@Component的mapping</li>
</ol>
</li>
<li>后者可用前三者代替</li>
</ol>
<h3 id="Mapper和-Repository的区别"><a href="#Mapper和-Repository的区别" class="headerlink" title="@Mapper和@Repository的区别"></a>@Mapper和@Repository的区别</h3><ol>
<li><a href="https://blog.csdn.net/qq_36816062/article/details/108086097">相同点</a><br>@Mapper和@Repository都是作用在dao层接口，使得其生成代理对象bean，交给spring 容器管理<br>对于mybatis来说，都可以不用写mapper.xml文件</li>
<li>不同点<br>@Mapper不需要配置扫描地址，通过xml里面的namespace里面的接口地址，生成了Bean后注入到Service层中。@MapperScan(“mapper文件所在包”)，这样就不需要每个mapper文件都加@Mapper注解了<br>而@Repository不可以单独使用,需要配置@MapperScan(“com.anson.dao”) </li>
</ol>
<h3 id="Bean和-Component区别"><a href="#Bean和-Component区别" class="headerlink" title="@Bean和@Component区别"></a>@Bean和@Component区别</h3><ol>
<li><p>前者作用于methon，后者作用于class</p>
</li>
<li><p>@Component通过@ComponentScan扫描得到</p>
</li>
<li><p>@Bean在@Configuration Class下</p>
</li>
<li><p>@Bean更灵活—&gt;配置文件调控的时候就只能用@Bean</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(<span class="keyword">int</span> status)</span></span>&#123;</span><br><span class="line"><span class="keyword">switch</span>(status):</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>: <span class="keyword">return</span> <span class="keyword">new</span> Student(<span class="number">1</span>,<span class="string">&quot;王&quot;</span>);</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>: <span class="keyword">return</span> <span class="keyword">new</span> Student(<span class="number">2</span>,<span class="string">&quot;张&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="Autowire和-Resource的区别"><a href="#Autowire和-Resource的区别" class="headerlink" title="@Autowire和@Resource的区别"></a>@Autowire和@Resource的区别</h3><ol>
<li>作用域相同<ol>
<li>属性</li>
<li>setter</li>
</ol>
</li>
<li>@Autowire 默认先按类型装配</li>
<li>@Resource 默认先按名称装配</li>
<li>@Resource =@Autowrie+@Qualifier</li>
</ol>
<h3 id="Configuration"><a href="#Configuration" class="headerlink" title="@Configuration"></a>@Configuration</h3><ol>
<li><p>一个@Configuration下面可以定义多个@Bean</p>
</li>
<li><p>基于java而没注解@Configuration的注册方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">AnnotationConfigApplicationContext cxt=<span class="keyword">new</span> AnnotationConfigApplicationContext();</span><br><span class="line">cxt.register(MyConfig.class);</span><br><span class="line">cxt.getBean(<span class="string">&quot;aaa&quot;</span>)</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="ControllerAdvice"><a href="#ControllerAdvice" class="headerlink" title="@ControllerAdvice"></a>@ControllerAdvice</h3><ol>
<li>全局异常处理器</li>
</ol>
<h4 id="ComponentScan与ComponentScans"><a href="#ComponentScan与ComponentScans" class="headerlink" title="@ComponentScan与ComponentScans"></a>@ComponentScan与ComponentScans</h4><ol>
<li><a href="https://www.cnblogs.com/jiafa/p/13800766.html">@ComponentScan和@ComponentScans注解</a></li>
<li></li>
</ol>
]]></content>
      <categories>
        <category>spring</category>
      </categories>
  </entry>
  <entry>
    <title>spring注解1</title>
    <url>/2021/10/09/spring/%E6%B3%A8%E8%A7%A3/</url>
    <content><![CDATA[<h3 id="controller"><a href="#controller" class="headerlink" title="controller"></a>controller</h3><ol>
<li><p>method</p>
<ol>
<li><p>@SessionAttributes(“uid”) mvc用，现在不用了</p>
</li>
<li><p>@Validated</p>
</li>
<li><p>@ApiOperation(“新增字典”)  swagger</p>
</li>
<li><p>@PreAuthorize(“@el.check(‘dict:list’)”)</p>
</li>
<li><p>lombok.@RequiredArgsConstructor 自动注入+ final</p>
<span id="more"></span></li>
</ol>
</li>
<li><p>attrbute</p>
<ol>
<li>@Validated 校验 validation-api </li>
</ol>
</li>
<li><p>class</p>
<ol>
<li>@RestController  全体返回json</li>
<li>@RequestMapping(“/api/dict”) 全局地址</li>
<li>@Api(tags = “系统：字典管理”) swagger</li>
<li><a href="https://www.cnblogs.com/tian874540961/p/12146467.html">@ConfigurationProperties</a></li>
</ol>
</li>
</ol>
<h3 id="service-mapper"><a href="#service-mapper" class="headerlink" title="service-mapper"></a>service-mapper</h3><ol>
<li>method</li>
<li>class</li>
<li><a href="https://blog.csdn.net/chuang504321176/article/details/80672740">@Value</a>–&gt;引入</li>
</ol>
<h3 id="DTO"><a href="#DTO" class="headerlink" title="DTO"></a>DTO</h3><ol>
<li>@ApiModelProperty(value = “字典标签”)</li>
<li>lombok.@ToString(callSuper = true) 输出父类属性</li>
</ol>
<h3 id="Config"><a href="#Config" class="headerlink" title="Config"></a>Config</h3><ol>
<li><p>@RestControllerAdvice  controller全局增强，捕获全局异常<a href="https://www.jianshu.com/p/47aeeba6414c">统一异常处理</a></p>
</li>
<li><p>@ExceptionHandler(value = Exception.class)  捕获指定异常</p>
</li>
<li><p>方法上@PostConstrcut</p>
</li>
<li><p>方法上@Bean</p>
</li>
</ol>
<h3 id="普通"><a href="#普通" class="headerlink" title="普通"></a>普通</h3><ol>
<li>标记接口<ol>
<li>serializable 可序列化 </li>
<li>cloneable 对象可克隆</li>
<li>SingleThreadModel 单线程(过时的)</li>
</ol>
</li>
<li></li>
</ol>
]]></content>
      <categories>
        <category>spring</category>
      </categories>
  </entry>
  <entry>
    <title>各种配置文件</title>
    <url>/2021/10/08/spring/%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/</url>
    <content><![CDATA[<h3 id="知识"><a href="#知识" class="headerlink" title="知识"></a>知识</h3><ol>
<li><p><a href="https://blog.csdn.net/jiangyu1013/article/details/52424726">转载-pom节点说明1</a></p>
<ol>
<li><p>modelVersion：声明项目描述符遵循哪一个POM模型版本。<br>模型本身的版本很少改变，虽然如此，但它仍然是必不可少的.<br>这是为了当Maven引入了新的特性或者其他模型变更的时候，确保稳定性。</p>
</li>
<li><p>parent：引入父级pom文件。</p>
</li>
<li><p>groupId：公司名称、组织名称、项目开发者，配置时生成路径也是由此生成（包名，如com.XXX）。</p>
</li>
<li><p>artifactId：项目通用名称。</p>
</li>
<li><p>version：对应项目版本号。</p>
<span id="more"></span></li>
<li><p>packaging：打包后的类型。如war、jar、maven-plugin、ejb、pom、ear、par、rar</p>
</li>
<li><p>name:用户描述项目的名称，可选。</p>
</li>
<li><p>url:项目主页的URL, Maven产生文档时用。</p>
</li>
</ol>
</li>
<li><p>pom说明2</p>
<ol>
<li>exclusions：排除管理（写在dependency中）。</li>
<li>exclusion：具体要排除的依赖项</li>
<li>repositories:仓库管理。</li>
<li>repository：具体仓库（有id、name、url子元素）。</li>
<li>properties：自定义标签管理（可在其内自定义标签名、值，<br>用法同于el表达式：${标签名}得到其值），常用于集中定义依赖版本号。</li>
<li>scope：管理部署（可以使用5个值：<ol>
<li>compile，缺省值，适用于所有阶段，会随着项目一起发布。</li>
<li>provided，类似compile，期望JDK、容器或使用者会提供这个依赖。如servlet.jar。</li>
<li>runtime，只在运行时使用，如JDBC驱动，适用运行和测试阶段。</li>
<li>test，只在测试时使用，用于编译和运行测试代码。不会随项目发布。</li>
<li>system，类似provided，需要显式提供包含依赖的jar，Maven不会在Repository中查找它。</li>
</ol>
</li>
</ol>
</li>
<li><p>pom说明3</p>
<ol>
<li>dependencies:依赖,jar包管理。</li>
<li>dependency：具体的依赖项。</li>
<li>dependencyManagement：依赖、jar包管理。</li>
</ol>
</li>
<li><p>xml的$符号，用法同于el表达式</p>
<ol>
<li>引入</li>
</ol>
</li>
<li><p><a href="https://blog.csdn.net/bao19901210/article/details/52415402">Maven内置了三大特性</a>：属性、Profile和资源过滤来支持构建的灵活性。</p>
</li>
<li><p>Maven六大属性类型</p>
<ol>
<li><p>内置属性：主要有两个常用内置属性——${basedir}表示项目根目录，即包含pom.xml文件的目录;${version}表示项目版本。</p>
</li>
<li><p>POM属性：pom中对应元素的值。例如                </p>
<ol>
<li><p>${project.build.sourceDirectory}:项目的主源码目录，默认为src/main/java/.                                                      </p>
</li>
<li><p>${project.build.testSourceDirectory}:项目的测试源码目录，默认为/src/test/java/.                                                 </p>
</li>
<li><p>${project.build.directory}:项目构建输出目录，默认为target/.                                                                 </p>
</li>
<li><p>${project.build.outputDirectory}:项目主代码编译输出目录，默认为target/classes/.                                                </p>
</li>
<li><p>${project.build.testOutputDirectory}:项目测试代码编译输出目录，默认为target/testclasses/.                                         </p>
</li>
<li><p>${project.groupId}:项目的groupId.                                                                                     </p>
</li>
<li><p>${project.artifactId}:项目的artifactId.                                                                                    ${project.version}:项目的version,于</p>
</li>
<li><p>${version}等价                                                                         </p>
</li>
<li><p>${project.build.finalName}:项目打包输出文件的名称，默认为</p>
</li>
<li><p>${project.artifactId}${project.version}.</p>
<p><img src="https://job-wyg.oss-cn-beijing.aliyuncs.com/image-20211009003422541.png" alt="image-20211009003422541"></p>
</li>
</ol>
</li>
<li><p>自定义属性：在pom中&lt;properties&gt;元素下自定义的Maven属性。</p>
<p><img src="https://job-wyg.oss-cn-beijing.aliyuncs.com/image-20211009002825691.png" alt="image-20211009002825691"></p>
</li>
<li><p>Settings属性：与POM属性同理。如${settings.localRepository}指向用户本地仓库的地址。</p>
</li>
<li><p>Java系统属性：所有Java系统属性都可以使用Maven属性引用，例如${user.home}指向了用户目录。可以通过命令行mvn help:system查看所有的Java系统属性</p>
</li>
<li><p>环境变量属性：所有环境变量都可以使用以env.开头的Maven属性引用。例如${env.JAVA_HOME}指代了JAVA_HOME环境变量的值。也可以通过命令行mvn help:system查看所有环境变量。</p>
</li>
</ol>
</li>
<li><p>资源过滤</p>
<p>1. </p>
</li>
</ol>
<h3 id="Spring-xml"><a href="#Spring-xml" class="headerlink" title="Spring.xml"></a>Spring.xml</h3><h3 id="mybatis-xml"><a href="#mybatis-xml" class="headerlink" title="mybatis.xml"></a>mybatis.xml</h3><h3 id="mapper-xml"><a href="#mapper-xml" class="headerlink" title="mapper.xml"></a>mapper.xml</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.example.demo.mapper.UserMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getList&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.example.demo.entity.User&quot;</span>&gt;</span></span><br><span class="line">        select * from user</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>spring</category>
        <category>配置</category>
      </categories>
  </entry>
  <entry>
    <title>hexo使用</title>
    <url>/2021/09/30/utils/blog/</url>
    <content><![CDATA[<p>搭建个人博客</p>
<ol>
<li><p>下载node.js</p>
</li>
<li><p>npm下载cnpm</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">npm install -g cnpm  --registry=https:<span class="regexp">//</span>registry.npm.taobao.org</span><br></pre></td></tr></table></figure>

<span id="more"></span></li>
<li><p>下载hexo </p>
<figure class="highlight avrasm"><table><tr><td class="code"><pre><span class="line">cnpm install -g hexo-<span class="keyword">cli</span></span><br></pre></td></tr></table></figure></li>
<li><p>创建目录</p>
</li>
<li><p>hexo初始化blog 和deployer</p>
<figure class="highlight coffeescript"><table><tr><td class="code"><pre><span class="line">cd blog</span><br><span class="line">hexo init</span><br><span class="line"><span class="built_in">npm</span> install hexo-deployer-git --save</span><br><span class="line"><span class="built_in">npm</span> i hexo-renderer-swig</span><br></pre></td></tr></table></figure>

<p>或者</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">git clone https:<span class="regexp">//gi</span>tee.com<span class="regexp">/weilining/</span>hexo-starter.git blog</span><br><span class="line">cd blog</span><br><span class="line">git submodule init</span><br><span class="line">git submodule update</span><br><span class="line">npm config set registry http:<span class="regexp">//</span>registry.npm.taobao.org</span><br><span class="line">npm i</span><br><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure></li>
<li><p>hexo g 生成静态文件</p>
</li>
<li><p>启动(localhost:4000)</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">hexo</span> s -p <span class="number">4000</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h3><ol>
<li><p>创建文章</p>
<figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;文章&quot;</span></span><br></pre></td></tr></table></figure></li>
<li><p>生成静态文件</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">hexo g</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="通过github搭建"><a href="#通过github搭建" class="headerlink" title="通过github搭建"></a>通过github搭建</h3><ol>
<li><p>创建public仓库 name/name.github.io    </p>
</li>
<li><p>下载插件</p>
<figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">cnpm install <span class="comment">--save hexo-deployer-git</span></span><br></pre></td></tr></table></figure></li>
<li><p>修改config.yml</p>
<figure class="highlight dts"><table><tr><td class="code"><pre><span class="line"><span class="symbol">deploy:</span></span><br><span class="line"><span class="symbol">  type:</span> git</span><br><span class="line"><span class="symbol">  repo:</span> https:<span class="comment">//github.com/Wang-yonggan/Wang-yonggan.github.io.git</span></span><br><span class="line"><span class="symbol">  branch:</span> master</span><br></pre></td></tr></table></figure></li>
<li><p>分类：</p>
<ol>
<li>```<br>hexo new page categories<figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">   <span class="number">2</span>.  index.md加入<span class="keyword">type</span>: categories</span><br><span class="line"></span><br><span class="line"><span class="number">5</span>. hexo clean &amp;&amp; hexo g &amp;&amp; hexo s</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">### 主题</span></span><br><span class="line"></span><br><span class="line"><span class="number">1</span>. git <span class="keyword">clone</span> <span class="title">..  themes</span>/name</span><br><span class="line"></span><br></pre></td></tr></table></figure>
git clone <a href="https://github.com/litten/hexo-theme-yilia.git">https://github.com/litten/hexo-theme-yilia.git</a> themes/yilia</li>
</ol>
<p>git clone <a href="https://github.com/theme-next/hexo-theme-next">https://github.com/theme-next/hexo-theme-next</a> themes/next</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">   </span><br><span class="line"></span><br><span class="line"><span class="bullet">2.</span> vim config.yml</span><br><span class="line"></span><br><span class="line">   theme:name</span><br><span class="line"></span><br><span class="line"><span class="bullet">3.</span> hexo clean</span><br><span class="line"></span><br><span class="line"><span class="section">### config.yml</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">1.</span> webset</span><br><span class="line"><span class="bullet">   1.</span> title 标题</span><br><span class="line"><span class="bullet">   2.</span> subtitle 副标题</span><br><span class="line"><span class="bullet">   3.</span> description 网站描述 seo</span><br><span class="line"><span class="bullet">   4.</span> author 作者</span><br><span class="line"><span class="bullet">   5.</span> language 语言</span><br><span class="line"><span class="bullet">   6.</span> timezone 时区</span><br><span class="line"></span><br><span class="line"><span class="bullet">2.</span> URL</span><br><span class="line"></span><br><span class="line">   url：网站的网址</span><br><span class="line">   root：网站的根目录</span><br><span class="line">   permalink：文章的永久链接格式，可以在permalink这里配置，如默认中的配置，在hello world文章中就会是这样的url</span><br><span class="line"></span><br><span class="line"><span class="bullet">3.</span> directory</span><br><span class="line"><span class="bullet">   1.</span> source<span class="emphasis">_dir：存放hexo文章的文件夹，我们写的md文件都放在这个配置对应的文件夹下，默认值是source</span></span><br><span class="line"><span class="emphasis">   2. public_</span>dir：存放hexo g生成的文件，执行hexo g后根目录就会出现这个文件夹，默认值是public</span><br><span class="line"><span class="bullet">   3.</span> tag<span class="emphasis">_dir：按标签存放文章的目录，默认值是tags，如果我们给文章添加标签，使用hexo g时public文件夹下就会多出一个tags文件夹（根据我们的配置文件夹名不同），这里给hello-world.md添加一个tags</span></span><br><span class="line"><span class="emphasis">   4. archive_</span>dir：归档文件夹，存放归档文件，默认值为archives</span><br><span class="line"><span class="bullet">   5.</span> category<span class="emphasis">_dir：分类文件夹，按分类存放的文件，和上面的tags一样，只要在文章中的Font-matter添加了categories就会在使用hexo g构造时出现相应的文件夹</span></span><br><span class="line"><span class="emphasis">   6. code_</span>dir：Include code 文件夹，source<span class="emphasis">_dir 下的子目录，默认值为downloads/code</span></span><br><span class="line"><span class="emphasis">   7. i18n_</span>dir：国际化（i18n）文件夹，默认值:lang</span><br><span class="line"><span class="bullet">   8.</span> skip<span class="emphasis">_render：跳过指定文件的渲染，匹配到的文件将会被不做改动复制到public文件夹下，如果路径对应的是我们的文章，那会直接忽略掉该文章，我们这样设置来忽略掉hello-world.md文件</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">### issue</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">1. 下载主题没有显示：</span></span><br><span class="line"><span class="emphasis">   1. 文件夹名问题</span></span><br><span class="line"><span class="emphasis">   2. config未该</span></span><br><span class="line"><span class="emphasis">   3. 没有clean+g+d</span></span><br><span class="line"><span class="emphasis">   4. gitee没有更行部署</span></span><br><span class="line"><span class="emphasis">   </span></span><br><span class="line"><span class="emphasis">2. 部署其他文件夹</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">   1. 每次hexo d之前copy 文件到posts，但是我发现文件的创建时间被改变了</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">   2. 将hexo的source文件路径改为ana-notes，但是这样没办法生成目录</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">   3. 最终选择copy+python修改文件创建时间的方式 </span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">      具体bat代码</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">      ````</span></span><br><span class="line"><span class="emphasis">      echo 清空posts文件夹</span></span><br><span class="line"><span class="emphasis">      rd /s /q %post_</span>path%</span><br><span class="line"><span class="code">      md %post_path%</span></span><br><span class="line"><span class="code">      echo 递归copy文件</span></span><br><span class="line"><span class="code">      xcopy /y /e %src_path% %post_path%</span></span><br><span class="line"><span class="code">      echo 还原时间</span></span><br><span class="line"><span class="code">      python E:\data-ana\ana-notes\工具\tools\get_blog_create_time.py</span></span><br><span class="line"><span class="code">      echo 提交</span></span><br><span class="line"><span class="code">      hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</span></span><br><span class="line"><span class="code">      ````</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">      </span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">3.</span> 修改config.yml后报错：yml格式是:后面有空格</span><br><span class="line"></span><br><span class="line"><span class="bullet">4.</span> 实现gitee page自动提交：</span><br><span class="line"></span><br><span class="line">   nodejs+puppeteer(xpath)</span><br><span class="line">   </span><br><span class="line"><span class="bullet">5.</span> 注意，特殊字符尽量不用</span><br><span class="line"></span><br><span class="line"><span class="bullet">   1.</span> 小括号</span><br><span class="line"><span class="bullet">   2.</span> 大括号</span><br><span class="line"><span class="bullet">   3.</span> 中括号</span><br><span class="line">   </span><br><span class="line"><span class="bullet">6.</span> git config --global core.autocrlf false换行转义</span><br><span class="line"></span><br><span class="line"><span class="bullet">7.</span> github</span><br><span class="line"></span><br><span class="line"><span class="bullet">   1.</span> git config --global http.sslVerify &quot;false&quot;</span><br><span class="line"></span><br><span class="line"><span class="section">### config</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">1.</span> 切换中文language</span><br><span class="line"></span><br><span class="line">   zh-CN</span><br><span class="line"></span><br><span class="line"><span class="section">### next&lt;-landscape</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">0.</span> http://theme-next.iissnan.com/</span><br><span class="line"></span><br><span class="line"><span class="bullet">1.</span> 更换主题</span><br><span class="line"></span><br><span class="line">   config--&gt;schemes</span><br><span class="line"></span><br><span class="line"><span class="bullet">2.</span> 设置头像avater</span><br><span class="line"></span><br><span class="line"><span class="bullet">3.</span> 社交图标</span><br><span class="line"></span><br><span class="line">   social<span class="emphasis">_icons</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">   https://fontawesome.com/v5.15/icons?d=gallery&amp;p=2</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">4. 首页全文</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">   auto_</span>excerpt</span><br><span class="line"></span><br><span class="line">   &lt;!--more--&gt;</span><br><span class="line"></span><br><span class="line"><span class="bullet">5.</span> 网站图标</span><br><span class="line"></span><br><span class="line">   <span class="code">```python</span></span><br><span class="line"><span class="code">   favicon:aaaa.avg</span></span><br><span class="line"><span class="code">   source/image/aaaa.avg</span></span><br></pre></td></tr></table></figure></li>
<li><p>背景</p>
<p>canvas</p>
</li>
<li><p>加载进度条 pace</p>
</li>
<li><p>读进度条：scrollpercent</p>
</li>
<li><p>评论</p>
<p>changyan</p>
</li>
<li><p>搜索</p>
</li>
</ol>
   <figure class="highlight dts"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-searchdb --save</span><br><span class="line"></span><br><span class="line">hexo-config</span><br><span class="line"><span class="symbol">search:</span></span><br><span class="line"><span class="symbol">  path:</span> search.xml</span><br><span class="line"><span class="symbol">  field:</span> post</span><br><span class="line"><span class="symbol">  format:</span> html</span><br><span class="line"><span class="symbol">  limit:</span> <span class="number">10000</span></span><br><span class="line">config</span><br><span class="line"><span class="symbol">local_search:</span></span><br></pre></td></tr></table></figure>

<ol start="11">
<li><p>不算子（访问次数）：busuanzi_count</p>
</li>
<li><p>隐藏底盘:footer.powered</p>
</li>
<li><p>修改字体大小</p>
<p>打开<code>\themes\next\source\css\ _variables\base.styl</code>文件，将<code>$font-size-base</code>改成<code>16px</code>，如下所示：</p>
<figure class="highlight gams"><table><tr><td class="code"><pre><span class="line"><span class="meta"><span class="meta-keyword">$font</span>-size-base            =16px</span></span><br></pre></td></tr></table></figure></li>
<li><p>夜间模式darkmode</p>
</li>
<li><p>网站丝滑motion true</p>
</li>
<li><p>three</p>
</li>
<li><p>移动端回顶onmobile</p>
<p>pc端：back2top</p>
</li>
<li><p>阅读进度：reading_progress</p>
</li>
<li><p>阅读进度保存：bookmark</p>
</li>
<li><p>github图标：github_banner</p>
</li>
<li><p>font：字体设置</p>
</li>
<li><p>代码高亮hexo.config</p>
<ol>
<li>highlight</li>
<li>prismjs二选1</li>
</ol>
</li>
</ol>
<h3 id="plugin"><a href="#plugin" class="headerlink" title="plugin"></a>plugin</h3><ol>
<li><p>代码高亮</p>
<figure class="highlight stata"><table><tr><td class="code"><pre><span class="line">npm install hexo-prism-<span class="keyword">plugin</span> --<span class="keyword">save</span></span><br></pre></td></tr></table></figure></li>
<li><p>字数统计</p>
<figure class="highlight coffeescript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">npm</span> i –save hexo-wordcount</span><br></pre></td></tr></table></figure>

<p>theme.config</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">post_wordcount:</span></span><br><span class="line">  <span class="attr">item_text:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">wordcount:</span> <span class="literal">true</span> <span class="comment">#单篇文章字数</span></span><br><span class="line">  <span class="attr">min2read:</span> <span class="literal">true</span> <span class="comment">#单篇阅读时长</span></span><br><span class="line">  <span class="attr">totalcount:</span> <span class="literal">true</span> <span class="comment">#站点总字数</span></span><br><span class="line">  <span class="attr">separated_meta:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></li>
<li><p>搜索</p>
<ol>
<li>下载依赖</li>
</ol>
<figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-searchdb <span class="comment">--save</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>修改hexo.config</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">search:</span><br><span class="line">  path: search.xml</span><br><span class="line">  field: post</span><br><span class="line">  format: html</span><br><span class="line">  <span class="built_in">limit</span>: 10000</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>修改theme.config</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">local_search:</span><br></pre></td></tr></table></figure></li>
<li><p>几何背景</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">cd <span class="keyword">next</span></span><br><span class="line">git clone https:<span class="regexp">//gi</span>thub.com<span class="regexp">/theme-next/</span>theme-<span class="keyword">next</span>-canvas-ribbon source<span class="regexp">/lib/</span>canvas-ribbon</span><br></pre></td></tr></table></figure>

<p>theme.config</p>
<p>canvas_ribbon</p>
</li>
<li><p>字数统计</p>
<p>npm install hexo-word-counter</p>
<p>clean g s</p>
</li>
</ol>
<h3 id="hexo-next主题颜色"><a href="#hexo-next主题颜色" class="headerlink" title="hexo-next主题颜色"></a>hexo-next主题颜色</h3><ol>
<li><p>normal </p>
<p><img src="https://job-wyg.oss-cn-beijing.aliyuncs.com/image-20211106211457578.png" alt="image-20211106211457578"></p>
</li>
<li><p>night </p>
<p><img src="https://job-wyg.oss-cn-beijing.aliyuncs.com/image-20211106211538248.png" alt="image-20211106211538248"></p>
</li>
<li><p>night eighties  </p>
<p>同上</p>
</li>
<li><p>night blue </p>
<p><img src="https://job-wyg.oss-cn-beijing.aliyuncs.com/image-20211106211631863.png"></p>
</li>
<li><p>night bright</p>
<p><img src="https://job-wyg.oss-cn-beijing.aliyuncs.com/image-20211106211858696.png" alt="image-20211106211858696"></p>
</li>
<li><p>solarized </p>
<p><img src="https://job-wyg.oss-cn-beijing.aliyuncs.com/image-20211106211916484.png" alt="image-20211106211916484"></p>
</li>
<li><p>solarized dark </p>
<p><img src="https://job-wyg.oss-cn-beijing.aliyuncs.com/image-20211106211957848.png" alt="image-20211106211957848"></p>
</li>
<li><p>galactic</p>
</li>
</ol>
<p><img src="https://job-wyg.oss-cn-beijing.aliyuncs.com/image-20211106212045168.png" alt="image-20211106212045168"></p>
]]></content>
      <categories>
        <category>utils</category>
      </categories>
  </entry>
  <entry>
    <title>Git的使用</title>
    <url>/2021/10/04/utils/git/</url>
    <content><![CDATA[<h3 id="Git概念"><a href="#Git概念" class="headerlink" title="Git概念"></a>Git概念</h3><ol>
<li><p>手工式版本控制</p>
<ol>
<li>特点<ol>
<li>每改一次备份一次</li>
<li>协同更改需要同时U盘copy</li>
</ol>
</li>
<li>问题<ol>
<li><p>备份</p>
</li>
<li><p>代码还原</p>
</li>
<li><p>协同开发</p>
</li>
<li><p>代码追溯(追责)</p>
<p><img src="https://job-wyg.oss-cn-beijing.aliyuncs.com/image-20211102012109951.png" alt="image-20211102012109951"></p>
</li>
</ol>
</li>
</ol>
<span id="more"></span></li>
<li><p>解决：<font color='red'>版本控制</font>结束了手动管理多个“版本”的史前时代，进入到版本控制的20世纪。</p>
</li>
<li><p>集中式版本控制SVN/CVS</p>
<ol>
<li>版本库都放在集中式服务器</li>
<li>使用前先从集中式服务器copy过来</li>
<li>修改完后在上传到集中服务器</li>
</ol>
</li>
<li><p>分布式版本控制（共享版本库）</p>
<ol>
<li>每个人都有所有的版本，gitee/github也算个人</li>
<li>一个人修改了A那么直接上传就会记录这个修改内容</li>
<li>本地有所有的版本</li>
</ol>
</li>
</ol>
<h3 id="Git操作"><a href="#Git操作" class="headerlink" title="Git操作"></a>Git操作</h3><h5 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h5><ol>
<li><p>安装完成先自报家门</p>
<figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line">git <span class="keyword">config</span> --<span class="keyword">global</span> user<span class="variable">.name</span> <span class="string">&quot;Your Name&quot;</span></span><br><span class="line">git <span class="keyword">config</span> --<span class="keyword">global</span> user<span class="variable">.email</span> <span class="string">&quot;email@example.com&quot;</span></span><br></pre></td></tr></table></figure>

<p>git config 命令的 –global 表示整个电脑的git都设置为这个身份</p>
</li>
<li><p>创建版本库</p>
<figure class="highlight dos"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> blog</span><br><span class="line"><span class="built_in">cd</span> blog</span><br><span class="line">git init</span><br></pre></td></tr></table></figure></li>
<li><p>写文件</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">touch readme.txt</span><br><span class="line">git <span class="keyword">add</span> .</span><br><span class="line">git <span class="keyword">commit</span> -m &quot;wrote a file&quot;</span><br></pre></td></tr></table></figure>

<p>. 表示当前目录</p>
</li>
</ol>
<h5 id="版本撤回"><a href="#版本撤回" class="headerlink" title="版本撤回"></a>版本撤回</h5><ol>
<li><p>查看当前文件状态(工作区同暂存区、HEAD相比，并显示未add和已add未commit的信息)</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">git status</span></span><br></pre></td></tr></table></figure>

<p><img src="https://job-wyg.oss-cn-beijing.aliyuncs.com/image-20211004192710237.png" alt="image-20211004192710237"></p>
</li>
<li><p>查看文件修改内容(工作区同上一次暂存区相比)</p>
<figure class="highlight maxima"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">diff</span> readme.txt</span><br></pre></td></tr></table></figure></li>
<li><p>查看每次修改和对应的修改提示</p>
<figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">log</span></span><br></pre></td></tr></table></figure></li>
<li><p>版本撤回</p>
<ol>
<li><p>回到上上个版本</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">git <span class="keyword">reset</span> <span class="comment">--hard HEAD^^</span></span><br></pre></td></tr></table></figure></li>
<li><p>–hard表示</p>
</li>
<li><p>git reset –head 版本id/head都可以回退</p>
</li>
<li><p>如果撤多了那么别叉掉窗口，几下最近几次commit-id的前机会还可以回撤</p>
<figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line">git reset <span class="params">--hard</span> <span class="keyword">cd</span>0c</span><br></pre></td></tr></table></figure></li>
<li><p>如果不小心叉掉了，git reflog还可以查看各个commit-id</p>
<p><img src="https://job-wyg.oss-cn-beijing.aliyuncs.com/image-20211004183507316.png" alt="image-20211004183507316"></p>
<p>最下面是第一次commit</p>
<p>然后根据git reset commit-id 回退版本</p>
</li>
<li><p>但是，如果你的工作区没有add就进行了版本撤回，那么就会找不到你这此更改的内容。</p>
</li>
<li><p>如果你的工作区已经add到了缓存区，</p>
</li>
</ol>
</li>
<li><p>撤销修改</p>
<ol>
<li><p>丢弃工作区，工作区&lt;—暂存区</p>
<figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">git checkout <span class="comment">-- readme.txt</span></span><br></pre></td></tr></table></figure></li>
<li><p>丢掉暂存区，暂存区&lt;—版本库</p>
<figure class="highlight maxima"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">reset</span> head readme.txt</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
<li><p>删除文件</p>
<p>rm readme.txt</p>
<ol>
<li><p>整体删除</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">git rm/<span class="keyword">add</span> readme.txt</span><br><span class="line">git <span class="keyword">commit</span> -m &quot;&quot;</span><br></pre></td></tr></table></figure></li>
<li><p>撤回删除(从暂存区拿回)</p>
<figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">git checkout <span class="comment">-- test.txt</span></span><br></pre></td></tr></table></figure></li>
</ol>
</li>
</ol>
<h5 id="远程仓库"><a href="#远程仓库" class="headerlink" title="远程仓库"></a>远程仓库</h5><ol>
<li><p>添加远程仓库</p>
<figure class="highlight llvm"><table><tr><td class="code"><pre><span class="line">git remote <span class="keyword">add</span> origin git<span class="title">@github.com</span>:Wang-yonggan/test.git</span><br></pre></td></tr></table></figure></li>
<li><p>远程库的名字就是<code>origin</code>，这是Git默认的叫法把本地库的内容推送到远程，用<code>git push</code>命令，实际上是把当前分支<code>master</code>推送到远程。</p>
</li>
<li><p>由于远程库是空的，我们第一次推送<code>master</code>分支时，加上了<code>-u</code>参数，Git不但会把本地的<code>master</code>分支内容推送的远程新的<code>master</code>分支，还会把本地的<code>master</code>分支和远程的<code>master</code>分支关联起来，在以后的推送或者拉取时就可以简化命令。</p>
<p>以后只需要</p>
<figure class="highlight maxima"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">push</span> <span class="built_in">origin</span> master</span><br></pre></td></tr></table></figure></li>
<li><p>查看远程仓库状态</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">git remote -v</span></span><br></pre></td></tr></table></figure></li>
<li><p>解除远程仓库关系</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">git remote rm origin</span></span><br></pre></td></tr></table></figure></li>
<li><p>克隆(支持两种协议)</p>
<ol>
<li>https 默认</li>
<li>git 更快，有的公司不支持</li>
</ol>
</li>
<li><p>远程删除一个文件夹</p>
<ol>
<li>git rm -r –cached dir  –&gt;撤回 git reset dir</li>
<li>git rm –cached file</li>
<li>git  commit</li>
<li>git push</li>
</ol>
</li>
</ol>
<h5 id="分支管理"><a href="#分支管理" class="headerlink" title="分支管理"></a>分支管理</h5><ol>
<li><p>创建分支</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">git branch dev</span></span><br></pre></td></tr></table></figure></li>
<li><p>切换分支</p>
<p>checkout==switch</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">git checkout dev</span></span><br></pre></td></tr></table></figure></li>
<li><p>查看有哪些分支</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">git branch</span></span><br></pre></td></tr></table></figure></li>
<li><p>合并分支(只有撤回到master下面这句才有效)</p>
<figure class="highlight cos"><table><tr><td class="code"><pre><span class="line">git <span class="keyword">merge</span> dev</span><br></pre></td></tr></table></figure></li>
<li><p>删除分支</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">git branch -d dev</span></span><br></pre></td></tr></table></figure></li>
<li><p>远程分支master&lt;—–&gt;本地分支master</p>
</li>
<li><p>本地的分支会共享暂存区，但版本库独立，即分支master创建并add到暂存区的a文件如果被分支dev commit了，那么再切换到master就没有这个文件。</p>
</li>
<li><p>分支冲突</p>
<p><img src="https://job-wyg.oss-cn-beijing.aliyuncs.com/image-20211004221917099.png" alt="image-20211004221917099"></p>
<p>修改+add+commit手动合并</p>
</li>
</ol>
<h5 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h5><ol>
<li><p>tag标签</p>
<p>​    标签与commit-id对应关系</p>
<ol>
<li><p>创建tag</p>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line">git <span class="keyword">tag</span> <span class="title">v1</span>.<span class="number">0</span></span><br></pre></td></tr></table></figure></li>
<li><p>根据commit-id创建tag</p>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line">git <span class="keyword">tag</span> <span class="title">v0</span>.<span class="number">8</span> abcde</span><br></pre></td></tr></table></figure></li>
<li><p>上传tags</p>
<figure class="highlight armasm"><table><tr><td class="code"><pre><span class="line"><span class="symbol">git</span> <span class="keyword">push</span> orgin <span class="built_in">v1</span>.<span class="number">0</span></span><br><span class="line"><span class="symbol">git</span> <span class="keyword">push</span> orgin --tags</span><br></pre></td></tr></table></figure></li>
<li><p>删除tags</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line">git push origin <span class="symbol">:refs/tags/v0</span>.<span class="number">9</span></span><br></pre></td></tr></table></figure></li>
</ol>
</li>
<li><p>忽略文件</p>
<ol>
<li><p>文件内容(!表示非)</p>
<figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line">*<span class="string">.txt</span>*</span><br><span class="line">!<span class="string">.gitignore</span></span><br></pre></td></tr></table></figure></li>
<li><p>强制添加</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">git add -f <span class="module-access"><span class="module"><span class="identifier">App</span>.</span></span><span class="keyword">class</span></span><br></pre></td></tr></table></figure></li>
<li><p>例子</p>
<ol>
<li>忽略.o和.a文件 : *.[oa]</li>
<li>忽略目录d: d/</li>
<li>* ？：代表任意的一个字符<br>  * ＊：代表任意数目的字符<br>  * {!ab}：必须不是此类型<br>  * {ab,bb,cx}：代表ab,bb,cx中任一类型即可<br>  * [abc]：代表a,b,c中任一字符即可<br>  * [ ^abc]：代表必须不是a,b,c中任一字符</li>
<li></li>
</ol>
</li>
</ol>
</li>
<li><p>别名</p>
<ol>
<li><p>st=status</p>
<figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line">git <span class="keyword">config</span> --<span class="keyword">global</span> <span class="keyword">alias</span><span class="variable">.st</span> status</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
</ol>
<h3 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h3><ol>
<li>分支</li>
<li>版本<ol>
<li>HEAD表示当前版本</li>
<li>HEAD^^表示上上一个版本</li>
<li>HEAD~100表示上100个版本</li>
<li></li>
</ol>
</li>
</ol>
<h3 id="做过的配置"><a href="#做过的配置" class="headerlink" title="做过的配置"></a>做过的配置</h3><ol>
<li><p>git config –global http.sslVerify true   </p>
<p>push 失败 SSL</p>
</li>
<li><p>push 到github失败，网速问题</p>
<p>使用@git协议</p>
<ol>
<li><p>github加入自己的本机的ssh</p>
</li>
<li><p>将本机的.git的里面的comfig.remote修改为项目的ssh链接</p>
<p><a href="mailto:&#x67;&#x69;&#116;&#64;&#103;&#x69;&#116;&#x68;&#x75;&#x62;&#x2e;&#x63;&#111;&#x6d;">&#x67;&#x69;&#116;&#64;&#103;&#x69;&#116;&#x68;&#x75;&#x62;&#x2e;&#x63;&#111;&#x6d;</a>:Wang-yonggan/Wang-yonggan.github.io.git</p>
<p><a href="https://github.com/Wang-yonggan/Wang-yonggan.github.io.git">https://github.com/Wang-yonggan/Wang-yonggan.github.io.git</a></p>
</li>
</ol>
</li>
</ol>
]]></content>
      <categories>
        <category>utils</category>
      </categories>
  </entry>
  <entry>
    <title>文件工具</title>
    <url>/2021/11/08/utils/fileUtil/</url>
    <content><![CDATA[<h3 id="pdf-word-ppt"><a href="#pdf-word-ppt" class="headerlink" title="pdf-word-ppt"></a>pdf-word-ppt</h3><ol>
<li><p>下载pdf的需求</p>
<blockquote>
<p>曲线救国: 先保存html,然后转换成pdf</p>
</blockquote>
<ol>
<li>保存html</li>
<li>html转换pdf<ul>
<li>程序:wkhtmltopdf</li>
<li>借用shell或者bat</li>
</ul>
</li>
</ol>
</li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>idea操作</title>
    <url>/2021/10/08/utils/idea%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<h3 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h3><ol>
<li>基本<ol>
<li>创建 setter toString.. alt+insert</li>
<li></li>
</ol>
</li>
<li>次级</li>
<li>高阶<ol>
<li><p>查看父子图 右键+图</p>
</li>
<li><p>查看所有方法,alt+7</p>
<span id="more"></span></li>
<li><p>alt+左键 多行复制</p>
</li>
<li><p>shift双击搜索</p>
</li>
<li><p>alt+回车  检错</p>
</li>
<li><p>ctrl+alt+b查看实现类  </p>
<figure class="highlight cos"><table><tr><td class="code"><pre><span class="line">直接<span class="keyword">print</span>这个类的<span class="keyword">Class</span>也是个好方法</span><br></pre></td></tr></table></figure></li>
<li></li>
</ol>
</li>
</ol>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><ol>
<li>插件<ol>
<li>开发<ol>
<li>restfulTool</li>
<li></li>
</ol>
</li>
<li>其他<ol>
<li>chinese中文</li>
<li>static</li>
<li></li>
</ol>
</li>
<li>外观<ol>
<li>meterial theme</li>
</ol>
</li>
</ol>
</li>
<li>自定义快捷键<ol>
<li>ctrl+右键 重命名</li>
<li>F1 运行</li>
<li>ctrl+shift+右键 格式化代码</li>
</ol>
</li>
<li>代码动态模板<ol>
<li>zz html  &lt;!–$a–&gt;</li>
<li></li>
</ol>
</li>
<li>代码模板</li>
</ol>
]]></content>
      <categories>
        <category>utils</category>
      </categories>
  </entry>
  <entry>
    <title>maven的使用</title>
    <url>/2021/10/07/utils/maven/</url>
    <content><![CDATA[<h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><p>1.<a href="https://www.cnblogs.com/PatrickLee/archive/2012/10/31/2747398.html">https://www.cnblogs.com/PatrickLee/archive/2012/10/31/2747398.html</a></p>
<ol start="2">
<li><p>编译：mvn compile　　–src/main/java目录java源码编译生成class （target目录下）</p>
</li>
<li><p>测试：mvn test　　　　–src/test/java 目录编译</p>
</li>
<li><p>清理：mvn clean　　　 –删除target目录，也就是将class文件等删除</p>
</li>
<li><p>打包：mvn package　　–生成压缩文件：java项目#jar包；web项目#war包，也是放在target目录下</p>
</li>
<li><p>安装：mvn install　　　–将压缩文件(jar或者war)上传到本地仓库</p>
</li>
<li><p>部署|发布：mvn deploy　　–将压缩文件上传私服</p>
<span id="more"></span></li>
</ol>
<h3 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h3><ol>
<li>java项目</li>
</ol>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">mvn archetype:generate <span class="attribute">-DgroupId</span>=com.dreams.maven.quickstart <span class="attribute">-DartifactId</span>=simple <span class="attribute">-DarchetypeArtifactId</span>=maven-archetype-quickstart</span><br><span class="line"></span><br><span class="line">mvn archetype:create</span><br><span class="line">   <span class="attribute">-DgroupId</span>=packageName</span><br><span class="line">   <span class="attribute">-DartifactId</span>=projectName </span><br></pre></td></tr></table></figure>

<ol start="2">
<li><p>wen项目</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">mvn archetype:generate <span class="attribute">-DgroupId</span>=com.packageName <span class="attribute">-DartifactId</span>=webappName <span class="attribute">-DarchetypeArtifactId</span>=maven-archetype-quickstart</span><br></pre></td></tr></table></figure></li>
</ol>
<p>mvn                                 –核心命令</p>
<p> archetype:generate                              –创建项目 </p>
<p>-DgroupId=com.dreams.maven.quickstart             –包名的写法，域名的反写 </p>
<p>-DartifactId=simple                                               –项目名称 </p>
<p>-DarchetypeArtifactId=maven-archetype-quickstart  –表示创建的是[maven]java项目—固定</p>
<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3>]]></content>
      <categories>
        <category>utils</category>
      </categories>
  </entry>
  <entry>
    <title>puppeteer使用</title>
    <url>/2021/10/01/utils/puppeteer/</url>
    <content><![CDATA[<h1 id="Puppeteer的使用"><a href="#Puppeteer的使用" class="headerlink" title="Puppeteer的使用"></a>Puppeteer的使用</h1><h3 id="爬虫"><a href="#爬虫" class="headerlink" title="爬虫"></a>爬虫</h3><h5 id="python"><a href="#python" class="headerlink" title="python"></a>python</h5><ol>
<li><p>urllib+requests——Beautifulsoup+lxml—&gt;数据</p>
</li>
<li><p>scrapy  :抓取+解析</p>
<span id="more"></span></li>
</ol>
<h5 id="puppeteer"><a href="#puppeteer" class="headerlink" title="puppeteer"></a>puppeteer</h5><ol>
<li><p>下载</p>
<figure class="highlight coffeescript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">npm</span> init</span><br><span class="line"><span class="built_in">npm</span> i puppeteer</span><br></pre></td></tr></table></figure></li>
<li><p>seletor</p>
</li>
</ol>
<h3 id="xpath"><a href="#xpath" class="headerlink" title="xpath"></a>xpath</h3><ol>
<li><p>层级 /直接子集() // 跳跃层级(递归)</p>
</li>
<li><p>属性 @</p>
<ol>
<li><p>class</p>
</li>
<li><p>id</p>
</li>
<li><p>property</p>
</li>
<li><p>//article//a/@href</p>
<!--more--></li>
</ol>
</li>
<li><p>函数</p>
<ol>
<li><p>contain</p>
<figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">\\<span class="keyword">div</span>[<span class="keyword">contain</span>(@<span class="built_in">class</span>, <span class="string">&quot;classnameContain&quot;</span>)]</span><br></pre></td></tr></table></figure></li>
<li><p>text</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">http:<span class="regexp">//</span>books.toscrape.com<span class="regexp">/catalogue/</span>category<span class="regexp">/books_1/i</span>ndex.html</span><br><span class="line"><span class="regexp">//u</span>l[@class=<span class="string">&quot;nav nav-list&quot;</span>]<span class="regexp">//u</span>l<span class="regexp">//</span>a/text()</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
</ol>
]]></content>
      <categories>
        <category>utils</category>
        <category>爬虫</category>
      </categories>
  </entry>
  <entry>
    <title>xshell的使用</title>
    <url>/2021/10/06/utils/xshell/</url>
    <content><![CDATA[<h3 id="连接VMware"><a href="#连接VMware" class="headerlink" title="连接VMware"></a>连接VMware</h3><ol>
<li><p>配置linux的网络连接</p>
<ol>
<li><p><a href="https://www.cnblogs.com/shireenlee4testing/p/9469650.html">参考-如何使用Xshell连接VMware上的Linux虚拟机</a></p>
</li>
<li><p>在VMware workstation里，点击菜单栏上的【编辑】–&gt;【虚拟网络编辑器】，打开下方的虚拟网络编辑器。</p>
<ol>
<li>选择VMnet8（NAT模式）</li>
<li>管理员模式下取消勾选【使用本地DHCP服务…】</li>
</ol>
</li>
<li><p>net设置查看子网ip和网关ip</p>
<span id="more"></span></li>
<li><p>root下 vi /etc/sysconfig/network-scripts/ifcfg-ens* </p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="attribute">BOOTPROTO</span>=static</span><br><span class="line"><span class="attribute">IPADDR</span>=192.168.44.3    </span><br><span class="line"><span class="attribute">NETMASK</span>=255.255.255.0</span><br><span class="line"><span class="attribute">GATEWAY</span>=192.168.44.2    				</span><br><span class="line"><span class="attribute">ONBOOT</span>=<span class="literal">yes</span></span><br><span class="line"></span><br><span class="line">192.168.44.0    vmware.net.config.z</span><br><span class="line"><span class="attribute">IPADDR</span>=192.168.44.3    host<span class="built_in"> ip</span></span><br><span class="line"><span class="built_in"></span><span class="attribute">GATEWAY</span>=192.168.44.2   getway----vmware.net.config.getway</span><br></pre></td></tr></table></figure></li>
<li><p>设置DNS</p>
<p>vi /etc/sysconfig/network</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">NETWORKING</span>=<span class="literal">yes</span></span><br><span class="line"><span class="attr">HOSTNAME</span>=slave1</span><br></pre></td></tr></table></figure></li>
<li><p>修改主机名</p>
<p>vim /etc/hostname</p>
<p>slave1</p>
</li>
<li><p>重启网络服务</p>
<ol>
<li>systemctl stop NetworkManager 关闭manager</li>
<li>systemctl restart network</li>
<li>service network restart</li>
</ol>
</li>
<li><p>设置windows的网络连接</p>
<ol>
<li><p>设置VMnet8在Windows上的IP属性，（打开控制面板–&gt;网络和Internet，在右侧点击【更改适配器设置】，进入“网络连接”页面）</p>
<p><img src="https://job-wyg.oss-cn-beijing.aliyuncs.com/image-20211006230732307.png" alt="image-20211006230732307"></p>
</li>
</ol>
</li>
<li><p>连接 ssh 192.168.44.3</p>
</li>
</ol>
</li>
<li><p>免密连接</p>
<ol>
<li><a href="https://www.cnblogs.com/dadonggg/p/8350423.html">参考—Xshell配置ssh免密码登录-密钥公钥(Public key)</a></li>
<li>ssh登录原理<ol>
<li>客户端发出认证请求；</li>
<li>服务器端使用客户端发送的公钥对一个随机的256位的字符串进行加密，并发送给 客户端；</li>
<li>客户端使用私钥对字符串进行解密，并生成一个MD5值发送给服务器端；</li>
<li>服务器端根据原始随机字符串生成MD5值进行匹配, 确认客户端身份；</li>
<li>至此, 双方互相确认对方身份并建立加密信道, 可以正式进行安全通信。</li>
<li><img src="https://job-wyg.oss-cn-beijing.aliyuncs.com/image-20211007002314884.png" alt="image-20211007002314884"></li>
</ol>
</li>
</ol>
</li>
</ol>
<p>cat id_rsa_2048_master.pub &gt;&gt; ~/.ssh/authorized_keys</p>
]]></content>
      <categories>
        <category>utils</category>
      </categories>
  </entry>
  <entry>
    <title></title>
    <url>/2021/09/09/utils/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
    <content><![CDATA[<h2 id=""><a href="#" class="headerlink" title=""></a></h2><ol>
<li>19\d\d  判断19..年    </li>
<li>a.c   abc adc   </li>
<li>a\&amp;b   a&amp;b</li>
<li>a\u548c   a和c</li>
<li>\d   007  数值  00\D   00A 00B 非数字 </li>
<li>java\w  字母/数字/下划线 java8    java\W   java！   非字母 非数字 非下划线</li>
<li>a\sb  a b  空白字符        a\Sb  a&amp;b  非空白字符，非tab </li>
<li>a\b* abc aa</li>
<li>\d{0,3} 三个数字</li>
<li>\d{n,}最少n个数字</li>
<li>^开头 $结束</li>
<li>^a\d{3}$ a123</li>
<li>[abcd]1 a1 z1  == [a-f]1</li>
<li>[a-f0-9]{6} abc123  1a2b3c  aafe32</li>
<li>[^0-9]{3} abc 取反</li>
<li> java|python  java   python</li>
<li>.一个   *1或多个  +0或一个  ？0或1个 非贪婪匹配<h2 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h2></li>
<li>er\b  never 因为er结尾  而不能verb</li>
<li><h2 id="匹配分组-pattern-matcher-str"><a href="#匹配分组-pattern-matcher-str" class="headerlink" title="匹配分组  pattern.matcher(str)"></a>匹配分组  pattern.matcher(str)</h2></li>
<li>(\d{4})-(\d{1,2})-(\d{1,2}) 分开2021-6-22</li>
<li>^([0-1][0-9]|2[0-3]):([0-5][0-9])$ 分开 23:22</li>
</ol>
<h2 id="分割"><a href="#分割" class="headerlink" title="分割"></a>分割</h2><ol>
<li>“a b     c”.split(“\s+”)==&gt;”a”,”b”,”c”</li>
<li>“a,b    ;;;; c”.split(“\s+\,\;”)==&gt;”a”,”b”,”c”</li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>ORM框架</title>
    <url>/2021/10/08/%E7%BB%84%E4%BB%B6/ORM%E6%A1%86%E6%9E%B6/</url>
    <content><![CDATA[<h3 id="技术发展"><a href="#技术发展" class="headerlink" title="技术发展"></a>技术发展</h3><ol>
<li><p>JDBC–传统的数据库操作</p>
<ol>
<li><p>数据库太多的产生的一个规范，一种接口</p>
</li>
<li><p>步骤</p>
<ol>
<li><p>加载驱动</p>
</li>
<li><p>获得连接conn</p>
</li>
<li><p>创建sql语句</p>
</li>
<li><p>获得报表-</p>
</li>
<li><p>执行的到结果集</p>
</li>
<li><p>while resultSet.next()</p>
<ol>
<li>创建user</li>
<li>setter.getInt</li>
<li>addToList</li>
</ol>
</li>
<li><p>关闭</p>
<span id="more"></span></li>
</ol>
</li>
<li><p>缺陷</p>
<ol>
<li>操作繁琐<ol>
<li>每次statement</li>
<li>每次取得的数据都要next+new user</li>
<li>表的属性名称繁琐，下划线与驼峰命名的转换</li>
</ol>
</li>
<li>占位符</li>
<li>连接浪费每次都链接—连接池</li>
<li>代码重复</li>
<li>sql硬编码–xml反射</li>
<li>没缓存</li>
</ol>
</li>
<li><p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">            conn = DriverManager.getConnection(URL, USER, PASSWORD);</span><br><span class="line">             String sql = <span class="string">&quot;select * from student2&quot;</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ps = conn.prepareStatement(sql);</span><br><span class="line">            ResultSet resultSet = ps.executeQuery();</span><br><span class="line">            <span class="keyword">while</span> (resultSet.next()) &#123;</span><br><span class="line">                Student student = <span class="keyword">new</span> Student();</span><br><span class="line">                student.setId(resultSet.getInt(<span class="string">&quot;id&quot;</span>));</span><br><span class="line">                student.setName(resultSet.getString(<span class="string">&quot;name&quot;</span>));</span><br><span class="line">                ScoreCourse scoreCourse = <span class="keyword">new</span> ScoreCourse();</span><br><span class="line">                <span class="keyword">for</span> (String course : Course.getCourses()) &#123;</span><br><span class="line">                    scoreCourse.getScoreCourseMap().put(course, resultSet.getInt(course));</span><br><span class="line">                &#125;</span><br><span class="line">                student.setScoreCourse(scoreCourse);</span><br><span class="line">                res.add(student);</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
<li><p>ORM思想</p>
<ol>
<li>两个映射关系<ol>
<li>实体类—表</li>
<li>实体类属性—表字段</li>
</ol>
</li>
<li>封装jdbc，全自动hibernate</li>
</ol>
</li>
<li><p>JPA </p>
<ol>
<li>Java对象持久化API</li>
<li>ORM框架太多产生的规范，一种规范</li>
<li>常见<ol>
<li>hebernate</li>
<li>OpenJPA</li>
<li>TopLink</li>
</ol>
</li>
<li>三方面<ol>
<li><strong>ORM映射元数据</strong>： 支持XML和注解两种元数据的形式，元数据描述对象和表之间的映射关系</li>
<li><strong>API</strong>： 操作实体对象来执行CRUD操作</li>
<li><strong>查询语言</strong>： 通过面向对象而非面向数据库的查询语言（<code>JPQL</code>）查询数据，避免程序的SQL语句紧密耦合</li>
</ol>
</li>
</ol>
</li>
</ol>
<h3 id="springData-jap"><a href="#springData-jap" class="headerlink" title="springData-jap"></a><a href="https://spring.io/projects/spring-data-jpa#overview">springData-jap</a></h3><ol>
<li><p>依赖-配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-jpa<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">jpa:</span></span><br><span class="line">    <span class="attr">database:</span> <span class="string">MySQL</span></span><br><span class="line">    <span class="attr">database-platform:</span> <span class="string">org.hibernate.dialect.MySQL5InnoDBDialect</span></span><br><span class="line">    <span class="attr">show-sql:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">hibernate:</span></span><br><span class="line">      <span class="attr">ddl-auto:</span> <span class="string">update</span></span><br></pre></td></tr></table></figure>

<p>参数:</p>
<ol>
<li><code>create</code>：每次运行程序时，都会重新创建表，故而数据会丢失</li>
<li><code>create-drop</code>：每次运行程序时会先创建表结构，然后待程序结束时清空表</li>
<li><code>upadte</code>：每次运行程序，没有表时会创建表，如果对象发生改变会更新表结构，原有数据不会清空，只会更新（推荐使用）</li>
<li><code>validate</code>：运行程序会校验数据与数据库的字段类型是否相同，字段不同会报错</li>
<li><code>none</code>: 禁用DDL处理</li>
<li>show-sql：打印sql语句，方便调试</li>
</ol>
</li>
<li><p>uml图</p>
<p><img src="https://job-wyg.oss-cn-beijing.aliyuncs.com/image-20211009005723461.png" alt="image-20211009005723461"></p>
<ol>
<li>Repository：最顶层的接口，是一个空的接口，目的是为了统一所有Repository的类型，且能让组件扫描的时候自动识别。Repository&lt;T, ID&gt;使用泛型定义的实体类类型和主健类型。</li>
<li>CrudRepository ：是Repository的子接口，提供CRUD的功能,有哪些接口看API，默认是很简单的CRUD操作。</li>
<li>PagingAndSortingRepository：是CrudRepository的子接口，添加分页和排序的功能，很少使用。</li>
<li>JpaRepository：是PagingAndSortingRepository的子接口，增加了一些实用的功能，比如：批量操作等。如果有分页操作，一般继承这个类。</li>
<li>JpaSpecificationExecutor：用来做负责查询的接口</li>
<li>Specification：是Spring Data JPA提供的一个查询规范，要做复杂的查询，只需围绕这个规范来设置查询条件即可</li>
</ol>
</li>
<li><p>细节</p>
<ol>
<li><p>entity</p>
<p>@entity @table  @id @Column</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GenericGenerator(name = &quot;idGenerator&quot;, strategy = &quot;uuid&quot;)</span></span><br><span class="line"><span class="meta">@GeneratedValue(generator = &quot;idGenerator&quot;)</span></span><br></pre></td></tr></table></figure></li>
<li><p>dao</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserRepository</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">User</span>, <span class="title">String</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>controller</p>
<ol>
<li><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> UserRepository userRepository;</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
</ol>
</li>
</ol>
<h3 id="jdbcTemplate"><a href="#jdbcTemplate" class="headerlink" title="jdbcTemplate"></a>jdbcTemplate</h3><ol>
<li></li>
</ol>
]]></content>
      <categories>
        <category>组件</category>
      </categories>
  </entry>
  <entry>
    <title>common-lang3</title>
    <url>/2021/11/06/%E7%BB%84%E4%BB%B6/common-lang3/</url>
    <content><![CDATA[<h1 id="common-lang3-参考"><a href="#common-lang3-参考" class="headerlink" title="common-lang3 参考"></a><a href="https://www.jianshu.com/p/1886903ed14c">common-lang3 参考</a></h1><p>[toc]</p>
<h3 id="ArrayUtils"><a href="#ArrayUtils" class="headerlink" title="ArrayUtils"></a>ArrayUtils</h3><p>集合工具类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建数组</span></span><br><span class="line">String[] array = ArrayUtils.toArray(<span class="string">&quot;1&quot;</span>, <span class="string">&quot;2&quot;</span>);</span><br><span class="line"><span class="comment">//判断两个数据是否相等，如果内容相同， 顺序相同 则返回 true</span></span><br><span class="line">ArrayUtils.isEquals(arr1,arr2);</span><br><span class="line"><span class="comment">//判断数组中是否包含某一对象</span></span><br><span class="line">ArrayUtils.contains(arr, <span class="string">&quot;33&quot;</span>);</span><br><span class="line"><span class="comment">//二维数组转换成MAP</span></span><br><span class="line">Map map = ArrayUtils.toMap(<span class="keyword">new</span> String[][] &#123; </span><br><span class="line">    &#123; <span class="string">&quot;RED&quot;</span>, <span class="string">&quot;#FF0000&quot;</span> &#125;, &#123; <span class="string">&quot;GREEN&quot;</span>, <span class="string">&quot;#00FF00&quot;</span> &#125;, &#123; <span class="string">&quot;BLUE&quot;</span>, <span class="string">&quot;#0000FF&quot;</span> &#125; &#125;);</span><br></pre></td></tr></table></figure>

<h3 id="DateUtils"><a href="#DateUtils" class="headerlink" title="DateUtils"></a>DateUtils</h3><p>日期工具类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//日期加n天</span></span><br><span class="line">DateUtils.addDays(<span class="keyword">new</span> Date(), n);</span><br><span class="line"><span class="comment">//判断是否同一天</span></span><br><span class="line">DateUtils.isSameDay(date1, date2);</span><br><span class="line"><span class="comment">//字符串时间转换为Date</span></span><br><span class="line">DateUtils.parseDate(str, parsePatterns);</span><br></pre></td></tr></table></figure>

<h3 id="1、StringUtils"><a href="#1、StringUtils" class="headerlink" title="1、StringUtils"></a>1、StringUtils</h3><p>操作字符串的工具类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//首字母大小写转换</span></span><br><span class="line">StringUtils.capitalize(<span class="string">&quot;cat&quot;</span>);<span class="comment">//---&quot;Cat&quot;</span></span><br><span class="line">StringUtils.uncapitalize(<span class="string">&quot;Cat&quot;</span>);<span class="comment">//---&quot;cat&quot;</span></span><br><span class="line"><span class="comment">//去除字符串中的&quot;\n&quot;, &quot;\r&quot;, or &quot;\r\n&quot;</span></span><br><span class="line">StringUtils.chomp(<span class="string">&quot;abc\r\n&quot;</span>);<span class="comment">//---&quot;abc&quot;</span></span><br><span class="line"><span class="comment">//判断一字符串是否包含另一字符串</span></span><br><span class="line">StringUtils.contains(<span class="string">&quot;abc&quot;</span>, <span class="string">&quot;z&quot;</span>);<span class="comment">//---false</span></span><br><span class="line">StringUtils.containsIgnoreCase(<span class="string">&quot;abc&quot;</span>, <span class="string">&quot;A&quot;</span>);<span class="comment">//---true</span></span><br><span class="line"><span class="comment">//删除字符串中的梭有空格</span></span><br><span class="line">StringUtils.deleteWhitespace(<span class="string">&quot;   ab  c  &quot;</span>);<span class="comment">//---&quot;abc&quot;</span></span><br><span class="line"><span class="comment">//检查字符串结尾后缀是否匹配</span></span><br><span class="line">StringUtils.endsWith(<span class="string">&quot;abcdef&quot;</span>, <span class="string">&quot;def&quot;</span>);<span class="comment">//---true</span></span><br><span class="line">StringUtils.endsWithIgnoreCase(<span class="string">&quot;ABCDEF&quot;</span>, <span class="string">&quot;def&quot;</span>);<span class="comment">//---true</span></span><br><span class="line">StringUtils.endsWithAny(<span class="string">&quot;abcxyz&quot;</span>, <span class="keyword">new</span> String[] &#123;<span class="keyword">null</span>, <span class="string">&quot;xyz&quot;</span>, <span class="string">&quot;abc&quot;</span>&#125;);<span class="comment">//---true</span></span><br><span class="line"><span class="comment">//判断两字符串是否相同</span></span><br><span class="line">StringUtils.equalsIgnoreCase(<span class="string">&quot;abc&quot;</span>, <span class="string">&quot;ABC&quot;</span>);<span class="comment">//---true</span></span><br><span class="line"><span class="comment">//比较字符串数组内的所有元素的字符序列，起始一致则返回一致的字符串，若无则返回&quot;&quot;</span></span><br><span class="line">StringUtils.getCommonPrefix(<span class="keyword">new</span> String[] &#123;<span class="string">&quot;abcde&quot;</span>, <span class="string">&quot;abxyz&quot;</span>&#125;);<span class="comment">//---&quot;ab&quot;</span></span><br><span class="line"><span class="comment">//判断字符串大写、小写</span></span><br><span class="line">StringUtils.isAllUpperCase(<span class="string">&quot;ABC&quot;</span>);<span class="comment">//---true</span></span><br><span class="line"><span class="comment">//判断是否为空(注：isBlank与isEmpty 区别)</span></span><br><span class="line">StringUtils.isBlank(<span class="keyword">null</span>);StringUtils.isBlank(<span class="string">&quot;&quot;</span>);StringUtils.isBlank(<span class="string">&quot; &quot;</span>);<span class="comment">//---true</span></span><br><span class="line">StringUtils.isNoneBlank(<span class="string">&quot; &quot;</span>, <span class="string">&quot;bar&quot;</span>);<span class="comment">//---false</span></span><br><span class="line">StringUtils.isEmpty(<span class="keyword">null</span>);StringUtils.isEmpty(<span class="string">&quot;&quot;</span>);<span class="comment">//---true</span></span><br><span class="line">StringUtils.isEmpty(<span class="string">&quot; &quot;</span>);<span class="comment">//---false</span></span><br><span class="line">StringUtils.isNoneEmpty(<span class="string">&quot; &quot;</span>, <span class="string">&quot;bar&quot;</span>);<span class="comment">//---true</span></span><br><span class="line"><span class="comment">//判断字符串数字</span></span><br><span class="line">StringUtils.isNumeric(<span class="string">&quot;123&quot;</span>);<span class="comment">//---false</span></span><br><span class="line">StringUtils.isNumericSpace(<span class="string">&quot;12 3&quot;</span>);<span class="comment">//---true</span></span><br><span class="line"><span class="comment">//数组中加入分隔符号</span></span><br><span class="line"><span class="comment">//StringUtils.join([1, 2, 3], ‘;‘);//---&quot;1;2;PKJjkkaf&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//大小写转换</span></span><br><span class="line">StringUtils.upperCase(<span class="string">&quot;aBc&quot;</span>);<span class="comment">//---&quot;ABC&quot;</span></span><br><span class="line">StringUtils.lowerCase(<span class="string">&quot;aBc&quot;</span>);<span class="comment">//---&quot;abc&quot;</span></span><br><span class="line">StringUtils.swapCase(<span class="string">&quot;The dog has a BONE&quot;</span>);<span class="comment">//---&quot;tHE DOG HAS A bone&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//替换字符串内容……（replacePattern、replceOnce）</span></span><br><span class="line">StringUtils.replace(<span class="string">&quot;aba&quot;</span>, <span class="string">&quot;a&quot;</span>, <span class="string">&quot;z&quot;</span>);<span class="comment">//---&quot;zbz&quot;</span></span><br><span class="line">StringUtils.overlay(<span class="string">&quot;abcdef&quot;</span>, <span class="string">&quot;zz&quot;</span>, <span class="number">2</span>, <span class="number">4</span>);<span class="comment">//---&quot;abzzef&quot;(指定区域)</span></span><br><span class="line">StringUtils.replaceEach(<span class="string">&quot;abcde&quot;</span>, <span class="keyword">new</span> String[]&#123;<span class="string">&quot;ab&quot;</span>, <span class="string">&quot;d&quot;</span>&#125;,</span><br><span class="line">                        <span class="keyword">new</span> String[]&#123;<span class="string">&quot;w&quot;</span>, <span class="string">&quot;t&quot;</span>&#125;);<span class="comment">//---&quot;wcte&quot;(多组指定替换ab-&gt;w，d-&gt;t)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//重复字符</span></span><br><span class="line">StringUtils.repeat(‘e‘, <span class="number">3</span>);<span class="comment">//---&quot;eee&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//反转字符串</span></span><br><span class="line">StringUtils.reverse(<span class="string">&quot;bat&quot;</span>);<span class="comment">//---&quot;tab&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//删除某字符</span></span><br><span class="line">StringUtils.remove(<span class="string">&quot;queued&quot;</span>, ‘u‘);<span class="comment">//---&quot;qeed&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//分割字符串</span></span><br><span class="line">StringUtils.split(<span class="string">&quot;a..b.c&quot;</span>, ‘.‘);<span class="comment">//---[&quot;a&quot;, &quot;b&quot;, &quot;c&quot;]</span></span><br><span class="line">StringUtils.split(<span class="string">&quot;ab:cd:ef&quot;</span>, <span class="string">&quot;:&quot;</span>, <span class="number">2</span>);<span class="comment">//---[&quot;ab&quot;, &quot;cd:ef&quot;]</span></span><br><span class="line">StringUtils.splitByWholeSeparator(<span class="string">&quot;ab-!-cd-!-ef&quot;</span>, <span class="string">&quot;-!-&quot;</span>, <span class="number">2</span>);<span class="comment">//---[&quot;ab&quot;, &quot;cd-!-ef&quot;]</span></span><br><span class="line">StringUtils.splitByWholeSeparatorPreserveAllTokens(<span class="string">&quot;ab::cd:ef&quot;</span>, <span class="string">&quot;:&quot;</span>);<span class="comment">//-[&quot;ab&quot;,&quot; &quot;,&quot;cd&quot;,&quot;ef&quot;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//去除首尾空格，类似trim……（stripStart、stripEnd、stripAll、stripAccents）</span></span><br><span class="line">StringUtils.strip(<span class="string">&quot; ab c &quot;</span>);<span class="comment">//---&quot;ab c&quot;</span></span><br><span class="line">StringUtils.stripToNull(<span class="keyword">null</span>);<span class="comment">//---null</span></span><br><span class="line">StringUtils.stripToEmpty(<span class="keyword">null</span>);<span class="comment">//---&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//截取字符串</span></span><br><span class="line">StringUtils.substring(<span class="string">&quot;abcd&quot;</span>, <span class="number">2</span>);<span class="comment">//---&quot;cd&quot;</span></span><br><span class="line">StringUtils.substring(<span class="string">&quot;abcdef&quot;</span>, <span class="number">2</span>, <span class="number">4</span>);<span class="comment">//---&quot;cd&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//left、right从左(右)开始截取n位字符</span></span><br><span class="line">StringUtils.left(<span class="string">&quot;abc&quot;</span>, <span class="number">2</span>);<span class="comment">//---&quot;ab&quot;</span></span><br><span class="line">StringUtils.right(<span class="string">&quot;abc&quot;</span>, <span class="number">2</span>);<span class="comment">//---&quot;bc&quot;</span></span><br><span class="line"><span class="comment">//从第n位开始截取m位字符       n  m</span></span><br><span class="line">StringUtils.mid(<span class="string">&quot;abcdefg&quot;</span>, <span class="number">2</span>, <span class="number">4</span>);<span class="comment">//---&quot;cdef&quot;</span></span><br><span class="line"></span><br><span class="line">StringUtils.substringBefore(<span class="string">&quot;abcba&quot;</span>, <span class="string">&quot;b&quot;</span>);<span class="comment">//---&quot;a&quot;</span></span><br><span class="line">StringUtils.substringBeforeLast(<span class="string">&quot;abcba&quot;</span>, <span class="string">&quot;b&quot;</span>);<span class="comment">//---&quot;abc&quot;</span></span><br><span class="line">StringUtils.substringAfter(<span class="string">&quot;abcba&quot;</span>, <span class="string">&quot;b&quot;</span>);<span class="comment">//---&quot;cba&quot;</span></span><br><span class="line">StringUtils.substringAfterLast(<span class="string">&quot;abcba&quot;</span>, <span class="string">&quot;b&quot;</span>);<span class="comment">//---&quot;a&quot;</span></span><br><span class="line"></span><br><span class="line">StringUtils.substringBetween(<span class="string">&quot;tagabctag&quot;</span>, <span class="string">&quot;tag&quot;</span>);<span class="comment">//---&quot;abc&quot;</span></span><br><span class="line">StringUtils.substringBetween(<span class="string">&quot;yabczyabcz&quot;</span>, <span class="string">&quot;y&quot;</span>, <span class="string">&quot;z&quot;</span>);<span class="comment">//---&quot;abc&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="2、RandomStringUtils"><a href="#2、RandomStringUtils" class="headerlink" title="2、RandomStringUtils"></a>2、RandomStringUtils</h3><p>随机数工具类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//随机生成n位数数字</span></span><br><span class="line">RandomStringUtils.randomNumeric(n);</span><br><span class="line"><span class="comment">//在指定字符串中生成长度为n的随机字符串</span></span><br><span class="line">RandomStringUtils.random(n, <span class="string">&quot;abcdefghijk&quot;</span>);</span><br></pre></td></tr></table></figure>

<h3 id="3、NumberUtils"><a href="#3、NumberUtils" class="headerlink" title="3、NumberUtils"></a>3、NumberUtils</h3><p>数字工具类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//从数组中选出最大值</span></span><br><span class="line">NumberUtils.max(<span class="keyword">new</span> <span class="keyword">int</span>[] &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span> &#125;);<span class="comment">//---4</span></span><br><span class="line"><span class="comment">//判断字符串是否全是整数</span></span><br><span class="line">NumberUtils.isDigits(<span class="string">&quot;153.4&quot;</span>);<span class="comment">//--false</span></span><br><span class="line"><span class="comment">//判断字符串是否是有效数字</span></span><br><span class="line">NumberUtils.isNumber(<span class="string">&quot;0321.1&quot;</span>);<span class="comment">//---false    </span></span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>组件</category>
      </categories>
  </entry>
  <entry>
    <title>mybatis-plus使用</title>
    <url>/2021/10/09/%E7%BB%84%E4%BB%B6/mybatis-plus/</url>
    <content><![CDATA[<p>[toc]</p>
<h3 id="使用步骤"><a href="#使用步骤" class="headerlink" title="使用步骤"></a>使用步骤</h3><ol>
<li><p>依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>创建mapper继承Base,这里的@Mapper可不加，plus已封装</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> <span class="keyword">extends</span> <span class="title">BaseMapper</span>&lt;<span class="title">User</span>&gt; </span>&#123; &#125;</span><br></pre></td></tr></table></figure></li>
<li><p>entity—table对应</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@TableName(&quot;article&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Article</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>注入mapper</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">UserMapper userMapper;</span><br></pre></td></tr></table></figure></li>
<li><p>调用QueryWrapper</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//通过数据库获取用户名和密码</span></span><br><span class="line">QueryWrapper&lt;Users&gt;wrapper=<span class="keyword">new</span> QueryWrapper&lt;&gt;();</span><br><span class="line">wrapper.eq(<span class="string">&quot;name&quot;</span>,name);</span><br><span class="line">Users users = userMapper.selectOne(wrapper);</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="基本Component"><a href="#基本Component" class="headerlink" title="基本Component"></a>基本Component</h3><ol>
<li>Mapper extends BaseMapper&lt;Student&gt;</li>
<li>Service extends Iservice&lt;Student&gt;</li>
<li>ServiceImpl extends ServiceImpl&lt;Mapper,Student&gt; implements Service </li>
<li>其他<ol>
<li>所有要用到的方法都需要在接口service上定义或者已经被定义</li>
<li>甚至对于需要写mapper.xml的方法需要在xml,mapper,servcie,serviceImpl都要有</li>
</ol>
</li>
</ol>
<h3 id="wrapper"><a href="#wrapper" class="headerlink" title="wrapper"></a>wrapper</h3><p><img src="https://job-wyg.oss-cn-beijing.aliyuncs.com/image-20211009144556147.png" alt="image-20211009144556147"></p>
<span id="more"></span>

<p> <a href="https://mp.baomidou.com/guide/wrapper.html">wrapper官方文档</a></p>
<ol>
<li><p>全等map：allEq(map,bool)</p>
</li>
<li><p>不相等 ne</p>
</li>
<li><p>allEq(filter)  筛选key</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//key有a才算条件</span></span><br><span class="line">allEq((k,v) -&gt; k.indexOf(<span class="string">&quot;a&quot;</span>) &gt;= <span class="number">0</span>, &#123;id:<span class="number">1</span>,name:<span class="string">&quot;老王&quot;</span>,age:<span class="keyword">null</span>&#125;)---&gt;name = <span class="string">&#x27;老王&#x27;</span> and age is <span class="keyword">null</span></span><br></pre></td></tr></table></figure></li>
<li><p>范围 between</p>
<p>between(“age”, 18, 30)<code>---&gt;</code>age between 18 and 30</p>
</li>
<li><p>模糊查询</p>
<p>like(“name”, “王”)<code>---&gt;</code>name like ‘%王%’</p>
<p>likeLeft 左  这个不走索引</p>
</li>
<li><p>insql 纯sql的in</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">inSql(<span class="string">&quot;id&quot;</span>, <span class="string">&quot;select id from table where id &lt; 3&quot;</span>)`---&gt;`<span class="function">id <span class="title">in</span> <span class="params">(select id from table where id &lt; <span class="number">3</span>)</span></span></span><br></pre></td></tr></table></figure></li>
<li><p>groupBy</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">groupBy(<span class="string">&quot;id&quot;</span>, <span class="string">&quot;name&quot;</span>)`---&gt;`group by id,name</span><br></pre></td></tr></table></figure></li>
<li><p>having   sql</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">having(<span class="string">&quot;sum(age) &gt; &#123;0&#125;&quot;</span>, <span class="number">11</span>)---&gt;<span class="function">having <span class="title">sum</span><span class="params">(age)</span> &gt; 11</span></span><br></pre></td></tr></table></figure></li>
<li><p>order asc desc</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">orderByAsc(<span class="string">&quot;id&quot;</span>, <span class="string">&quot;name&quot;</span>)---&gt;order by id ASC,name ASC</span><br></pre></td></tr></table></figure></li>
<li><p>func</p>
</li>
<li><p>apply –拼接sql</p>
<p>该方法可用于数据库<strong>函数</strong> 动态入参的<code>params</code>对应前面<code>applySql</code>内部的<code>&#123;index&#125;</code>部分.这样是不会有sql注入风险的,反之会有!</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">apply(<span class="string">&quot;date_format(dateColumn,&#x27;%Y-%m-%d&#x27;) = &#123;0&#125;&quot;</span>, <span class="string">&quot;2008-08-08&quot;</span>)</span><br><span class="line">    ---&gt; date_format(dateColumn,<span class="string">&#x27;%Y-%m-%d&#x27;</span>) = <span class="string">&#x27;2008-08-08&#x27;</span><span class="string">&quot;)</span></span><br></pre></td></tr></table></figure></li>
<li><p>last –最后拼接</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">last(<span class="string">&quot;limit 1&quot;</span>)</span><br></pre></td></tr></table></figure></li>
<li><p>exists 拼接exists语句</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">exists(<span class="string">&quot;select id from table where age = 1&quot;</span>)---&gt;exists (select id from table where age = <span class="number">1</span>)</span><br></pre></td></tr></table></figure></li>
<li><p>LambdaQuerryWrapper</p>
</li>
</ol>
<h3 id="CURD"><a href="#CURD" class="headerlink" title="CURD"></a>CURD</h3><ol>
<li>BaseMapper<ol>
<li>select<ol>
<li>selectById</li>
<li>selectOne 条件查询唯一条的，有多个符合条件会报错</li>
<li>selectByMap({“name”:”wang”,”age”:12})   map的k是数据库的下划线形式</li>
<li>selectByPage(new Page&lt;Object&gt;(2,10))  </li>
</ol>
</li>
<li>update <ol>
<li>byId(obj) 自动跳过空值  </li>
<li>AllColumnsById</li>
</ol>
</li>
</ol>
</li>
</ol>
<h3 id="method"><a href="#method" class="headerlink" title="method"></a>method</h3><ol>
<li>seleteByMap</li>
</ol>
<h3 id="entity"><a href="#entity" class="headerlink" title="entity"></a>entity</h3><ol>
<li>@TableField</li>
<li></li>
</ol>
<h3 id="自动insert功能"><a href="#自动insert功能" class="headerlink" title="自动insert功能"></a>自动insert功能</h3><ol>
<li><p>创建配置器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//交给spring管理</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyMetaObjectHandler</span> <span class="keyword">implements</span> <span class="title">MetaObjectHandler</span> </span>&#123;</span><br><span class="line">    <span class="comment">//使用mp实现添加操作,这个方法会执行,metaObject元数据(表中的名字,表中的字段)</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertFill</span><span class="params">(MetaObject metaObject)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//根据名称设置属性值</span></span><br><span class="line">        <span class="keyword">this</span>.setFieldValByName(<span class="string">&quot;createTime&quot;</span>,<span class="keyword">new</span> Date(),metaObject);</span><br><span class="line">        <span class="keyword">this</span>.setFieldValByName(<span class="string">&quot;updateTime&quot;</span>,<span class="keyword">new</span> Date(),metaObject);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//使用mp实现修改操作,这个方法会执行</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateFill</span><span class="params">(MetaObject metaObject)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.setFieldValByName(<span class="string">&quot;updateTime&quot;</span>,<span class="keyword">new</span> Date(),metaObject);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>实体类插入创建时间</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//自动创建时间</span></span><br><span class="line"><span class="meta">@TableField(value = &quot;create_time&quot;, fill = FieldFill.INSERT)</span></span><br><span class="line"> java.util.Date dateT</span><br></pre></td></tr></table></figure></li>
<li><p>注意这个Date是java.util</p>
</li>
</ol>
<h3 id="分页查询"><a href="#分页查询" class="headerlink" title="分页查询"></a>分页查询</h3><h3 id="代码生成器"><a href="#代码生成器" class="headerlink" title="代码生成器"></a>代码生成器</h3><h3 id="Id生成"><a href="#Id生成" class="headerlink" title="Id生成"></a>Id生成</h3><ol>
<li><p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//保存/新建  如果没有id就是新建，就创建id，然后插入</span></span><br><span class="line">String id = reqDTO.getId();</span><br><span class="line"><span class="keyword">if</span>(StringUtils.isBlank(id))&#123;</span><br><span class="line">    id = IdWorker.getIdStr();</span><br><span class="line">    <span class="keyword">long</span> id = IdWorker.getId();</span><br><span class="line">    String uuid = IdWorker.get32UUID();</span><br><span class="line">    String idStr = IdWorker.getIdStr();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>UUID(Universally Unique Dentifer)的标准型式包含32个16进制数字,以连字号分为五段,形式为8-4-4-4-12的32个字符,示例:550e8400-e29b-41d4-a716-446655440000</p>
</li>
<li><p><a href="https://blog.csdn.net/qq_40950903/article/details/108589837">各个id对与分布式的应用</a></p>
</li>
<li><p>id生成策略</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">AUTO 数据库ID自增</span><br><span class="line"><span class="keyword">INPUT</span> 用户输入ID</span><br><span class="line">ID_WORKER 全局唯一ID，Long类型的主键</span><br><span class="line">ID_WORKER_STR 字符串全局唯一ID</span><br><span class="line"><span class="type">UUID</span> 全局唯一ID，<span class="type">UUID</span>类型的主键</span><br><span class="line"><span class="keyword">NONE</span> 该类型为未设置主键类</span><br></pre></td></tr></table></figure></li>
<li><p>雪花算法</p>
<p><img src="https://job-wyg.oss-cn-beijing.aliyuncs.com/image-20211013014035492.png" alt="image-20211013014035492"></p>
</li>
</ol>
]]></content>
      <categories>
        <category>组件</category>
      </categories>
  </entry>
  <entry>
    <title>mybatis-plus2</title>
    <url>/2021/11/05/%E7%BB%84%E4%BB%B6/mybatis-plus2/</url>
    <content><![CDATA[<p>[toc]</p>
<h3 id="代码生成器"><a href="#代码生成器" class="headerlink" title="代码生成器"></a>代码生成器</h3><ol>
<li><p>步骤</p>
<ol>
<li><p>依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-generator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>Latest Version<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>java代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">FastAutoGenerator.create(<span class="string">&quot;url&quot;</span>, <span class="string">&quot;username&quot;</span>, <span class="string">&quot;password&quot;</span>)</span><br><span class="line">	.globalConfig(builder -&gt; &#123;</span><br><span class="line">		builder.author(<span class="string">&quot;baomidou&quot;</span>) <span class="comment">// 设置作者</span></span><br><span class="line">            .enableSwagger() <span class="comment">// 开启 swagger 模式</span></span><br><span class="line">			.fileOverride() <span class="comment">// 覆盖已生成文件</span></span><br><span class="line">			.outputDir(<span class="string">&quot;D://&quot;</span>); <span class="comment">// 指定输出目录</span></span><br><span class="line">	&#125;)</span><br><span class="line">	.packageConfig(builder -&gt; &#123;</span><br><span class="line">		builder.parent(<span class="string">&quot;com.baomidou.mybatisplus.samples.generator&quot;</span>) <span class="comment">// 设置父包名</span></span><br><span class="line">			.moduleName(<span class="string">&quot;system&quot;</span>) <span class="comment">// 设置父包模块名</span></span><br><span class="line">            .pathInfo(Collections.singletonMap(OutputFile.mapperXml, <span class="string">&quot;D://&quot;</span>)); <span class="comment">// 设置mapperXml生成路径</span></span><br><span class="line">	&#125;)</span><br><span class="line">	.strategyConfig(builder -&gt; &#123;</span><br><span class="line">		builder.addInclude(<span class="string">&quot;t_simple&quot;</span>) <span class="comment">// 设置需要生成的表名</span></span><br><span class="line">			.addTablePrefix(<span class="string">&quot;t_&quot;</span>, <span class="string">&quot;c_&quot;</span>); <span class="comment">// 设置过滤表前缀</span></span><br><span class="line">	&#125;)</span><br><span class="line">	.templateEngine(<span class="keyword">new</span> FreemarkerTemplateEngine()) <span class="comment">// 使用Freemarker引擎模板，默认的是Velocity引擎模板</span></span><br><span class="line">	.execute();</span><br></pre></td></tr></table></figure></li>
<li></li>
</ol>
</li>
</ol>
]]></content>
      <categories>
        <category>组件</category>
      </categories>
  </entry>
  <entry>
    <title>mybatis之动态sql</title>
    <url>/2021/11/02/%E7%BB%84%E4%BB%B6/mybatis-%E5%8A%A8%E6%80%81sql/</url>
    <content><![CDATA[<h1 id="mybatis之动态sql"><a href="#mybatis之动态sql" class="headerlink" title="mybatis之动态sql"></a>mybatis之动态sql</h1><p>动态sql是Mybatis增加mapper.xml的sql语句的灵活性而设计的。</p>
<p>[toc]</p>
<h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><ol>
<li><p>date-string转换函数</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateInventory&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;com.docc.model.Inventory&quot;</span>&gt;</span></span><br><span class="line">update BUS_INVENTORY</span><br><span class="line">set orgcode = #&#123;orgcode,jdbcType=VARCHAR&#125;,</span><br><span class="line">    reportdate = #&#123;reportdate,jdbcType=CHAR&#125;,</span><br><span class="line">    checkname = &#x27;$&#123;checkname&#125;&#x27;,</span><br><span class="line">    archivetime = to_date(#&#123;archivetime,jdbcType=DATE&#125;,&#x27;yyyy-mm-dd&#x27;)      </span><br><span class="line">where id = #&#123;id,jdbcType=DECIMAL&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="条件"><a href="#条件" class="headerlink" title="条件"></a>条件</h3><ol>
<li><p>条件if</p>
<p> 一定要注意多if于单if下where,and所在位置，但条件的话where就要在if里面，且不需要and，下面用trim解决</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findActiveBlogWithTitleLike&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Blog&quot;</span>&gt;</span></span><br><span class="line">  SELECT * FROM BLOG</span><br><span class="line">  WHERE state = ‘ACTIVE’</span><br><span class="line">  <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;title != null&quot;</span>&gt;</span></span><br><span class="line">    AND title like #&#123;title&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>优先条件 choose-when-otherwise</p>
<p>优先条件查询：繁杂的when&lt;—-&gt;繁杂的if-else</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findActiveBlogLike&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Blog&quot;</span>&gt;</span></span><br><span class="line">  SELECT * FROM BLOG WHERE state = ‘ACTIVE’</span><br><span class="line">  <span class="tag">&lt;<span class="name">choose</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;title != null&quot;</span>&gt;</span></span><br><span class="line">      AND title like #&#123;title&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;author != null and author.name != null&quot;</span>&gt;</span></span><br><span class="line">      AND author_name like #&#123;author.name&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">otherwise</span>&gt;</span></span><br><span class="line">      AND featured = 1</span><br><span class="line">    <span class="tag">&lt;/<span class="name">otherwise</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">choose</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>为null条件trim-where-set</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findActiveBlogLike&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Blog&quot;</span>&gt;</span></span><br><span class="line">  SELECT * FROM BLOG WHERE</span><br><span class="line">  <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;state != null&quot;</span>&gt;</span></span><br><span class="line">    state = #&#123;state&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;title != null&quot;</span>&gt;</span></span><br><span class="line">    AND title like #&#123;title&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;author != null and author.name != null&quot;</span>&gt;</span></span><br><span class="line">    AND author_name like #&#123;author.name&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>集合遍历—foreach  (in)</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectPostIn&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;domain.blog.Post&quot;</span>&gt;</span></span><br><span class="line">  SELECT * FROM POST P</span><br><span class="line">  WHERE ID in</span><br><span class="line">  <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">item</span>=<span class="string">&quot;item&quot;</span> <span class="attr">index</span>=<span class="string">&quot;index&quot;</span> <span class="attr">collection</span>=<span class="string">&quot;list&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">open</span>=<span class="string">&quot;(&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span> <span class="attr">close</span>=<span class="string">&quot;)&quot;</span>&gt;</span></span><br><span class="line">        #&#123;item&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li></li>
</ol>
<h3 id=""><a href="#" class="headerlink" title=""></a></h3><h3 id="传参"><a href="#传参" class="headerlink" title="传参"></a>传参</h3><h3 id="注入攻击"><a href="#注入攻击" class="headerlink" title="注入攻击"></a>注入攻击</h3>]]></content>
      <categories>
        <category>组件</category>
      </categories>
  </entry>
  <entry>
    <title></title>
    <url>/2021/09/09/%E7%BB%84%E4%BB%B6/mybatis/</url>
    <content><![CDATA[<p>[toc]</p>
<h3 id="大致步骤"><a href="#大致步骤" class="headerlink" title="大致步骤"></a>大致步骤</h3><ol>
<li>sqlSessionFactoryBuilder   &lt;- sqlMapConfig</li>
<li>sqlSessionFactory –&gt;sqlSession（Connection的封装，有增删改查功能）</li>
<li>①生成代理对象          ② 定义通用的sql语句</li>
<li>这地方没听会</li>
<li>封装结果集</li>
</ol>
<h3 id="特别的"><a href="#特别的" class="headerlink" title="特别的"></a>特别的</h3><ol>
<li><p>插入后对象会自动生成id</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Repo entity = <span class="keyword">new</span> Repo();</span><br><span class="line">BeanMapper.copy(reqDTO, entity);</span><br><span class="line"><span class="keyword">this</span>.saveOrUpdate(entity);</span><br><span class="line">RepoCategories repoCategories = <span class="keyword">new</span> RepoCategories();</span><br><span class="line">BeanMapper.copy(reqDTO, repoCategories);</span><br><span class="line"><span class="comment">//已经自动copy parentId</span></span><br><span class="line"><span class="comment">//插入entity已经自动形成id</span></span><br><span class="line">repoCategories.setId(entity.getId());</span><br></pre></td></tr></table></figure></li>
<li><p>xml可以 arg0  param1 但是不能写参数类型</p>
</li>
<li><p>模糊查询</p>
<ol>
<li>传入前加入%%</li>
<li>在mapper.xml中写    ‘%${arg0}%’</li>
<li>like concat(‘%’,#{arg0},’%’)</li>
</ol>
</li>
</ol>
<h3 id="一、ORM框架介绍"><a href="#一、ORM框架介绍" class="headerlink" title="一、ORM框架介绍"></a>一、ORM框架介绍</h3><ol>
<li><p>就好像抽掉各个部件的计算机主板，它没有实际作用，但是有许多部件接口，部件被装上后就能使用了</p>
<p>优点：提高开发效率  统一规则，利于团队管理  灵活的配置，利于维护   </p>
</li>
<li><p>SSM框架  </p>
<pre><code> spring      --框架的框架
 springMVC   --用于web应用分层
 mybatis     --小鸟：简化数据库的交互   JDBC的封装
</code></pre>
</li>
</ol>
<h3 id="二、interface"><a href="#二、interface" class="headerlink" title="二、interface"></a>二、interface</h3><ol>
<li>sqlSessionFactory</li>
<li>sqlSession   自定义mybatis和数据库交互的核心类   </li>
<li>IuerDao<br> @select(“select * from name”)<br> List<user> findAll(); </li>
</ol>
<h3 id="三、Class"><a href="#三、Class" class="headerlink" title="三、Class"></a>三、Class</h3><ol>
<li>class Resource  使用类加载器读取配置文件的类 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> inputstream <span class="title">getResourceStream</span><span class="params">(filePath)</span></span></span><br><span class="line"><span class="function">    return Resource.Class.getClassloader.<span class="title">getResourceAsStream</span><span class="params">(filePath)</span> <span class="comment">//获取字节码     获取字节码类加载器   根据类加载器读取配置</span></span></span><br></pre></td></tr></table></figure>
</li>
<li>class sqlSessionFactoryBuilder    //用于创建工厂对象  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> sqlSessionFactory <span class="title">build</span><span class="params">(Inputstream config)</span></span></span><br><span class="line"><span class="function">    configration cfg </span>=XMLConfigBuider.loadConfigration(config)</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> factory(config) </span><br></pre></td></tr></table></figure>
</li>
<li>class DefalutsqlSession impl sqlSession  创建代理对象，释放资源 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">pri configration cfg</span><br><span class="line">pri conn</span><br><span class="line"><span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">getMapper</span><span class="params">(class&lt;T&gt; daoInterClass)</span></span></span><br><span class="line"><span class="function">    proxy.<span class="title">newProxyInstace</span><span class="params">(daoInterClass.getClassloader()</span>,new Class[]</span>&#123;daoInterClass&#125;,<span class="keyword">new</span> MapperProxy(cfg.getmappers(),conn))          </span><br><span class="line">        <span class="comment">//proxy代理  ---&gt;  加载类   </span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    <span class="title">if</span><span class="params">(conn!=<span class="keyword">null</span>)</span></span></span><br></pre></td></tr></table></figure></li>
</ol>
<ol start="4">
<li><p>class configration       </p>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function">pri driver</span></span><br><span class="line"><span class="function">pri url</span></span><br><span class="line"><span class="function">pri username</span></span><br><span class="line"><span class="function">pri password</span></span><br><span class="line"><span class="function">pri Map&lt;String,Mapper&gt; mappers</span></span><br><span class="line"><span class="function">getter and <span class="title">setter</span><span class="params">(mappers)</span></span></span><br><span class="line"><span class="function">setMapper</span></span><br><span class="line"><span class="function">    <span class="keyword">this</span>.mappers.<span class="title">putAll</span><span class="params">(mappers)</span>  追加放入</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>class Mapper    用于封装sql语句和全限定类名resultType<br> pri resultType<br> pri sql</p>
</li>
<li><p>class factory implements sqlSessionFactory<br> pri configration cfg<br> openSession</p>
</li>
<li><p>class MapperProxy impl InvocationHandler   增强seletelist方法    —&gt; DefalutsqlSession</p>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">pri Map&lt;string,map&gt; mappers;</span><br><span class="line"><span class="function">pri conn</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy,Method method,Object []args)</span></span></span><br><span class="line"><span class="function">    methodname </span>=method.getname                  获取方法名</span><br><span class="line">    classname=method.getdeclaringClass().getname(); 获取方法所在类名</span><br><span class="line">    key =classname+<span class="string">&#x27;.&#x27;</span>+methodname</span><br><span class="line">    mapper=mapper.get(key)</span><br><span class="line">    <span class="keyword">if</span>(mapper==<span class="keyword">null</span>) <span class="keyword">throw</span> <span class="function">out</span></span><br><span class="line"><span class="function">    return new <span class="title">Execute</span><span class="params">()</span>.<span class="title">selectlist</span><span class="params">(mapper,conn)</span></span></span><br></pre></td></tr></table></figure>
</li>
<li><p>class DatasourceUtil   创建数据源的类</p>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> conn <span class="title">getconnection</span><span class="params">(configration cfg)</span></span></span><br><span class="line"><span class="function">    <span class="keyword">try</span> class.<span class="title">forname</span><span class="params">(daoInterClass.getClassloader()</span>)</span></span><br><span class="line"><span class="function">    return DriverMpper.<span class="title">getconnection</span><span class="params">(cfg.geturl,cfg,getusername,cfg.getpassword)</span></span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="四、配置文件"><a href="#四、配置文件" class="headerlink" title="### 四、配置文件"></a>### 四、配置文件</h3><h4 id="4-1-sqlMapConfig-xml"><a href="#4-1-sqlMapConfig-xml" class="headerlink" title="4.1 sqlMapConfig.xml"></a>4.1 sqlMapConfig.xml</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">conf</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">envs</span> <span class="attr">default</span>=<span class="string">&quot;mysql&quot;</span>&gt;</span>  <span class="comment">&lt;!--配置环境--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">env</span> <span class="attr">id</span>=<span class="string">&quot;mysql&quot;</span>&gt;</span>    <span class="comment">&lt;!--配置mysql环境--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionmanger</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>&gt;</span><span class="comment">&lt;!--配置事物类型--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span> <span class="comment">&lt;!--配置数据源--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span> =<span class="string">&quot;driver&quot;</span> <span class="attr">value</span> <span class="attr">com.driver....</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">url</span> &gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">username</span> &gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">password</span>&gt;</span></span><br><span class="line">             /&gt;   </span><br><span class="line">        /&gt;</span><br><span class="line">    /&gt;</span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span>   <span class="comment">&lt;!--指定映射文件--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span> =<span class="string">&quot;iuserdao.xml&quot;</span>&gt;</span> <span class="comment">&lt;!--xml型--&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">class</span> =<span class="string">&quot;com.wyg.dao.IuerDao&quot;</span>&gt;</span><span class="comment">&lt;!--注解型--&gt;</span></span><br><span class="line">    /&gt;</span><br><span class="line">/&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="4-2mapper-xml"><a href="#4-2mapper-xml" class="headerlink" title="4.2mapper.xml"></a>4.2mapper.xml</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findAll&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;&quot;</span>&gt;</span>   <span class="comment">&lt;!--id 方法名  --&gt;</span></span><br><span class="line">    /&gt;</span><br><span class="line">/&gt;</span><br></pre></td></tr></table></figure>



<ol start="2">
<li></li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>spring-redis</title>
    <url>/2021/10/06/%E7%BB%84%E4%BB%B6/redis/</url>
    <content><![CDATA[<h3 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h3><ol>
<li><p>使用步骤</p>
<ol>
<li><p>依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- reids by boot --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- spring2.X集成redis所需common-pool2--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-pool2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<span id="more"></span></li>
<li><p>创建配置类(@Configuration)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableCaching</span> <span class="comment">//开启缓存</span></span><br><span class="line"><span class="meta">@Configuration</span>  <span class="comment">//配置类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisConfig</span> <span class="keyword">extends</span> <span class="title">CachingConfigurerSupport</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RedisTemplate&lt;String, Object&gt; <span class="title">redisTemplate</span><span class="params">(RedisConnectionFactory factory)</span> </span>&#123;</span><br><span class="line">        RedisTemplate&lt;String, Object&gt; template = <span class="keyword">new</span> RedisTemplate&lt;&gt;();</span><br><span class="line">        RedisSerializer&lt;String&gt; redisSerializer = <span class="keyword">new</span> StringRedisSerializer();</span><br><span class="line">        Jackson2JsonRedisSerializer jackson2JsonRedisSerializer = <span class="keyword">new</span> Jackson2JsonRedisSerializer(Object.class);</span><br><span class="line">        ObjectMapper om = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">        om.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);</span><br><span class="line">        om.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);</span><br><span class="line">        jackson2JsonRedisSerializer.setObjectMapper(om);</span><br><span class="line">        template.setConnectionFactory(factory);</span><br><span class="line">        <span class="comment">//key序列化方式</span></span><br><span class="line">        template.setKeySerializer(redisSerializer);</span><br><span class="line">        <span class="comment">//value序列化</span></span><br><span class="line">        template.setValueSerializer(jackson2JsonRedisSerializer);</span><br><span class="line">        <span class="comment">//value hashmap序列化</span></span><br><span class="line">        template.setHashValueSerializer(jackson2JsonRedisSerializer);</span><br><span class="line">        <span class="keyword">return</span> template;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CacheManager <span class="title">cacheManager</span><span class="params">(RedisConnectionFactory factory)</span> </span>&#123;</span><br><span class="line">        RedisSerializer&lt;String&gt; redisSerializer = <span class="keyword">new</span> StringRedisSerializer();</span><br><span class="line">        Jackson2JsonRedisSerializer jackson2JsonRedisSerializer = <span class="keyword">new</span> Jackson2JsonRedisSerializer(Object.class);</span><br><span class="line">        <span class="comment">//解决查询缓存转换异常的问题</span></span><br><span class="line">        ObjectMapper om = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">        om.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);</span><br><span class="line">        om.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);</span><br><span class="line">        jackson2JsonRedisSerializer.setObjectMapper(om);</span><br><span class="line">        <span class="comment">// 配置序列化（解决乱码的问题）,过期时间600秒</span></span><br><span class="line">        RedisCacheConfiguration config = RedisCacheConfiguration.defaultCacheConfig()</span><br><span class="line">                .entryTtl(Duration.ofSeconds(<span class="number">600</span>))</span><br><span class="line">                .serializeKeysWith(RedisSerializationContext.SerializationPair.fromSerializer(redisSerializer))</span><br><span class="line">                .serializeValuesWith(RedisSerializationContext.SerializationPair.fromSerializer(jackson2JsonRedisSerializer))</span><br><span class="line">                .disableCachingNullValues();</span><br><span class="line">        RedisCacheManager cacheManager = RedisCacheManager.builder(factory)</span><br><span class="line">                .cacheDefaults(config)</span><br><span class="line">                .build();</span><br><span class="line">        <span class="keyword">return</span> cacheManager;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li>
<li><p>Controller开启加上缓存注解</p>
<ol>
<li><pre><code class="java">@Cacheable(value = &quot;banner&quot;,key = &quot;&#39;selectIndexList&#39;&quot;)
</code></pre>
</li>
<li><p>注意key 双引号里面有单引号</p>
</li>
<li></li>
</ol>
</li>
<li><p>启动redis</p>
</li>
</ol>
</li>
<li><p>效果，先查redis缓存，没有再去数据库查询。</p>
</li>
</ol>
]]></content>
      <categories>
        <category>组件</category>
      </categories>
  </entry>
  <entry>
    <title>springAop</title>
    <url>/2021/10/13/%E7%BB%84%E4%BB%B6/spring-%E9%9D%A2%E5%90%91%E5%88%87%E9%9D%A2/</url>
    <content><![CDATA[<h3 id="AOP"><a href="#AOP" class="headerlink" title="AOP"></a>AOP</h3><ol>
<li>底层: 动态代理</li>
<li>aspect:切面 即增加的功能  Log()</li>
<li>x<ol>
<li>oop 面向对象  </li>
<li>AOP 以切面为核心，找到所有能用切面实现的功能<ol>
<li><p>日志 </p>
</li>
<li><p>事务</p>
</li>
<li><p>统计</p>
</li>
<li><p>参数校验</p>
</li>
<li><p>权限鉴定</p>
<span id="more"></span></li>
</ol>
</li>
</ol>
</li>
<li>术语<ol>
<li>joinPoint，连接点</li>
<li>pointCut 切入点：多个连接点集合</li>
<li>目标对象：需要增强的类</li>
<li>Advice 切面功能执行时间</li>
</ol>
</li>
<li>AOP实现<ol>
<li>springAop  笨重</li>
<li>aspectJ 开源框架</li>
</ol>
</li>
<li>AspectJ<ol>
<li>注解<ol>
<li>@Advice<ol>
<li>@Before </li>
<li>@After </li>
<li>@Arount</li>
</ol>
</li>
<li>execution切入点表达式()</li>
</ol>
</li>
<li>步骤<ol>
<li>依赖<ol>
<li>spring </li>
<li>spring-aspectJ</li>
</ol>
</li>
<li>spring配置文件声明对象<ol>
<li>声明目标对象</li>
<li>声明切面对象</li>
<li>声明AspectJ的自动代理生成器的标签</li>
</ol>
</li>
<li>创建接口和实现类</li>
<li>创建切面类@Aspect</li>
<li>通过注解配置切面类的<ol>
<li>切入点</li>
<li>切入时间</li>
</ol>
</li>
<li>通过springCotext.getBean()就获得了代理类</li>
</ol>
</li>
</ol>
</li>
</ol>
]]></content>
      <categories>
        <category>spring</category>
      </categories>
  </entry>
  <entry>
    <title>spring-easyExcel</title>
    <url>/2021/10/10/%E7%BB%84%E4%BB%B6/spring%E7%BB%84%E4%BB%B6/</url>
    <content><![CDATA[<p>[toc]</p>
<h3 id="easyExcel"><a href="#easyExcel" class="headerlink" title="easyExcel"></a>easyExcel</h3><ol>
<li><p>依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>easyexcel<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="comment">&lt;!-- poi office --&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.poi<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>poi<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;poi.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<span id="more"></span></li>
<li><p>entity</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ExcelProperty(&quot;字典名称&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="meta">@ExcelProperty(&quot;字典描述&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String description;</span><br></pre></td></tr></table></figure></li>
<li><p>FileUtil.下载</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">downloadEasyExcel</span><span class="params">(HttpServletResponse response, List&lt;T&gt; ExcelBases)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">       String fileName = URLEncoder.encode(<span class="string">&quot;DictData&quot;</span>, <span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">       response.setContentType(<span class="string">&quot;application/vnd.ms-excel&quot;</span>);</span><br><span class="line">       response.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">       response.setHeader(<span class="string">&quot;Content-disposition&quot;</span>, <span class="string">&quot;attachment;filename=&quot;</span> + fileName + <span class="string">&quot;.xlsx&quot;</span>);</span><br><span class="line">       <span class="comment">// excel头策略</span></span><br><span class="line">       WriteCellStyle headWriteCellStyle = <span class="keyword">new</span> WriteCellStyle();</span><br><span class="line">       WriteFont headWriteFont = <span class="keyword">new</span> WriteFont();</span><br><span class="line">       headWriteFont.setFontHeightInPoints((<span class="keyword">short</span>) <span class="number">11</span>);</span><br><span class="line">       headWriteFont.setBold(<span class="keyword">false</span>);</span><br><span class="line">       headWriteCellStyle.setWriteFont(headWriteFont);</span><br><span class="line">       <span class="comment">// excel内容策略</span></span><br><span class="line">       WriteCellStyle contentWriteCellStyle = <span class="keyword">new</span> WriteCellStyle();</span><br><span class="line">       WriteFont contentWriteFont = <span class="keyword">new</span> WriteFont();</span><br><span class="line">       contentWriteFont.setFontHeightInPoints((<span class="keyword">short</span>) <span class="number">11</span>);</span><br><span class="line">       contentWriteCellStyle.setWriteFont(contentWriteFont);</span><br><span class="line">       <span class="comment">// 设置handler</span></span><br><span class="line">       HorizontalCellStyleStrategy styleStrategy = <span class="keyword">new</span> HorizontalCellStyleStrategy(headWriteCellStyle, contentWriteCellStyle);</span><br><span class="line">       <span class="comment">/** 导出数据查询方法*/</span></span><br><span class="line">       EasyExcel.write(response.getOutputStream(), ExcelBases.get(<span class="number">0</span>).getClass())</span><br><span class="line">               .sheet(<span class="string">&quot;下载excel服务&quot;</span>)</span><br><span class="line">               .registerWriteHandler(styleStrategy)</span><br><span class="line">               .doWrite(ExcelBases);</span><br><span class="line">   </span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></li>
<li><p>上传</p>
</li>
<li><p>关键 下载的时候controller return null</p>
</li>
</ol>
]]></content>
      <categories>
        <category>spring</category>
      </categories>
  </entry>
  <entry>
    <title>web组件</title>
    <url>/2021/10/04/%E7%BB%84%E4%BB%B6/web%E7%BB%84%E4%BB%B6/</url>
    <content><![CDATA[<p>[toc]</p>
<h3 id="thymeleaf"><a href="#thymeleaf" class="headerlink" title="thymeleaf"></a>thymeleaf</h3><ol>
<li><p>步骤</p>
<ol>
<li><p>controller传入Model model</p>
</li>
<li><p>```java<br>model.addAttribute(“name”, “xxxxx”);</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">3. html加入命名空间</span><br><span class="line"></span><br><span class="line">   ```html</span><br><span class="line">   &lt;html <span class="attribute">lang</span>=<span class="string">&quot;en&quot;</span>   xmlns:<span class="attribute">th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span><br></pre></td></tr></table></figure></li>
<li><p>html调用</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;&#x27;hello&#x27; +$&#123;name&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ol>
</li>
</ol>
<span id="more"></span>

<h3 id="mybaitsplus"><a href="#mybaitsplus" class="headerlink" title="mybaitsplus"></a>mybaitsplus</h3><ol>
<li><p>步骤</p>
<ol>
<li><p>依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>mybatis-plus-latest-version<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ol>
</li>
</ol>
<h3 id="Spring-Security"><a href="#Spring-Security" class="headerlink" title="Spring Security"></a>Spring Security</h3><ol>
<li><p> 核心功能</p>
</li>
<li><p>登录认证</p>
</li>
<li><p>用户授权</p>
</li>
<li><p>防止伪造身份</p>
</li>
<li><p>特点</p>
<ol>
<li>和spring无缝连接</li>
<li>功能强大，使用简单</li>
<li>重量级，依赖多</li>
</ol>
</li>
<li><p>使用步骤</p>
<ol>
<li><p>依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>启动</p>
<p><img src="https://job-wyg.oss-cn-beijing.aliyuncs.com/image-20211005014215091.png" alt="image-20211005014215091"></p>
</li>
<li><p>原理：本质是一个过滤器—过滤器—过滤器的链</p>
<ol>
<li><p>登录拦截—&gt;Authentication</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">FilterSecurityInterceptor.doFilter</span><br><span class="line">UsernamePasswordAuthenticationFilter.doFilter <span class="comment">//拦截post的login</span></span><br></pre></td></tr></table></figure></li>
<li><p>过滤器加载：</p>
<ol>
<li><p>加入依赖后springBoot自动加入security配置</p>
<ol>
<li><p>初始化: intiDelegate(WebConfigContext/WebApplicationContext)</p>
<p>wac.getBean(filterName”FilterChainProxy”)</p>
</li>
<li><p>FilterChainProxy.doFilter-&gt;doFilterInternal把所有的过滤器加载到List</p>
</li>
</ol>
</li>
</ol>
</li>
<li><p>两个接口：用于自定义数据库认证</p>
<ol>
<li>@UserDetailsService 用户，基于UsernamaPassword过滤器</li>
<li>@PasswordEncoder 加密密码</li>
</ol>
</li>
<li><p>认证</p>
<ol>
<li><p>设置用户名和密码</p>
<ol>
<li><p>通过配置文件—pro</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">spring.security.user.name</span>=<span class="string">wang</span></span><br><span class="line"><span class="meta">spring.security.user.password</span>=<span class="string">123456</span></span><br></pre></td></tr></table></figure></li>
<li><p>通过继承配置类—WebSecurityConfigerAdapter</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Adapter</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(AuthenticationManagerBuilder auth)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        BCryptPasswordEncoder passwordEncoder=<span class="keyword">new</span> BCryptPasswordEncoder();</span><br><span class="line">        String password = passwordEncoder.encode(<span class="string">&quot;123456&quot;</span>);<span class="comment">//设置密码</span></span><br><span class="line">      auth.inMemoryAuthentication().withUser(<span class="string">&quot;wang&quot;</span>).password(password).roles(<span class="string">&quot;admin&quot;</span>);<span class="comment">//配置</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>报错</p>
<figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">There <span class="keyword">is</span> no PasswordEncoder mapped <span class="keyword">for</span> <span class="keyword">the</span> <span class="built_in">id</span> <span class="string">&quot;null&quot;</span></span><br></pre></td></tr></table></figure>

<p>原因：没有加载到PasswordEncoder这个类</p>
<p>解决：手动在@Component里面加入@Bean</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line">    <span class="function">PasswordEncoder <span class="title">passwordEncoderxxx</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> BCryptPasswordEncoder();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>自定义实现类查询数据库(实际开发)</p>
<ol>
<li><p>没有配置文件的配置，没有WebSecurityConfigerAdapter，那么security就会找UserDetailService接口的是实现类</p>
</li>
<li><p>步骤</p>
<ol>
<li><p>创建UserDetailService手工辅助Bean,并返回一个完整的用于认证和权限鉴定的User{username,password,authorities}</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">UserMapper userMapper;</span><br><span class="line"><span class="meta">@Service(&quot;userDetailsService&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span> <span class="keyword">implements</span> <span class="title">UserDetailsService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> UserDetails <span class="title">loadUserByUsername</span><span class="params">(String s)</span> <span class="keyword">throws</span> UsernameNotFoundException </span>&#123;</span><br><span class="line">        List&lt;GrantedAuthority&gt; authorities = AuthorityUtils.commaSeparatedStringToAuthorityList(<span class="string">&quot;role&quot;</span>);<span class="comment">//加入权限</span></span><br><span class="line">        <span class="comment">//通过数据库获取用户名和密码，这里会自动比较密码是否真确，因为之前已经拦截过user.name和user.password了</span></span><br><span class="line">        String name = <span class="string">&quot;wang&quot;</span>;</span><br><span class="line">        String password = <span class="string">&quot;123&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> User(name,</span><br><span class="line">                <span class="keyword">new</span> BCryptPasswordEncoder().encode(password), authorities);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li>
<li><p>创建WebSecurityConfigerAdapter的子类进行</p>
<ol>
<li><p>认证:configure(AuthenticationManagerBuilder auth)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MySecurityConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserDetailsService userDetailsService;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(AuthenticationManagerBuilder auth)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;认证&quot;</span>);</span><br><span class="line">        auth.userDetailsService(userDetailsService).passwordEncoder(<span class="keyword">new</span> BCryptPasswordEncoder());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li>
<li><p>权限鉴定:  void configure(HttpSecurity http)  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        http.formLogin()<span class="comment">//自定义登录</span></span><br><span class="line">                .loginPage(<span class="string">&quot;/login.html&quot;</span>)<span class="comment">//登录页面---&gt;去另一个configure认证---&gt;认证完---&gt;原路径</span></span><br><span class="line">                .loginProcessingUrl(<span class="string">&quot;/user/login&quot;</span>)<span class="comment">//登录访问路径--&gt;postController</span></span><br><span class="line">                .defaultSuccessUrl(<span class="string">&quot;/test/index&quot;</span>).permitAll()<span class="comment">//登录成功页面</span></span><br><span class="line">                .and().authorizeRequests().antMatchers(<span class="string">&quot;/&quot;</span>,<span class="string">&quot;/test/hi&quot;</span>,<span class="string">&quot;/user/login&quot;</span>).permitAll()<span class="comment">//不需要认证的界面</span></span><br><span class="line">                .anyRequest().authenticated()</span><br><span class="line">                .and().csrf().disable();<span class="comment">//关闭csrf防护。</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li>
<li><p>权限鉴定步骤:</p>
<ol>
<li>用户登录访问任意需要认证的路径，比如/test/hello,”/test/hi”不行。</li>
<li>会跳转到/login.html，用户输入用户名和密码，访问login.html的post表单地址,这个地址对应loginProcessingUrl(“/user/login”)。</li>
<li>认证成功后跳转回/test/hello</li>
<li>失败</li>
<li>暂时没发现defaultSuccessUrl作用</li>
<li>注意login.html必须是username,password</li>
<li>bug—-&gt;我的测试页面一直不需要认证，原因是浏览器没关闭，cookie自带的信息帮我认证了。</li>
</ol>
</li>
</ol>
</li>
</ol>
</li>
</ol>
</li>
</ol>
</li>
</ol>
</li>
<li><p>角色权限</p>
<ol>
<li><p>基于角色/权限访问</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//只有admin才能访问index----&gt;userService从数据库拿到设置权限</span></span><br><span class="line"><span class="comment">//                .antMatchers(&quot;/test/index&quot;).hasAnyAuthority(&quot;admin&quot;)//全部权限</span></span><br><span class="line">                .antMatchers(<span class="string">&quot;test/index&quot;</span>).hasAnyAuthority(<span class="string">&quot;admin,user&quot;</span>)<span class="comment">//任意权限</span></span><br><span class="line"><span class="comment">//                .antMatchers(&quot;/test/index&quot;).hasRole(&quot;&quot;)</span></span><br><span class="line">                .anyRequest().authenticated()</span><br><span class="line">                .and().csrf().disable();<span class="comment">//关闭csrf防护。</span></span><br></pre></td></tr></table></figure>

<ol>
<li>hasAuthority 全部权限</li>
<li>hasAnyAutority 任意权限</li>
<li>hasRole 全部角色</li>
<li>hasAnyRole 任意角色</li>
</ol>
</li>
<li><p>设置权限、角色</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;GrantedAuthority&gt; authorities = AuthorityUtils.commaSeparatedStringToAuthorityList(<span class="string">&quot;ROLE_admin,admin&quot;</span>);</span><br></pre></td></tr></table></figure></li>
<li><p>加入无权限页面</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">http.exceptionHandling().accessDeniedPage(<span class="string">&quot;/unauth.html&quot;</span>);</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
<li><p>基于注解而非配置链.antMatchers(“test/index”).hasAnyAuthority(“admin,user”)的方式</p>
<ol>
<li>@EnableGlobalMethodSecurity(securedEnabled = true) AppRun开启鉴权注解模式</li>
<li>@Secured 用户是否拥有运行这个Controller方法的角色</li>
<li>@PreAuthorize 进入方法前</li>
<li>@PostAuthorize 方法执行后进行鉴权</li>
</ol>
</li>
</ol>
</li>
</ol>
</li>
</ol>
<h5 id="一些理解"><a href="#一些理解" class="headerlink" title="一些理解"></a>一些理解</h5><ol>
<li>感觉SpringSecurity就是一个拿着cookie和客户端请求乱跑的组件。哪里请求鉴权哪里。</li>
<li></li>
</ol>
<h3 id="MybatisPlus"><a href="#MybatisPlus" class="headerlink" title="MybatisPlus"></a>MybatisPlus</h3><ol>
<li>SpringBoot配置文件pro</li>
</ol>
<ol>
<li>server.port=9090 端口</li>
<li>spring.security.user.name=”wang” s</li>
<li>spring.security.user.password=”123456”</li>
</ol>
<h3 id="Lombok"><a href="#Lombok" class="headerlink" title="Lombok"></a>Lombok</h3><ol>
<li>@Data相当于@Getter @Setter @RequiredArgsConstructor @ToString @EqualsAndHashCode这5个注解的合集。</li>
<li>@EqualsAndHashCode(callSuper = true)  验证子类也为equal true</li>
</ol>
<h3 id="issue"><a href="#issue" class="headerlink" title="issue"></a>issue</h3><ol>
<li></li>
</ol>
]]></content>
      <categories>
        <category>组件</category>
      </categories>
  </entry>
  <entry>
    <title>web图片上传与获取</title>
    <url>/2021/10/21/%E7%BB%84%E4%BB%B6/%E5%9B%BE%E7%89%87%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p>[toc]</p>
<h3 id="配置资源路径"><a href="#配置资源路径" class="headerlink" title="配置资源路径"></a>配置资源路径</h3><ol>
<li><p>配置类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebResourceConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addResourceHandlers</span><span class="params">(ResourceHandlerRegistry registry)</span> </span>&#123;</span><br><span class="line">        registry.addResourceHandler(<span class="string">&quot;/img/**&quot;</span>).addResourceLocations(<span class="string">&quot;file:D:/data/java/img/&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>上传mutifile到指定路径</p>
</li>
<li><p>html访问/img/</p>
</li>
</ol>
<h3 id="properties配置文件"><a href="#properties配置文件" class="headerlink" title="properties配置文件"></a>properties配置文件</h3><ol>
<li></li>
</ol>
<h3 id="nginx"><a href="#nginx" class="headerlink" title="nginx"></a>nginx</h3><ol>
<li></li>
</ol>
<h3 id="阿里云OSS"><a href="#阿里云OSS" class="headerlink" title="阿里云OSS"></a>阿里云OSS</h3><ol>
<li><p>依赖</p>
</li>
<li><p>配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.aliyun.oss<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aliyun-sdk-oss<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>代码</p>
<ol>
<li><p>配置类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConstantPropertiesUtils</span> <span class="keyword">implements</span> <span class="title">InitializingBean</span> </span>&#123; <span class="meta">@Value(&quot;$&#123;aliyun.oss.file.endpoint&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String endpoint; <span class="meta">@Value(&quot;$&#123;aliyun.oss.file.keyid&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String keyId; <span class="meta">@Value(&quot;$&#123;aliyun.oss.file.keysecret&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String keySecret; <span class="meta">@Value(&quot;$&#123;aliyun.oss.file.bucketname&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String bucketName;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String END_POIND;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String ACCESS_KEY_ID;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String ACCESS_KEY_SECRET;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String BUCKET_NAME;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterPropertiesSet</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        END_POIND = endpoint;</span><br><span class="line">        ACCESS_KEY_ID = keyId;</span><br><span class="line">        ACCESS_KEY_SECRET = keySecret;</span><br><span class="line">        BUCKET_NAME = bucketName;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>上传</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">uploadFileAvatar</span><span class="params">(MultipartFile file)</span> </span>&#123;</span><br><span class="line">       <span class="comment">// 工具类获取值</span></span><br><span class="line">       String endpoint = OssConfig.END_POIND;</span><br><span class="line">       String bucketName = OssConfig.BUCKET_NAME;</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           <span class="comment">// 创建OSS实例。</span></span><br><span class="line">           OSS ossClient = <span class="keyword">new</span> OSSClientBuilder().build(endpoint,</span><br><span class="line">                   OssConfig.ACCESS_KEY_ID, OssConfig.ACCESS_KEY_SECRET);</span><br><span class="line">           <span class="comment">//获取文件名称</span></span><br><span class="line">           String fileName =getFileName(file.getOriginalFilename());</span><br><span class="line">           fileName=<span class="string">&quot;test.jpg&quot;</span>;</span><br><span class="line">           <span class="comment">//第一个参数  Bucket名称 文件路径  文件流</span></span><br><span class="line">           ossClient.putObject(bucketName, fileName, file.getInputStream());</span><br><span class="line">           ossClient.shutdown();  <span class="comment">// 关闭OSSClient。</span></span><br><span class="line">           <span class="comment">//把上传之后文件路径返回</span></span><br><span class="line">           <span class="comment">//需要把上传到阿里云oss路径手动拼接出来</span></span><br><span class="line">           String url = <span class="string">&quot;https://&quot;</span> + bucketName + <span class="string">&quot;.&quot;</span> + endpoint + <span class="string">&quot;/&quot;</span> + fileName;</span><br><span class="line">           System.out.println(url);<span class="comment">//https://job-wyg.oss-cn-beijing.aliyuncs.com/test.jpg</span></span><br><span class="line">           <span class="keyword">return</span> url;</span><br><span class="line">       &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">           e.printStackTrace();</span><br><span class="line">           <span class="keyword">return</span> <span class="keyword">null</span>;&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
</ol>
]]></content>
      <categories>
        <category>组件</category>
      </categories>
  </entry>
  <entry>
    <title></title>
    <url>/2021/10/26/%E7%BB%84%E4%BB%B6/%E6%97%A5%E5%BF%97/</url>
    <content><![CDATA[<h3 id="常见日志"><a href="#常见日志" class="headerlink" title="常见日志"></a>常见日志</h3><ol>
<li>JUL</li>
<li></li>
</ol>
<h3 id="知识"><a href="#知识" class="headerlink" title="知识"></a>知识</h3><ol>
<li><a href="https://cloud.tencent.com/developer/news/546399">常见日志组件的区别</a></li>
<li></li>
</ol>
<h3 id="logger"><a href="#logger" class="headerlink" title="logger"></a>logger</h3><ol>
<li><p>Log4j建议只使用四个级别，优先级从高到低分别是 ERROR、WARN、INFO、DEBUG</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">比如在这里定义了<span class="keyword">INFO</span>级别，则应用程序中所有<span class="keyword">DEBUG</span>级别的日志信息将不被打印出来，也是说大于等于的级别的日志才输出。</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="AOP统一日志"><a href="#AOP统一日志" class="headerlink" title="AOP统一日志"></a>AOP统一日志</h3><p>1. </p>
]]></content>
      <categories>
        <category>组件</category>
      </categories>
  </entry>
  <entry>
    <title>统计分析模块</title>
    <url>/2021/10/23/%E7%BB%84%E4%BB%B6/%E7%BB%9F%E8%AE%A1%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>组件</category>
      </categories>
  </entry>
  <entry>
    <title>DCL数据库控制语言</title>
    <url>/2021/11/05/db/sql/DCL/</url>
    <content><![CDATA[<h3 id="ALTER-TABLE：添加，修改，删除表的列，约束等表的定义。"><a href="#ALTER-TABLE：添加，修改，删除表的列，约束等表的定义。" class="headerlink" title="ALTER TABLE：添加，修改，删除表的列，约束等表的定义。"></a>ALTER TABLE：添加，修改，删除表的列，约束等表的定义。</h3><ol>
<li><p>增加约束  某字段唯一  ALTER TABLE name ADD UNIQUE (fieldname);  </p>
</li>
<li><p>增加字段  alter table  name add 名字 类型 。。</p>
</li>
<li><p>modify改类型和约束   alter table  name  modify old_name 类型 </p>
</li>
<li><p>change修改类型   alter table name change old_name  new_name  类型</p>
<ol>
<li><p>modify和change的区别: modify是原地换，change是去掉以前的新建一个所以</p>
<ol>
<li>change修改需要指定两次表名</li>
<li>只有change可以修改表名 </li>
</ol>
</li>
<li><p>注意 修改类型原来的类型会被去除 (除了primary key)</p>
<span id="more"></span></li>
</ol>
</li>
<li><p>ALTER TABLE Persons AUTO_INCREMENT=100   给已存在的的自增键设置值</p>
</li>
<li><p>增加主码  ALTER TABLE &lt;数据表名&gt; ADD PRIMARY KEY(&lt;列名&gt;);</p>
</li>
<li><p>删除主码： alter table name drop primary key;</p>
</li>
<li><p>删除列 alter table name drop a </p>
</li>
</ol>
<h3 id="drop"><a href="#drop" class="headerlink" title="drop"></a>drop</h3><p>1. </p>
]]></content>
      <categories>
        <category>数据库</category>
        <category>sql</category>
      </categories>
  </entry>
  <entry>
    <title>DDL数据库定义语言</title>
    <url>/2021/11/05/db/sql/DDL/</url>
    <content><![CDATA[<p>[TOC]</p>
<h2 id="一、创建表"><a href="#一、创建表" class="headerlink" title="一、创建表"></a>一、创建表</h2><p>CREATE TABLE Persons<br>(<br>ID int NOT NULL AUTO_INCREMENT,<br>LastName varchar(255) NOT NULL,<br>City varchar(255),<br>PRIMARY KEY (ID)<br>)</p>
<span id="more"></span>

<h2 id="二、约束"><a href="#二、约束" class="headerlink" title="二、约束"></a>二、约束</h2><ol>
<li><p>不为空 not null </p>
</li>
<li><p>default ‘xx’ </p>
</li>
<li><p>自增 auto_increment</p>
<ol>
<li>放在字段后面</li>
<li>每个表只能有一个</li>
<li>这个必须是unique或者primary key</li>
<li>设置起始值 AUTO_INCREMENT=100   </li>
</ol>
</li>
<li><p>唯一键  unique </p>
<ol>
<li>可以放在最后unique(name)，也能放在字段后面 name char(20) unique</li>
<li>不同厂商不同处理，mysql唯一多个NULL</li>
</ol>
</li>
<li><p>主键 primary key(id)  <!--放最后--></p>
</li>
<li><p>foreign key <!--放最后--><!-- foreign key (name1) references table2(name2)--></p>
</li>
<li><p>枚举 color enum(‘blue’,’green’,’red’) DEFAULT NULL <!--这种的底层索引是1,2,3，节省了内存但是灵活性差，每次增加都要修改表，数值字段别用枚举，容易混淆他的索引和真实值--></p>
<!--传入的值是blue,存进的是1,2,3,选出的也是blue--></li>
<li></li>
</ol>
<h2 id="三、属性类型约束"><a href="#三、属性类型约束" class="headerlink" title="三、属性类型约束"></a>三、属性类型约束</h2><h4 id="3-1字符"><a href="#3-1字符" class="headerlink" title="3.1字符"></a>3.1字符</h4><h4 id="3-2数字"><a href="#3-2数字" class="headerlink" title="3.2数字"></a>3.2数字</h4><pre><code>##### 3.21整数
</code></pre>
<ol>
<li>tinyint </li>
<li>smallint</li>
<li>mediumint </li>
<li>int</li>
<li>integer</li>
<li>bigint</li>
<li>long </li>
</ol>
<h5 id="3-22小数"><a href="#3-22小数" class="headerlink" title="3.22小数"></a>3.22小数</h5><ol>
<li>decimal </li>
<li>float</li>
<li>(丢失数据因为0.2=1/8+1/16…所以一般用decimal) </li>
</ol>
<h4 id="3-3时间"><a href="#3-3时间" class="headerlink" title="3.3时间"></a>3.3时间</h4><ol>
<li>date 3</li>
<li>time 3</li>
<li>year 1</li>
<li>datetime 8</li>
<li> timestamp 4</li>
</ol>
<h2 id="四、索引"><a href="#四、索引" class="headerlink" title="四、索引"></a>四、索引</h2><ol>
<li>create index 索引名 on 表名(字段名 desc); 降序</li>
<li>create index 索引名 on 表名(字段名 asc); 升序</li>
<li>create table name{ ,,, index index_name(列)}</li>
<li>show index from name 查看索引</li>
<li>drop index index_name on name</li>
<li>alter table name drop index index_name</li>
<li>主键、外键会自动创建索引</li>
</ol>
]]></content>
      <categories>
        <category>数据库</category>
        <category>sql语句</category>
      </categories>
  </entry>
  <entry>
    <title>DML数据库，操纵语言</title>
    <url>/2021/11/05/db/sql/DML/</url>
    <content><![CDATA[<p>[toc]</p>
<h3 id="一、Select"><a href="#一、Select" class="headerlink" title="一、Select"></a>一、Select</h3><h4 id="1-1-where-like-and-or-between-in"><a href="#1-1-where-like-and-or-between-in" class="headerlink" title="1.1 where  like  and  or  between  in"></a>1.1 where  like  and  or  between  in</h4><ol>
<li><p>select * from name where  age &lt;&gt; 18; 查询年龄不等于18的人</p>
</li>
<li><p>select * from name where age&gt;18 and sex=’男’ </p>
</li>
<li><p>update name set age =18 where not id =10;  按条件修改</p>
</li>
<li><p>select * from name where age between 4 and 10; 查询4-10岁  前闭后开</p>
</li>
<li><p>select * from name where age in (3,4,10)  查询3，4，10 岁数据</p>
<span id="more"></span></li>
</ol>
<h4 id="1-2-with-as-子查询"><a href="#1-2-with-as-子查询" class="headerlink" title="1.2 with as 子查询"></a>1.2 with as 子查询</h4><ol>
<li><p>子查询是派生表，Mysql规定派生表必须有别名</p>
<p>SELECT id FROM (SELECT * FROM el_paper )</p>
<p>错误信息:Every derived table must have its own alias</p>
<p>正确格式: SELECT id FROM (SELECT * FROM el_paper )as a</p>
</li>
<li><p>in形式的as写里面,普通selete形式的as 在()外面</p>
<p>SELECT id FROM  el_paper where  id in (SELECT id FROM el_paper as a)</p>
</li>
</ol>
<h4 id="1-3-group-by"><a href="#1-3-group-by" class="headerlink" title="1.3 group by"></a>1.3 group by</h4><ol>
<li><p>选出每个学生最大分数的试卷信息(注意，这种会有两列user_score)</p>
<p>SELECT *,user_score FROM el_paper GROUP BY(user_id);</p>
</li>
<li></li>
</ol>
<h4 id="1-10-其他select"><a href="#1-10-其他select" class="headerlink" title="1.10 其他select"></a>1.10 其他select</h4><table>
<thead>
<tr>
<th>关键字</th>
<th>含义</th>
<th>语句</th>
</tr>
</thead>
<tbody><tr>
<td>\G</td>
<td>分行显示</td>
<td>select *  from student \G;</td>
</tr>
<tr>
<td>distinct</td>
<td>去重</td>
<td>select distinct age, sex from student</td>
</tr>
<tr>
<td>别名</td>
<td>别名</td>
<td>select age 年龄 from student s</td>
</tr>
<tr>
<td>like</td>
<td>模糊查询</td>
<td>select * from name where  namex  like ‘黄%’  所有姓黄的</td>
</tr>
<tr>
<td>in</td>
<td>范围</td>
<td>select * from student where name in (“wang”,”zhang”)</td>
</tr>
<tr>
<td>子查询1</td>
<td>子查询先执行 in表达式</td>
<td>select * from student where name not in select fail_name from file_exam</td>
</tr>
<tr>
<td>子查询2</td>
<td>函数表达式</td>
<td>select * from name where age &gt;(select avg(age) from name)</td>
</tr>
<tr>
<td>子查询3</td>
<td></td>
<td>select * from  name where (age,high) =(select max(age),max(high) from name )</td>
</tr>
<tr>
<td>exists</td>
<td>和in差不多</td>
<td></td>
</tr>
<tr>
<td>is null</td>
<td>空判断</td>
<td>select * from name where age is null;</td>
</tr>
<tr>
<td>union</td>
<td>组合查询</td>
<td></td>
</tr>
<tr>
<td>子查询</td>
<td></td>
<td></td>
</tr>
<tr>
<td>order by</td>
<td>排序</td>
<td></td>
</tr>
<tr>
<td>asc ,desc</td>
<td>升降,与orderby同用</td>
<td></td>
</tr>
<tr>
<td>limit</td>
<td>前几条/分页</td>
<td>select * from name where sex=’男’ limit page, sizeg;</td>
</tr>
<tr>
<td>group by</td>
<td>统计分组，与fun同用</td>
<td>select sex ,avg(age) from name group by sex ; 男女各自的平均年龄</td>
</tr>
<tr>
<td>having</td>
<td>分组过滤,</td>
<td>select sex ,count(*) from name group by sex having count(*)&gt;2  ; 人数大于2的性别数量</td>
</tr>
<tr>
<td>group_concat</td>
<td>信息分组,group by 同用</td>
<td>select id</td>
</tr>
<tr>
<td>count,avg…</td>
<td>聚合函数，可单独使用</td>
<td>select * from name where age &gt;(select avg(age) from name)</td>
</tr>
</tbody></table>
<h3 id="Update"><a href="#Update" class="headerlink" title="Update"></a>Update</h3><h3 id="Insert"><a href="#Insert" class="headerlink" title="Insert"></a>Insert</h3><ol>
<li>外表数据  insert into t3 select * from choose where sno=’s00001’;</li>
<li>多行插入 多行 insert into name values(…), (…)</li>
<li>部分字段插入 insert into name (列1，列2) values(100,’张三’)</li>
</ol>
<h3 id="Delete"><a href="#Delete" class="headerlink" title="Delete"></a>Delete</h3><ol>
<li><p>delete from name where id=6;</p>
</li>
<li><p>删除所有数据    </p>
<ol>
<li>delete from name;        dml 在确认不rollback后生效</li>
<li>truncate table name;    ddl 立即生效</li>
</ol>
</li>
</ol>
]]></content>
      <categories>
        <category>数据库</category>
        <category>sql语句</category>
      </categories>
  </entry>
  <entry>
    <title>sql函数</title>
    <url>/2021/11/05/db/sql/sql%E5%87%BD%E6%95%B0/</url>
    <content><![CDATA[<ol>
<li><p>replace</p>
<ol>
<li><p>查询替换  select *,replace(address,’区’,’呕’)  from test_tb</p>
</li>
<li><p>更新替换  update set address=replace(address,’区’,’呕’) from test_tb</p>
</li>
<li><p>插入替换 (类似于saveOrUpdate)  replace into test_tb VALUES(6,’wokou’,’新九州岛’,’日本’)</p>
<p>向表中“替换插入”一条数据，如果原表中没有id=6这条数据就作为新数据插入(相当于insert into作用)；如果原表中有id=6这条数据就做替换(相当于update作用)。对于没有指定的字段以默认值插入。</p>
<span id="more"></span></li>
</ol>
</li>
<li><p>concat</p>
<ol>
<li>将字符串/字段拼接</li>
<li>concat_ws() 拼接并用’,’分割，也可以指定分隔符</li>
<li>select concat (id, name, score) as info from tt2;</li>
<li>注意<ol>
<li>如果任意一个为Null，返回null，一般的sql函数只要表达式的一个null就会返回Null</li>
</ol>
</li>
</ol>
</li>
<li><p>group_concat</p>
<ol>
<li><p>分组信息，同group by通用</p>
<p><img src="https://job-wyg.oss-cn-beijing.aliyuncs.com/image-20211106013507369.png" alt="image-20211106013507369"></p>
</li>
<li><p>如果选中多列，可以指定分隔符</p>
</li>
</ol>
</li>
<li><p>ifnull </p>
<ol>
<li>如果arg0为null，就返回arg1</li>
<li>SELECT IFNULL(“Hello”, “RUNOOB”);  返回hello</li>
<li>select sum(ifnull(age,100)) from name  年龄缺失按100统计</li>
</ol>
</li>
<li><p>char_length 返回字符串长度</p>
</li>
</ol>
]]></content>
      <categories>
        <category>数据库</category>
        <category>sql语句</category>
      </categories>
  </entry>
  <entry>
    <title>优化sql</title>
    <url>/2021/11/05/db/sql/%E4%BC%98%E5%8C%96sql/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>数据库</category>
        <category>sql语句</category>
      </categories>
  </entry>
  <entry>
    <title>其他sql</title>
    <url>/2021/11/05/db/sql/%E5%85%B6%E4%BB%96sql/</url>
    <content><![CDATA[<h3 id="导入导出"><a href="#导入导出" class="headerlink" title="导入导出"></a>导入导出</h3><ol>
<li><p>导出数据库结构、数据、结构和数据、导出表</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> mysqldump <span class="operator">-</span>uroot <span class="operator">-</span>p123456 <span class="operator">-</span>d db1<span class="operator">&gt;</span> dbname.sql</span><br><span class="line">mysql<span class="operator">&gt;</span> mysqldump <span class="operator">-</span>uroot <span class="operator">-</span>p123456 <span class="operator">-</span>t db1 <span class="operator">&gt;</span> dbname.sql</span><br><span class="line">mysql<span class="operator">&gt;</span> mysqldump <span class="operator">-</span>uroot <span class="operator">-</span>p123456 db1 <span class="operator">&gt;</span> dbname.sql</span><br><span class="line">mysql<span class="operator">&gt;</span> mysqldump <span class="operator">-</span>uroot <span class="operator">-</span>p123456 <span class="operator">-</span>d db1 test <span class="operator">&gt;</span> test.sql</span><br></pre></td></tr></table></figure></li>
<li><p>导入</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> source d:<span class="operator">/</span>test.sql</span><br></pre></td></tr></table></figure></li>
<li><p>导出、入  txt</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">INTO</span> OUTFILE <span class="string">&#x27;temp.txt&#x27;</span></span><br><span class="line">LOAD DATA INFILE <span class="string">&#x27;/home/temp.txt&#x27;</span> <span class="keyword">INTO</span> <span class="keyword">TABLE</span> table_name</span><br></pre></td></tr></table></figure>

<span id="more"></span></li>
</ol>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><ol>
<li><p>设计数据库字符</p>
<p>create database  db1 charset=utf8;</p>
</li>
<li><p> 删除数据库 drop database db1</p>
</li>
<li><p>复制表 复制表 create table t2 as select * from choose;</p>
</li>
<li><p>复制表结构 create table t3 as select * from choose where 1=2;</p>
</li>
</ol>
<h3 id="数据库去重"><a href="#数据库去重" class="headerlink" title="数据库去重"></a>数据库去重</h3><ol>
<li><p>新建一个表进行迁移</p>
</li>
<li><p>代码解决</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span> <span class="keyword">delete</span>  <span class="keyword">from</span> student <span class="keyword">where</span> id <span class="keyword">not</span> <span class="keyword">in</span> (selete id,<span class="built_in">max</span>(age) <span class="keyword">from</span> student <span class="keyword">group</span> <span class="keyword">by</span> (name) <span class="keyword">as</span> a)</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span> <span class="keyword">DELETE</span> <span class="keyword">from</span> el_paper <span class="keyword">where</span> id <span class="keyword">not</span> <span class="keyword">in</span> (<span class="keyword">SELECT</span> id <span class="keyword">from</span> (<span class="keyword">SELECT</span> id,user_score <span class="keyword">FROM</span> el_paper <span class="keyword">GROUP</span> <span class="keyword">BY</span>(user_id)) <span class="keyword">as</span> a )</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>DAL数据库</title>
    <url>/2021/11/05/db/sql/%E8%AE%BE%E7%BD%AEsql/</url>
    <content><![CDATA[<h3 id="查看"><a href="#查看" class="headerlink" title="查看"></a>查看</h3><ol>
<li>查看表的构造  show create  table name;</li>
<li>查看所有数据库/表  show databases/tables;</li>
<li>查看表每个字段的约束  desc(describe缩写) tablename;</li>
</ol>
<span id="more"></span>

<h3 id="设置"><a href="#设置" class="headerlink" title="设置"></a>设置</h3>]]></content>
      <categories>
        <category>数据库</category>
        <category>sql语句</category>
      </categories>
  </entry>
  <entry>
    <title>文件组件</title>
    <url>/2021/11/08/java/java%E7%BB%84%E4%BB%B6/%E6%96%87%E4%BB%B6/</url>
    <content><![CDATA[<h2 id="File"><a href="#File" class="headerlink" title="File"></a>File</h2><p><a href="https://blog.csdn.net/m0_37989184/article/details/93025734">参考</a></p>
<p>File类的常见方法（参考一位大牛的，不小心把链接关了）<br>1.创建。<br>boolean createNewFile(); //创建文件<br>boolean mkdir();创建文件夹<br>boolean mkdirs();创建多级文件夹。</p>
<p>2.删除。<br>boolean delete();<br>void deleteOnExit();在程序退出时删除文件。</p>
<p>3.判断。<br>boolean canExcute(); 判断是否可执行<br>boolean exists(); 文件事是否存在。<br>isFile();文件<br>isDirectory();文件夹<br>isHidden();//java能得到文件中的隐藏文件但是对隐藏文件时不能访问的<br>isAbsolute();//绝对路径即时不存在也能得到。<br>4.获取信息。<br>getName();<br>getPath();<br>getParent();</p>
<p>4.三种文件创建方式：<br>File file = new File(“E:/…”);//文件/文件夹路径对象<br>File file = new File(“…” ,””…);//父目录绝对路径 + 子目录名称<br>File file = new File(“…”,”…”);//父目录File对象 + 子目录名称</p>
<p>file.exists():判断文件/文件夹是否存在<br>file.delete():删除文件/文件夹<br>file.isDirectory():判读是否为目录<br>file.isFile():判读是否为文件夹<br>file.mkdir():创建文件夹(仅限一级目录)<br>file.mkdirs():创建多及目录文件夹(包括但不限一级目录)<br>file.createNewFile():创建文件<br>file.getAbsolutePath():得到文件/文件夹的绝对路径<br>file.getName():得到文件/文件夹的名字<br>file.String():同样是得到文件/文件夹的绝对路径等于file.getAbsolutePath()<br>file.getParent():得到父目录的绝对路径String 不可以调用可以调用mkdir()方法</p>
<p>file.getParentFile()：得到父目录的绝对路径的返回值是File型可以调用mkdir()方法</p>
<p>String[] gdir.list():得到目录的子目录\文件的名称(不是绝对路径)<br>File[] dir.listFiles():得到目录的子目录\文件事是否存在。</p>
<h2 id="文件下载"><a href="#文件下载" class="headerlink" title="文件下载"></a>文件下载</h2><h3 id="response"><a href="#response" class="headerlink" title="response"></a>response</h3><ol>
<li><a href="https://blog.csdn.net/qq_37651267/article/details/91380351">content-type对应</a></li>
<li></li>
</ol>
<h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><ol>
<li>后端通过response下载文件，这个controller就得返回void</li>
<li>post请求不能下载文件，对于需要上传一个body的下载请求，需要拆分成一个post请求得到文件地址，然后在发送一个get请求。</li>
<li></li>
</ol>
]]></content>
      <categories>
        <category>java</category>
      </categories>
  </entry>
  <entry>
    <title></title>
    <url>/2021/11/09/java/java%E7%BB%84%E4%BB%B6/file-content-type/</url>
    <content><![CDATA[<p>[toc]</p>
<h3 id="一、比较全面的contentType的类型值"><a href="#一、比较全面的contentType的类型值" class="headerlink" title="一、比较全面的contentType的类型值"></a>一、比较全面的contentType的类型值</h3><p><a href="https://blog.csdn.net/qq_37651267/article/details/91380351">参考</a></p>
<p>文件扩展名    Content-Type(Mime-Type)    文件扩展名    Content-Type(Mime-Type)<br>.<em>（ 二进制流，不知道下载文件类型）    application/octet-stream    .tif    image/tiff<br>.asp    text/asp    .asx    video/x-ms-asf<br>.au    audio/basic    .avi    video/avi<br>.awf    application/vnd.adobe.workflow    .biz    text/xml<br>.bmp    application/x-bmp    .bot    application/x-bot<br>.cit    application/x-cit    .class    java/</em><br>.csi    application/x-csi    .css    text/css<br>.dcd    text/xml    .dcx    application/x-dcx<br>.dib    application/x-dib    .dll    application/x-msdownload<br>.doc    application/msword    .dot    application/msword<br>.drw    application/x-drw    .dtd    text/xml<br>.dwf    Model/vnd.dwf    .dwf    application/x-dwf<br>.etd    application/x-ebx    .exe    application/x-msdownload<br>.gif    image/gif    .gl2    application/x-gl2<br>.hrf    application/x-hrf    .hta    application/hta<br>.htc    text/x-component    .htm    text/html<br>.html    text/html    .htt    text/webviewhtml<br>.htx    text/html    .icb    application/x-icb<br>.ico    image/x-icon    .ico    application/x-ico<br>.iff    application/x-iff    .ig4    application/x-g4<br>.igs    application/x-igs    .iii    application/x-iphone<br>.img    application/x-img    .ins    application/x-internet-signup<br>.java    java/*    .jfif    image/jpeg<br>.jpe    image/jpeg    .jpe    application/x-jpe<br>.jpeg    image/jpeg    .jpg    image/jpeg<br>.jpg    application/x-jpg    .js    application/x-javascript<br>.jsp    text/html    .la1    audio/x-liquid-file<br>.mdb    application/msaccess    .mdb    application/x-mdb<br>.mfp    application/x-shockwave-flash    .mht    message/rfc822<br>.mhtml    message/rfc822    .mi    application/x-mi<br>.mid    audio/mid    .midi    audio/mid<br>.mil    application/x-mil    .mml    text/xml<br>.mnd    audio/x-musicnet-download    .mns    audio/x-musicnet-stream<br>.mocha    application/x-javascript    .movie    video/x-sgi-movie<br>.mp1    audio/mp1    .mp2    audio/mp2<br>.mp2v    video/mpeg    .mp3    audio/mp3<br>.mp4    video/mpeg4    .mpa    video/x-mpg<br>.mpd    application/vnd.ms-project    .mpe    video/x-mpeg<br>.mpeg    video/mpg    .mpg    video/mpg<br>.mpga    audio/rn-mpeg    .mpp    application/vnd.ms-project<br>.mps    video/x-mpeg    .mpt    application/vnd.ms-project<br>.mpv    video/mpg    .mpv2    video/mpeg<br>.mpw    application/vnd.ms-project    .mpx    application/vnd.ms-project<br>.mtx    text/xml    .mxp    application/x-mmxp<br>.net    image/pnetvue    .nrf    application/x-nrf<br>.nws    message/rfc822    .odc    text/x-ms-odc<br>.out    application/x-out    .p10    application/pkcs10<br>.p12    application/x-pkcs12    .p7b    application/x-pkcs7-certificates<br>.p7c    application/pkcs7-mime    .p7m    application/pkcs7-mime<br>.p7r    application/x-pkcs7-certreqresp    .p7s    application/pkcs7-signature<br>.pc5    application/x-pc5    .pci    application/x-pci<br>.pcl    application/x-pcl    .pcx    application/x-pcx<br>.pdf    application/pdf    .pdf    application/pdf<br>.pdx    application/vnd.adobe.pdx    .pfx    application/x-pkcs12<br>.pgl    application/x-pgl    .pic    application/x-pic<br>.pko    application/vnd.ms-pki.pko    .pl    application/x-perl<br>.plg    text/html    .pls    audio/scpls<br>.plt    application/x-plt    .png    image/png<br>.png    application/x-png    .pot    application/vnd.ms-powerpoint<br>.ppa    application/vnd.ms-powerpoint    .ppm    application/x-ppm<br>.pps    application/vnd.ms-powerpoint    .ppt    application/vnd.ms-powerpoint<br>.ppt    application/x-ppt    .pr    application/x-pr<br>.prf    application/pics-rules    .prn    application/x-prn<br>.prt    application/x-prt    .ps    application/x-ps<br>.ps    application/postscript    .ptn    application/x-ptn<br>.pwz    application/vnd.ms-powerpoint    .r3t    text/vnd.rn-realtext3d<br>.ra    audio/vnd.rn-realaudio    .ram    audio/x-pn-realaudio<br>.ras    application/x-ras    .rat    application/rat-file<br>.rdf    text/xml    .rec    application/vnd.rn-recording<br>.red    application/x-red    .rgb    application/x-rgb<br>.rjs    application/vnd.rn-realsystem-rjs    .rjt    application/vnd.rn-realsystem-rjt<br>.rlc    application/x-rlc    .rle    application/x-rle<br>.rm    application/vnd.rn-realmedia    .rmf    application/vnd.adobe.rmf<br>.rmi    audio/mid    .rmj    application/vnd.rn-realsystem-rmj<br>.rmm    audio/x-pn-realaudio    .rmp    application/vnd.rn-rn_music_package<br>.rms    application/vnd.rn-realmedia-secure    .rmvb    application/vnd.rn-realmedia-vbr<br>.rmx    application/vnd.rn-realsystem-rmx    .rnx    application/vnd.rn-realplayer<br>.rp    image/vnd.rn-realpix    .rpm    audio/x-pn-realaudio-plugin<br>.rsml    application/vnd.rn-rsml    .rt    text/vnd.rn-realtext<br>.rtf    application/msword    .rtf    application/x-rtf<br>.rv    video/vnd.rn-realvideo    .sam    application/x-sam<br>.sat    application/x-sat    .sdp    application/sdp<br>.sdw    application/x-sdw    .sit    application/x-stuffit<br>.slb    application/x-slb    .sld    application/x-sld<br>.slk    drawing/x-slk    .smi    application/smil<br>.smil    application/smil    .smk    application/x-smk<br>.snd    audio/basic    .sol    text/plain<br>.sor    text/plain    .spc    application/x-pkcs7-certificates<br>.spl    application/futuresplash    .spp    text/xml<br>.ssm    application/streamingmedia    .sst    application/vnd.ms-pki.certstore<br>.stl    application/vnd.ms-pki.stl    .stm    text/html<br>.sty    application/x-sty    .svg    text/xml<br>.swf    application/x-shockwave-flash    .tdf    application/x-tdf<br>.tg4    application/x-tg4    .tga    application/x-tga<br>.tif    image/tiff    .tif    application/x-tif<br>.tiff    image/tiff    .tld    text/xml<br>.top    drawing/x-top    .torrent    application/x-bittorrent<br>.tsd    text/xml    .txt    text/plain<br>.uin    application/x-icq    .uls    text/iuls<br>.vcf    text/x-vcard    .vda    application/x-vda<br>.vdx    application/vnd.visio    .vml    text/xml<br>.vpg    application/x-vpeg005    .vsd    application/vnd.visio<br>.vsd    application/x-vsd    .vss    application/vnd.visio<br>.vst    application/vnd.visio    .vst    application/x-vst<br>.vsw    application/vnd.visio    .vsx    application/vnd.visio<br>.vtx    application/vnd.visio    .vxml    text/xml<br>.wav    audio/wav    .wax    audio/x-ms-wax<br>.wb1    application/x-wb1    .wb2    application/x-wb2<br>.wb3    application/x-wb3    .wbmp    image/vnd.wap.wbmp<br>.wiz    application/msword    .wk3    application/x-wk3<br>.wk4    application/x-wk4    .wkq    application/x-wkq<br>.wks    application/x-wks    .wm    video/x-ms-wm<br>.wma    audio/x-ms-wma    .wmd    application/x-ms-wmd<br>.wmf    application/x-wmf    .wml    text/vnd.wap.wml<br>.wmv    video/x-ms-wmv    .wmx    video/x-ms-wmx<br>.wmz    application/x-ms-wmz    .wp6    application/x-wp6<br>.wpd    application/x-wpd    .wpg    application/x-wpg<br>.wpl    application/vnd.ms-wpl    .wq1    application/x-wq1<br>.wr1    application/x-wr1    .wri    application/x-wri<br>.wrk    application/x-wrk    .ws    application/x-ws<br>.ws2    application/x-ws    .wsc    text/scriptlet<br>.wsdl    text/xml    .wvx    video/x-ms-wvx<br>.xdp    application/vnd.adobe.xdp    .xdr    text/xml<br>.xfd    application/vnd.adobe.xfd    .xfdf    application/vnd.adobe.xfdf<br>.xhtml    text/html    .xls    application/vnd.ms-excel<br>.xls    application/x-xls    .xlw    application/x-xlw<br>.xml    text/xml    .xpl    audio/scpls<br>.xq    text/xml    .xql    text/xml<br>.xquery    text/xml    .xsd    text/xml<br>.xsl    text/xml    .xslt    text/xml<br>.xwd    application/x-xwd    .x_b    application/x-x_b<br>.sis    application/vnd.symbian.install    .sisx    application/vnd.symbian.install<br>.x_t    application/x-x_t    .ipa    application/vnd.iphone<br>.apk    application/vnd.android.package-archive    .xap    application/x-silverlight-app</p>
<h3 id="二、Requests"><a href="#二、Requests" class="headerlink" title="二、Requests"></a>二、Requests</h3><p>Heade r    解释    示例<br>Accept    指定客户端能够接收的内容类型    Accept: text/plain, text/html<br>Accept-Charset    浏览器可以接受的字符编码集。    Accept-Charset: iso-8859-5<br>Accept-Encoding    指定浏览器可以支持的web服务器返回内容压缩编码类型。    Accept-Encoding: compress, gzip<br>Accept-Language    浏览器可接受的语言    Accept-Language: en,zh<br>Accept-Ranges    可以请求网页实体的一个或者多个子范围字段    Accept-Ranges: bytes<br>Authorization    HTTP授权的授权证书    Authorization: Basic QWxhZGRpbjpvcGVuIHNlc2FtZQ==<br>Cache-Control    指定请求和响应遵循的缓存机制    Cache-Control: no-cache<br>Connection    表示是否需要持久连接。    （HTTP 1.1默认进行持久连接）<br>Cookie    HTTP请求发送时，会把保存在该请求域名下的所有cookie值一起发送给web服务器。    Cookie: $Version=1; Skin=new;<br>Content-Length    请求的内容长度    Content-Length: 348<br>Content-Type    请求的与实体对应的MIME信息    Content-Type: application/x-www-form-urlencoded<br>Date    请求发送的日期和时间    Date: Tue, 15 Nov 2010 08:12:31 GMT<br>Expect    请求的特定的服务器行为    Expect: 100-continue<br>From    发出请求的用户的Email    From: <a href="mailto:&#x75;&#115;&#x65;&#x72;&#64;&#x65;&#109;&#x61;&#x69;&#x6c;&#x2e;&#x63;&#111;&#x6d;">&#x75;&#115;&#x65;&#x72;&#64;&#x65;&#109;&#x61;&#x69;&#x6c;&#x2e;&#x63;&#111;&#x6d;</a><br>Host    指定请求的服务器的域名和端口号    Host: <a href="http://www.zcmhi.com/">www.zcmhi.com</a><br>If-Match    只有请求内容与实体相匹配才有效    If-Match: “737060cd8c284d8af7ad3082f209582d”<br>If-Modified-Since    如果请求的部分在指定时间之后被修改则请求成功，未被修改则返回304代码    If-Modified-Since: Sat, 29 Oct 2010 19:43:31 GMT<br>If-None-Match    如果内容未改变返回304代码，参数为服务器先前发送的Etag，与服务器回应的Etag比较判断是否改变    If-None-Match: “737060cd8c284d8af7ad3082f209582d”<br>If-Range    如果实体未改变，服务器发送客户端丢失的部分，否则发送整个实体。参数也为Etag    If-Range: “737060cd8c284d8af7ad3082f209582d”<br>If-Unmodified-Since    只在实体在指定时间之后未被修改才请求成功    If-Unmodified-Since: Sat, 29 Oct 2010 19:43:31 GMT<br>Max-Forwards    限制信息通过代理和网关传送的时间    Max-Forwards: 10<br>Pragma    用来包含实现特定的指令    Pragma: no-cache<br>Proxy-Authorization    连接到代理的授权证书    Proxy-Authorization: Basic QWxhZGRpbjpvcGVuIHNlc2FtZQ==<br>Range    只请求实体的一部分，指定范围    Range: bytes=500-999<br>Referer    先前网页的地址，当前请求网页紧随其后,即来路    Referer: <a href="http://www.zcmhi.com/archives/71.html">http://www.zcmhi.com/archives/71.html</a><br>TE    客户端愿意接受的传输编码，并通知服务器接受接受尾加头信息    TE: trailers,deflate;q=0.5<br>Upgrade    向服务器指定某种传输协议以便服务器进行转换（如果支持）    Upgrade: HTTP/2.0, SHTTP/1.3, IRC/6.9, RTA/x11<br>User-Agent    User-Agent的内容包含发出请求的用户信息    User-Agent: Mozilla/5.0 (Linux; X11)<br>Via    通知中间网关或代理服务器地址，通信协议    Via: 1.0 fred, 1.1 nowhere.com (Apache/1.1)<br>Warning    关于消息实体的警告信息    Warn: 199 Miscellaneous warning</p>
<h3 id="三、Responses"><a href="#三、Responses" class="headerlink" title="三、Responses"></a>三、Responses</h3><p>Heade r    解释    示例<br>Accept-Ranges    表明服务器是否支持指定范围请求及哪种类型的分段请求    Accept-Ranges: bytes<br>Age    从原始服务器到代理缓存形成的估算时间（以秒计，非负）    Age: 12<br>Allow    对某网络资源的有效的请求行为，不允许则返回405    Allow: GET, HEAD<br>Cache-Control    告诉所有的缓存机制是否可以缓存及哪种类型    Cache-Control: no-cache<br>Content-Encoding    web服务器支持的返回内容压缩编码类型。    Content-Encoding: gzip<br>Content-Language    响应体的语言    Content-Language: en,zh<br>Content-Length    响应体的长度    Content-Length: 348<br>Content-Location    请求资源可替代的备用的另一地址    Content-Location: /index.htm<br>Content-MD5    返回资源的MD5校验值    Content-MD5: Q2hlY2sgSW50ZWdyaXR5IQ==<br>Content-Range    在整个返回体中本部分的字节位置    Content-Range: bytes 21010-47021/47022<br>Content-Type    返回内容的MIME类型    Content-Type: text/html; charset=utf-8<br>Date    原始服务器消息发出的时间    Date: Tue, 15 Nov 2010 08:12:31 GMT<br>ETag    请求变量的实体标签的当前值    ETag: “737060cd8c284d8af7ad3082f209582d”<br>Expires    响应过期的日期和时间    Expires: Thu, 01 Dec 2010 16:00:00 GMT<br>Last-Modified    请求资源的最后修改时间    Last-Modified: Tue, 15 Nov 2010 12:45:26 GMT<br>Location    用来重定向接收方到非请求URL的位置来完成请求或标识新的资源    Location: <a href="http://www.zcmhi.com/archives/94.html">http://www.zcmhi.com/archives/94.html</a><br>Pragma    包括实现特定的指令，它可应用到响应链上的任何接收方    Pragma: no-cache<br>Proxy-Authenticate    它指出认证方案和可应用到代理的该URL上的参数    Proxy-Authenticate: Basic<br>refresh    应用于重定向或一个新的资源被创造，在5秒之后重定向（由网景提出，被大部分浏览器支持）    Refresh: 5; url=<a href="http://www.zcmhi.com/archives/94.html">http://www.zcmhi.com/archives/94.html</a><br>Retry-After    如果实体暂时不可取，通知客户端在指定时间之后再次尝试    Retry-After: 120<br>Server    web服务器软件名称    Server: Apache/1.3.27 (Unix) (Red-Hat/Linux)<br>Set-Cookie    设置Http Cookie    Set-Cookie: UserID=JohnDoe; Max-Age=3600; Version=1<br>Trailer    指出头域在分块传输编码的尾部存在    Trailer: Max-Forwards<br>Transfer-Encoding    文件传输编码    Transfer-Encoding:chunked<br>Vary    告诉下游代理是使用缓存响应还是从原始服务器请求    Vary: *<br>Via    告知代理客户端响应是通过哪里发送的    Via: 1.0 fred, 1.1 nowhere.com (Apache/1.1)<br>Warning    警告实体可能存在的问题    Warning: 199 Miscellaneous warning<br>WWW-Authenticate    表明客户端请求实体应该使用的授权方案    WWW-Authenticate: Basic</p>
]]></content>
  </entry>
  <entry>
    <title>时间组件</title>
    <url>/2021/10/21/java/java%E7%BB%84%E4%BB%B6/%E6%97%B6%E9%97%B4%E7%B1%BB/</url>
    <content><![CDATA[<h3 id="自定义"><a href="#自定义" class="headerlink" title="自定义"></a>自定义</h3><ol>
<li><p>sql—util转换</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">java.sql.Date sqlDate = <span class="keyword">new</span> java.sql.Date(utilDate.getTime());</span><br><span class="line">Date date = <span class="keyword">new</span> Date(sqlDate.getTime());<span class="comment">//sql.Date转util.Date        </span></span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h3><ol>
<li><p>joda</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>joda-time<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>joda-time<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>主要获取当前时间 好看字符串</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">DateTime dt = <span class="keyword">new</span> DateTime();</span><br><span class="line">DateTime dt1 = DateTime.now();<span class="comment">//2021-10-21T13:59:41.040+08:00</span></span><br><span class="line">DateTime dt2 = <span class="keyword">new</span> DateTime(<span class="keyword">new</span> Date());<span class="comment">//2021-10-21T13:59:41.132+08:00</span></span><br><span class="line"><span class="comment">// 指定年月日点分秒生成(参数依次是：年,月,日,时,分,秒,毫秒)</span></span><br><span class="line">DateTime dt3 = <span class="keyword">new</span> DateTime(<span class="number">2012</span>, <span class="number">5</span>, <span class="number">20</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">0</span>, <span class="number">0</span>);        <span class="comment">// 制定ISO8601生成</span></span><br><span class="line">DateTime dt4 = <span class="keyword">new</span> DateTime(<span class="string">&quot;2014-08-01T12:32:3&quot;</span>);</span><br><span class="line">DateTime dt5 = <span class="keyword">new</span> DateTime(<span class="string">&quot;2014-08-01&quot;</span>);</span><br><span class="line">DateTime dt6 = <span class="keyword">new</span> DateTime(Calendar.getInstance())</span><br></pre></td></tr></table></figure></li>
<li><p>转换  插入数据库</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Date date = <span class="keyword">new</span> Date(<span class="keyword">new</span> DateTime().toDate().getTime());</span><br></pre></td></tr></table></figure></li>
<li></li>
</ol>
]]></content>
      <categories>
        <category>javautils</category>
      </categories>
  </entry>
  <entry>
    <title>java懒加载</title>
    <url>/2021/11/02/java/java%E8%AE%BE%E8%AE%A1/java%E6%87%92%E5%8A%A0%E8%BD%BD/</url>
    <content><![CDATA[<ol>
<li><p>[参考](<a href="https://zhuanlan.zhihu.com/p/428095023?utm_source=qq&utm_medium=social&utm_oi=1044004825763094528">函数式编程的Java编码实践：利用惰性写出高性能且抽象的代码 - 知乎 (zhihu.com)</a>)</p>
</li>
<li><p>懒加载的例子</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Supplier&lt; Integer&gt; a = () -&gt; <span class="number">10</span> + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> b = a.get() + <span class="number">1</span>;<span class="comment">//创建b的时候才会运算a</span></span><br></pre></td></tr></table></figure></li>
<li><p>一次计算永久保存的懒加载</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 为了方便与标准的 Java 函数式接口交互，Lazy 也实现了 Supplier</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Lazy</span>&lt; <span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">Supplier</span>&lt; <span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Supplier&lt; ? extends T&gt; supplier;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 利用 value 属性缓存 supplier 计算后的值</span></span><br><span class="line">    <span class="keyword">private</span> T value;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Lazy</span><span class="params">(Supplier&lt; ? extends T&gt; supplier)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.supplier = supplier;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt; T&gt; Lazy&lt; T&gt; of(Supplier&lt; ? extends T&gt; supplier) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Lazy&lt; &gt;(supplier);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">get</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (value == <span class="keyword">null</span>) &#123;</span><br><span class="line">            T newValue = supplier.get();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (newValue == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">&quot;Lazy value can not be null!&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            value = newValue;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//调用</span></span><br><span class="line">Lazy&lt; Integer&gt; a = Lazy.of(() -&gt; <span class="number">10</span> + <span class="number">1</span>);</span><br><span class="line"><span class="keyword">int</span> b = a.get() + <span class="number">1</span>;</span><br></pre></td></tr></table></figure>

<span id="more"></span></li>
<li><p>双重依赖型的懒加载：函子</p>
</li>
<li><p>函子(Functor) 或者叫mapper 或者叫映射</p>
<ol>
<li><p>定义</p>
<p>函子运算可以将一个 T 映射到 S 的 function 应用到 Box&lt; T&gt; 上，让其成为 Box&lt; S&gt;</p>
</li>
<li><p>函数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> &lt; S&gt; Lazy&lt; S&gt; map(Function&lt; ? <span class="keyword">super</span> T, ? extends S&gt; function) &#123;</span><br><span class="line"><span class="keyword">return</span> Lazy.of(() -&gt; function.apply(get()));&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>调用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Lazy&lt; Lazy&lt; Set&lt; String&gt;&gt;&gt; permissions = departmentLazy.map(department -&gt;</span><br><span class="line">         supervisorLazy.map(supervisor -&gt; getPermissions(department, supervisor))</span><br><span class="line">);</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
<li><p>解决多层菱形运算符的懒加载：单子</p>
</li>
<li><p>单子：flatMap</p>
<ol>
<li><p>函数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> &lt; S&gt; Lazy&lt; S&gt; flatMap(Function&lt; ? <span class="keyword">super</span> T, Lazy&lt; ? extends S&gt;&gt; function) &#123;</span><br><span class="line">        <span class="keyword">return</span> Lazy.of(() -&gt; function.apply(get()).get());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li>
<li><p>调用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Lazy&lt; Set&lt; String&gt;&gt; permissions = departmentLazy.flatMap(department -&gt;</span><br><span class="line">         supervisorLazy.map(supervisor -&gt; getPermissions(department, supervisor))</span><br><span class="line">);</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
</ol>
]]></content>
      <categories>
        <category>java设计</category>
      </categories>
  </entry>
  <entry>
    <title>自定义配置文件</title>
    <url>/2021/10/30/spring/%E9%85%8D%E7%BD%AE/%E8%87%AA%E5%AE%9A%E4%B9%89%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/</url>
    <content><![CDATA[<h3 id="properties文件"><a href="#properties文件" class="headerlink" title="properties文件"></a>properties文件</h3><ol>
<li><p>创建文件</p>
<p><img src="https://job-wyg.oss-cn-beijing.aliyuncs.com/image-20211030115341905.png" alt="image-20211030115341905"></p>
</li>
<li><p>加上注解</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PropertySource(&quot;classpath:config/values.properties&quot;)</span>+<span class="meta">@Configuration</span>读取</span><br></pre></td></tr></table></figure>

<span id="more"></span></li>
<li><p>implements InitializingBean 饿汉式加载</p>
<p><img src="https://job-wyg.oss-cn-beijing.aliyuncs.com/image-20211030115459989.png" alt="image-20211030115459989"></p>
</li>
<li><p>@Value(“${name}”)获取属性</p>
</li>
</ol>
]]></content>
      <categories>
        <category>spring</category>
        <category>配置</category>
      </categories>
  </entry>
  <entry>
    <title>pom配置</title>
    <url>/2021/11/05/spring/%E9%85%8D%E7%BD%AE/pom/</url>
    <content><![CDATA[<h3 id="基本依赖"><a href="#基本依赖" class="headerlink" title="基本依赖"></a>基本依赖</h3><ol>
<li>spring<ol>
<li>spring-boot-starter</li>
<li>spring-boot-starter-test</li>
<li>spring-boot-starter-web</li>
<li>spring-boot-devtools</li>
<li>spring-boot-starter-security</li>
<li>spring-security-test</li>
<li>spring-boot-configuration-processor</li>
</ol>
</li>
<li>mysql<ol>
<li>mysql-connector-java</li>
<li>druid</li>
<li>mybatis<ol>
<li>mybatis-spring-boot-starter</li>
<li>mybatis-plus-boot-starter</li>
<li>mybatis-plus-generator</li>
</ol>
</li>
<li>velocity-engine-core</li>
</ol>
</li>
<li>util<ol>
<li>lombok</li>
<li>commons-lang</li>
<li>fastjson</li>
<li>easyexcel</li>
<li>httpclient</li>
<li>swagger<ol>
<li>springfox-swagger2</li>
<li>springfox-swagger-ui</li>
</ol>
</li>
</ol>
</li>
</ol>
<h3 id="基本依赖-1"><a href="#基本依赖-1" class="headerlink" title="基本依赖"></a>基本依赖</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--json--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.vaadin.external.google<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>android-json<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.20131108.vaadin1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--http请求类--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.httpcomponents<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>httpclient<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.5.13<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--日志--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-logging<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--web--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--mybatis-plus--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-generator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 模板引擎 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.velocity<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>velocity-engine-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--连接池--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.vintage<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-vintage-engine<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-freemarker<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.vdurmont<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>emoji-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.56<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--swagger--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.xiaoymin<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>swagger-bootstrap-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.9.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--热部署--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--linux--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ch.ethz.ganymed<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ganymed-ssh2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>build210<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-lang<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-lang<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>





<h3 id="格式说明参考"><a href="#格式说明参考" class="headerlink" title="格式说明参考"></a>格式说明<a href="https://www.cnblogs.com/q1359720840/p/10465933.html">参考</a></h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--指定了当前pom的版本，4.0.0是固定的 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 主项目标识，用来定义当前maven属于哪个实际的项目 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>反写的公司网址 + 项目名<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 模块名，maven项目和实际的项目不是一一对应的关系，maven项目提现的是模块化的概念，一个实际项目往往会被划分为很多个模块 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>项目名 + 模块名<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 当前项目版本号，一般有三个数字组成 第一个数字：大版本号 第二个数字：分支版本号 第三个数字：先版本号 snapshot: 快照 alpha： </span></span><br><span class="line"><span class="comment">        内测版本 beta： 公测版本 Release： 稳定版本 GA： 正式发布版本 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1snapshot<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- maven项目打包方式，默认情况为jar，还可打包为war，zip，pom等 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span><span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 项目描述名 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span><span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 项目地址 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span><span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 项目描述 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span><span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 开发人员列表 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">developers</span>&gt;</span><span class="tag">&lt;/<span class="name">developers</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 许可证信息 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">licenses</span>&gt;</span><span class="tag">&lt;/<span class="name">licenses</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 组织信息 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">organization</span>&gt;</span><span class="tag">&lt;/<span class="name">organization</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment">&lt;!-- 依赖列表 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 依赖项目 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.8.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">type</span>&gt;</span><span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 依赖范围，控制依赖与三种依赖范围的关系 --&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 开发中要使用某一个jar，就要将该jar包引入到项目的classpath中 --&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- maven提供了三种classpath： 1.编译 2.测试 3.运行 --&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 下面的test表明junit只存在于测试的classpath中 --&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- maven为scope提供了六个属性：</span></span><br><span class="line"><span class="comment">                                    compile（默认，编译测试运行都有效）， </span></span><br><span class="line"><span class="comment">                                    provided（编译和测试）servlet, </span></span><br><span class="line"><span class="comment">                                    runtime（测试和运行）jdbc, </span></span><br><span class="line"><span class="comment">                                    test（测试）junit, </span></span><br><span class="line"><span class="comment">                                    system（编译和测试，与本机系统相关联，可移植性差）, </span></span><br><span class="line"><span class="comment">                                    import（导入的范围，只使用在dependencyManagerment中，表示从其他的pom中导入dependency的配置） --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 设置依赖是否可选 --&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 有两个值，true和false，默认是false，继承，若为true，子项目必须显式的引用该依赖 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span><span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 排除依赖传递的列表 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment">&lt;!-- 依赖管理 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 这里定义的依赖不会被运行，即不会被引用为实际的依赖，主要是供子模块集成用 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment">&lt;!-- 为构建行为提供相应的支持 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 插件列表 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 插件 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span><span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span><span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span><span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment">&lt;!-- 用于子模块中对于父模块的继承 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 聚合运行多个maven项目 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span><span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>spring</category>
        <category>配置</category>
      </categories>
  </entry>
  <entry>
    <title>bat</title>
    <url>/2021/11/03/utils/bat/bat%E5%91%BD%E4%BB%A41/</url>
    <content><![CDATA[<h3 id="bat常见命令"><a href="#bat常见命令" class="headerlink" title="bat常见命令"></a>bat常见命令</h3><ol>
<li><p>REM 和 :: 注释</p>
</li>
<li><p>ECHO 和 @</p>
<ol>
<li><p>@字符放在命令前将关闭该命令回显，无论此时echo是否为打开状态。</p>
</li>
<li><p>@ echo off 关闭off 并将这句话不会回显</p>
</li>
<li><p>打印空行 echo.</p>
</li>
<li><p>echo | 管道传参(将echo的输出当作|后面的输入)</p>
</li>
<li><p>新建文件 echo aaa &gt; a.txt</p>
</li>
<li><p>@echo off 关闭cmd的文件路径</p>
<span id="more"></span></li>
</ol>
</li>
<li><p>pause</p>
<p>Echo 其他提示语 &amp; pause &gt; nul</p>
</li>
<li><p>errorlevel</p>
<p>显示返回码echo %errorlevel% </p>
<p>正常返回0  错误1</p>
</li>
<li><p>title 设置cmd窗口标题</p>
</li>
<li><p>color 设置cmd颜色</p>
<p>cmd </p>
<p> 0 = 黑色 8 = 灰色<br> 1 = 蓝色 9 = 淡蓝色<br> 2 = 绿色 A = 淡绿色<br> 3 = 湖蓝色 B = 淡浅绿色<br> 4 = 红色 C = 淡红色<br> 5 = 紫色 D = 淡紫色<br> 6 = 黄色 E = 淡黄色<br> 7 = 白色 F = 亮白色</p>
</li>
<li><p>mode 配置系统设备</p>
</li>
<li><p>GOTO 和 : </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line">:start</span><br><span class="line"><span class="built_in">set</span> /a var+=1</span><br><span class="line"><span class="built_in">echo</span> %var%</span><br><span class="line"><span class="keyword">if</span> %var% leq 3 GOTO start</span><br><span class="line">pause</span><br></pre></td></tr></table></figure></li>
<li><p>FIND</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">FIND [/V] [/C] [/N] [/I] [/OFF[LINE]] <span class="string">&quot;string&quot;</span> [[drive:][path]filename[ ...]]</span><br></pre></td></tr></table></figure>

<p> /V 显示所有未包含指定字符串的行。<br> /C 仅显示包含字符串的行数。<br> /N 显示行号。<br> /I 搜索字符串时忽略大小写。</p>
<p>Find常和type命令结合使用</p>
</li>
<li><p>START</p>
<p>批处理中调用外部程序的命令（该外部程序在新窗口中运行，批处理程序继续往下执行，不理会外部程序的运行状况），如果直接运行外部程序则必须等外部程序完成后才继续执行剩下的指令</p>
<p>例：start explorer d:\</p>
<p>调用图形界面打开D盘</p>
</li>
<li><p>assoc 和 ftype</p>
</li>
<li></li>
<li><p>pushd 和 popd</p>
</li>
<li><p>CALL</p>
</li>
<li><p>shift</p>
</li>
<li><p>IF</p>
</li>
<li><p>setlocal 与 变量延迟</p>
</li>
<li><p>ATTRIB 显示或更改文件属性</p>
</li>
</ol>
]]></content>
      <categories>
        <category>utils</category>
        <category>bat</category>
      </categories>
  </entry>
  <entry>
    <title></title>
    <url>/2021/10/23/%E7%BB%84%E4%BB%B6/%E7%99%BB%E5%BD%95/session/</url>
    <content><![CDATA[<h3 id=""><a href="#" class="headerlink" title=""></a></h3><ol>
<li><a href="https://www.cnblogs.com/sharpxiajun/p/3395607.html">https://www.cnblogs.com/sharpxiajun/p/3395607.html</a></li>
<li></li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>单点登录</title>
    <url>/2021/10/06/%E7%BB%84%E4%BB%B6/%E7%99%BB%E5%BD%95/%E5%8D%95%E7%82%B9%E7%99%BB%E5%BD%95/</url>
    <content><![CDATA[<h2 id="授权登录"><a href="#授权登录" class="headerlink" title="授权登录"></a>授权登录</h2><ol>
<li>单点登录，自系统登录，SSO， Singal Sign on</li>
<li>只需要登陆一次就能无需登录访问其他模块</li>
</ol>
<h3 id="三种方法"><a href="#三种方法" class="headerlink" title="三种方法"></a>三种方法</h3><ol>
<li>在百度浏览器登录后，打开百度贴吧就自动登录了，不需要二次登录。这就是单点登录</li>
<li>三种常见方式<ol>
<li>session广播<ol>
<li>把session复制到其他模块</li>
<li>缺点：复制太浪费资源（时间+内存）</li>
</ol>
</li>
<li>cookie+redis<ol>
<li>redis  放置  k:生成随即唯一值（用户ip,id）,v:用户信息</li>
<li>cookie  将k放入cookie中</li>
<li>访问其他模块时，带着cookie，取出k,查询redis,如果查到并正确</li>
<li>也就是只需要验证签名，就能放心的取出的信息安全有效</li>
</ol>
</li>
<li>token(令牌)<ol>
<li><p>token是按照一定规则生成的并加密的字符串</p>
</li>
<li><p>用户登录–&gt;生成随机字符串–&gt;拼接用户信息</p>
</li>
<li><p>每次访问其他模块，带着这个字符串，其他模块会解码取出用户信息并验证</p>
</li>
<li><p>也就是没到一个模块都要通过User数据库验证token才能确保信息安全有效</p>
<span id="more"></span></li>
</ol>
</li>
</ol>
</li>
</ol>
<h3 id="CAS-中央认证服务"><a href="#CAS-中央认证服务" class="headerlink" title="CAS 中央认证服务"></a>CAS 中央认证服务</h3><p><img src="https://img-blog.csdnimg.cn/20181215232036639.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mzg0NDE4OQ==,size_16,color_FFFFFF,t_70" alt="fff"></p>
<h3 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h3><ol>
<li></li>
</ol>
<h2 id="微服务登录"><a href="#微服务登录" class="headerlink" title="微服务登录"></a>微服务登录</h2><h3 id="OAuth协议"><a href="#OAuth协议" class="headerlink" title="OAuth协议"></a>OAuth协议</h3><ol>
<li>为用户资源授权的协议，第三方不需要知道用户的账号和密码就能知道这个用户是谁</li>
</ol>
<h3 id="JWT-json-web-token"><a href="#JWT-json-web-token" class="headerlink" title="JWT(json web token)"></a>JWT(json web token)</h3><ol>
<li><p>把信息进行安全的json封装，在不同服务器之间传输。</p>
</li>
<li><p>组成(.分割)</p>
<ol>
<li><p>Header</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;&#x27;typ&#x27;:&#x27;jwt&#x27;, token类型</span><br><span class="line">&#x27;alg&#x27;:&#x27;hs256&#x27;&#125; 算法名称</span><br></pre></td></tr></table></figure></li>
<li><p>payload载荷(主要信息)</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;<span class="attr">&quot;name&quot;</span>:<span class="string">&quot;wang&quot;</span>,<span class="attr">&quot;admin&quot;</span>:<span class="literal">true</span>&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>signature签名哈希(防伪标志)</p>
<ol>
<li>header的Base64编码</li>
<li>payload的Base64编码</li>
<li>使用header的加密算法加密1.2部分得到的结果</li>
</ol>
</li>
<li><p>即jwt=base64(header)+base64(payload)+</p>
<p>HMACSHA256( base64UrlEncode(header) + “.” + base64UrlEncode(payload)+”.”+base65(secretKey)) </p>
</li>
<li><p><a href="https://jwt.io/">jwt生成</a></p>
</li>
<li><p><a href="https://1024tools.com/hmac">HMAC sha256加密</a></p>
</li>
<li><p><a href="https://base64.supfree.net/">base64解码</a></p>
</li>
</ol>
</li>
<li><p>基本使用</p>
<ol>
<li><p>依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.jsonwebtoken<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jjwt<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>工具类.getJWT   </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JwtUtils</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> EXPIRE = <span class="number">1000</span> * <span class="number">60</span> * <span class="number">60</span> * <span class="number">24</span>; <span class="comment">//token过期时间</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String APP_SECRET = <span class="string">&quot;ukc8BDbRigUDaY6pZFfWus2jZWLPHO&quot;</span>; <span class="comment">//秘钥</span></span><br><span class="line">    <span class="comment">//生成token字符串的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getJwtToken</span><span class="params">(String id, String nickname)</span></span>&#123;</span><br><span class="line">        String JwtToken = Jwts.builder()</span><br><span class="line">                .setHeaderParam(<span class="string">&quot;typ&quot;</span>, <span class="string">&quot;JWT&quot;</span>)<span class="comment">//1header  </span></span><br><span class="line">                .setHeaderParam(<span class="string">&quot;alg&quot;</span>, <span class="string">&quot;HS256&quot;</span>)<span class="comment">//header 加密算法</span></span><br><span class="line">                .setSubject(<span class="string">&quot;wangyonggan&quot;</span>)<span class="comment">//分类，随便写</span></span><br><span class="line">                .setIssuedAt(<span class="keyword">new</span> Date())  </span><br><span class="line">                .setExpiration(<span class="keyword">new</span> Date(System.currentTimeMillis() + EXPIRE))<span class="comment">//过期时间</span></span><br><span class="line">                .claim(<span class="string">&quot;id&quot;</span>, id)  <span class="comment">//2token主体部分 ，存储用户信息</span></span><br><span class="line">                .claim(<span class="string">&quot;nickname&quot;</span>, nickname)</span><br><span class="line">                .signWith(SignatureAlgorithm.HS256, APP_SECRET)<span class="comment">//3签名</span></span><br><span class="line">                .compact();<span class="comment">//拼接生成</span></span><br><span class="line">        <span class="keyword">return</span> JwtToken;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li>
<li><p>工具类.parseJWT  解析JWT</p>
<ol>
<li>request.header的token</li>
<li>密钥</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getMemberIdByJwtToken</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">       String jwtToken = request.getHeader(<span class="string">&quot;token&quot;</span>);</span><br><span class="line">       <span class="keyword">if</span>(StringUtils.isEmpty(jwtToken)) <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="comment">//加入签名-密钥获得主体claims     </span></span><br><span class="line">       Jws&lt;Claims&gt; claimsJws = Jwts.parser().setSigningKey(APP_SECRET).parseClaimsJws(jwtToken);</span><br><span class="line">       Claims claims = claimsJws.getBody();</span><br><span class="line">       <span class="keyword">return</span> (String)claims.get(<span class="string">&quot;id&quot;</span>);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
<li><p>JWT的单点登录</p>
<ol>
<li>登录–&gt;user<ol>
<li>数据库查询(md5,slat等等等)验证user</li>
<li>返回token=JWT(userInfo)</li>
</ol>
</li>
<li></li>
</ol>
</li>
</ol>
]]></content>
      <categories>
        <category>组件</category>
      </categories>
  </entry>
  <entry>
    <title>参数校验组件</title>
    <url>/2021/10/30/%E7%BB%84%E4%BB%B6/%E7%BB%84%E4%BB%B62/%E5%8F%82%E6%95%B0%E6%A0%A1%E9%AA%8C/</url>
    <content><![CDATA[<h3 id=""><a href="#" class="headerlink" title=""></a></h3><ol>
<li><p>所有</p>
<p><img src="https://job-wyg.oss-cn-beijing.aliyuncs.com/image-20211009142246223.png" alt="image-20211009142246223"></p>
</li>
<li><p>总开关@valid</p>
</li>
<li><p>entity加入@null @size等</p>
</li>
<li><p>指定massage</p>
</li>
<li><p>参数校验异常TO global</p>
</li>
<li></li>
</ol>
]]></content>
      <categories>
        <category>组件2</category>
      </categories>
  </entry>
</search>
